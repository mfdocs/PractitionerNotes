<span style="font-size: 18px; letter-spacing: 0.2px;">This section captures the module related changes, construct related changes and Perl deprecations between v5.16.3 and v5.26.2 with a purpose to simplify migration of Perl scripts from the older to the newer version of Perl. This content is prepared based on the history or changes recorded in&nbsp;</span><a target="1" rel="nofollow" class="external text" href="https://perldoc.perl.org/index-history.html" style="color: rgb(58, 131, 230); letter-spacing: 0.2px; font-size: 15px !important;">Perl Programming Documentation</a><span style="font-size: 18px; letter-spacing: 0.2px;">. The intended audience of this content is primarily the custom Perl script developers.</span><div><span style="font-size: 18px; letter-spacing: 0.2px;"><br></span></div><div><h2 style="font-family: MetricHPE_Medium; margin-top: 25px; margin-bottom: 6px; text-transform: none; padding-top: 0px; border-bottom: none; line-height: 25px; color: rgb(0, 115, 231) !important; font-size: 24px !important;"><span class="mw-headline" id="Perl_Module_Changes">Perl Module Changes</span></h2></div><div><span class="mw-headline"><p style="font-size: 18px; margin: 0px 0px 12px;">With 5.26 upgrade, Perl code modules list has some deprecated modules. However, these modules will still be maintained in CPAN. Perl modules removed from Perl core has been added as additional module in 5.26 version. Hence installation path of few module changes. But this does not have any impact to the "use &lt;module&gt;" construct used in Perl and no changes required from consumers.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Additional_New_Modules">Additional New Modules</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Few new Perl modules are added to resolve some build dependencies with other existing modules. The newly added modules are:</p><table style="width: 287.5px; background-color: rgb(255, 255, 255); margin-top: 5px; font-family: MetricHPE_Medium; margin-left: 0px !important; margin-right: 0px !important;"><tbody><tr><td>Devel::CheckLib</td><td>Test::Deep</td></tr><tr><td>File::Remove</td><td>Test::Fatal</td></tr><tr><td>Module::Install</td><td>Test::MockModule</td></tr><tr><td>Module::ScanDeps</td><td>Test::Needs</td></tr><tr><td>Sub::Identify</td><td>Test::Requires</td></tr><tr><td>Sub::Uplevel</td><td>Test::RequiresInternet</td></tr><tr><td>SUPER</td><td>Test::Warn</td></tr></tbody></table><h2 style="font-family: MetricHPE_Medium; margin-top: 25px; margin-bottom: 6px; text-transform: none; padding-top: 0px; border-bottom: none; line-height: 25px; color: rgb(0, 115, 231) !important; font-size: 24px !important;"><span class="mw-headline" id="Platform_Directory">Platform Directory</span></h2><p style="font-size: 18px; margin: 0px 0px 12px;">Perl Platform directory has been modified for Windows x64 from MSWin32-AMD64-multi-thread to MSWin32-x64-multi-thread. Any user directly referring to the Platform directory will have to modify the same. However Perl script execution does not have any impact as SITE_PERL is updated to use the latest Platform directory.</p><h2 style="font-family: MetricHPE_Medium; margin-top: 25px; margin-bottom: 6px; text-transform: none; padding-top: 0px; border-bottom: none; line-height: 25px; color: rgb(0, 115, 231) !important; font-size: 24px !important;"><span class="mw-headline" id="Deprecated_Utilities">Deprecated Utilities</span></h2><p style="font-size: 18px; margin: 0px 0px 12px;">Perl has removed few of the utilities which were available in bin folder. Deprecated utilities include:</p><p style="font-size: 18px; margin: 0px 0px 12px;"><a class="buttonfullscr" style="color: rgb(58, 131, 230); letter-spacing: normal; font-size: 15px !important;"><button class="flscrbtn" style="max-height: 40px; font-size: 15px !important;"><span class="material-icons flscricn">open_in_new</span></button></a></p><div style="margin: auto 5px;">View Fullscreen</div><p style="font-size: 18px; margin: 0px 0px 12px;"><a class="buttonfullscr" style="color: rgb(58, 131, 230); letter-spacing: normal; font-size: 15px !important;"><button class="flscrbtn" style="max-height: 40px; font-size: 15px !important;"></button></a></p><table style="width: 192.5px; background-color: rgb(255, 255, 255); margin-top: 5px; font-family: MetricHPE_Medium; margin-left: 0px !important; margin-right: 0px !important;"><tbody><tr><td>a2p</td><td>cpanp</td></tr><tr><td>find2perl</td><td>pod2latex</td></tr><tr><td>s2p</td><td>c2ph</td></tr><tr><td>cpanp-run-perl</td><td>Psed</td></tr><tr><td>config_data</td><td>cpan2dist</td></tr><tr><td>Pstruct</td></tr></tbody></table><h2 style="font-family: MetricHPE_Medium; margin-top: 25px; margin-bottom: 6px; text-transform: none; padding-top: 0px; border-bottom: none; line-height: 25px; color: rgb(0, 115, 231) !important; font-size: 24px !important;"><span class="mw-headline" id="Changes_to_default_path_in_.40INC">Changes to default path in @INC</span></h2><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Removal_of_the_current_directory_(&quot;.&quot;)_from_@INC"></span><span class="mw-headline" id="Removal_of_the_current_directory_.28.22..22.29_from_.40INC">Removal of the current directory (".") from @INC</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The Perl binary includes a default set of paths in @INC. Historically, it has also included the current directory (".") as the final entry, unless run with taint mode enabled (perl -T). While convenient, this has security implications. Starting with v5.26, "." is always removed by default. This has implications for installing modules and executing scripts.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="A_new_deprecation_warning_issued_by_do">A new deprecation warning issued by do</span></h3><h5 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-bottom: 4px; text-transform: none; border-bottom: none; font-size: 16px !important;"><span id="use_and_require_use_@INC_to_search_for_the_file_to_load,_do_file_also_searches_@INC_if_the_file_is_a_relative_path._With_the_removal_of_&quot;.&quot;,_a_simple_do_file.pl_will_fail_to_read_in_and_execute_file.pl_from_the_current_directory._Since_this_is_commonly_expected_behavior,_a_new_deprecation_warning_is_now_issued_whenever_do_fails_to_load_a_file_which_it_otherwise_would_have_found_if_a_dot_had_been_in_@INC."></span><span class="mw-headline" id="use_and_require_use_.40INC_to_search_for_the_file_to_load.2C_do_file_also_searches_.40INC_if_the_file_is_a_relative_path._With_the_removal_of_.22..22.2C_a_simple_do_file.pl_will_fail_to_read_in_and_execute_file.pl_from_the_current_directory._Since_this_is_commonly_expected_behavior.2C_a_new_deprecation_warning_is_now_issued_whenever_do_fails_to_load_a_file_which_it_otherwise_would_have_found_if_a_dot_had_been_in_.40INC."><span style="font-weight: 700;">use</span>&nbsp;and&nbsp;<span style="font-weight: 700;">require</span>&nbsp;use @INC to search for the file to load,&nbsp;<span style="font-weight: 700;">do</span>&nbsp;file also searches @INC if the file is a relative path. With the removal of ".", a simple do file.pl will fail to read in and execute file.pl from the current directory. Since this is commonly expected behavior, a new deprecation warning is now issued whenever&nbsp;<span style="font-weight: 700;">do</span>&nbsp;fails to load a file which it otherwise would have found if a dot had been in @INC.</span></h5><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Things_script_and_module_authors_may_need_to_do_to_make_their_software_work_in_above_scenario">Things script and module authors may need to do to make their software work in above scenario</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">PERL_USE_UNSAFE_INC - new environment variable recognized by the Perl interpreter. If this variable has the value 1 when the Perl interpreter starts up, then "." will be automatically appended to @INC (except under tainting). This allows to restore the old Perl interpreter behavior on a case-by-case basis. But this feature will likely be removed in some future Perl version. If the issue is within the code (rather than within included modules), then there are two options to resolve the issues:</p><p style="font-size: 18px; margin: 0px 0px 12px;">1. If the script will only be run within a trusted directory, then add "." back into the path Example:</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;">   <code style="font-size: 16px; font-family: MetricHPE_Medium; background-color: rgb(241, 242, 243); color: rgb(51, 51, 51) !important; padding: 2px 5px !important;">BEGIN {
       my $dir = "/some/trusted/directory";
       chdir $dir or die "Can't chdir to $dir: $!\n";
       # safe now
       push @INC, '.';
   }
   use "Foo::Bar"; # may load /some/trusted/directory/Foo/Bar.pm
   do "config.pl"; # may load /some/trusted/directory/config.pl</code>
</pre><p style="font-size: 18px; margin: 0px 0px 12px;">2. If the script is intended to be run from within untrusted directories, then script failing to load files may be indicative of a security issue. In such cases, replace any relative paths with full paths. Example:</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;">  <code style="font-size: 16px; font-family: MetricHPE_Medium; background-color: rgb(241, 242, 243); color: rgb(51, 51, 51) !important; padding: 2px 5px !important;"> do "foo_config.pl"  --&gt; do "$ENV{HOME}/foo_config.pl"</code>
</pre><h2 style="font-family: MetricHPE_Medium; margin-top: 25px; margin-bottom: 6px; text-transform: none; padding-top: 0px; border-bottom: none; line-height: 25px; color: rgb(0, 115, 231) !important; font-size: 24px !important;"><span id="Unescaped_literal_&quot;{&quot;_characters_in_regular_expression_patterns_are_no_longer_permissible"></span><span class="mw-headline" id="Unescaped_literal_.22.7B.22_characters_in_regular_expression_patterns_are_no_longer_permissible">Unescaped literal "{" characters in regular expression patterns are no longer permissible</span></h2><p style="font-size: 18px; margin: 0px 0px 12px;">When using literal "{" characters in regular expression, it has to be used like "\{" or "[{]" to specify to match a LEFT CURLY BRACKET. Otherwise, it is a fatal pattern compilation error.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="scalar_(%hash)_return_signature_changed"></span><span class="mw-headline" id="scalar_.28.25hash.29_return_signature_changed">scalar (%hash) return signature changed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The value returned for scalar (%hash) will no longer show information about the buckets allocated in the hash. It will simply return the count of used keys. It is thus equivalent to 0+keys(%hash).</p><p style="font-size: 18px; margin: 0px 0px 12px;">Backward compatibility is provided via Hash::Util::bucket_ratio() which provides the same behavior as scalar(%hash) provided in earlier version of Perl.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="keys_returned_from_an_lvalue_subroutine">keys returned from an lvalue subroutine</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">keys returned from an lvalue subroutine can no longer be assigned to in list context. Example:</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;">   <code style="font-size: 16px; font-family: MetricHPE_Medium; background-color: rgb(241, 242, 243); color: rgb(51, 51, 51) !important; padding: 2px 5px !important;">sub foo&nbsp;: lvalue { keys(%INC) }
   (foo) = 3; # death
   sub bar&nbsp;: lvalue { keys(@_) }
   (bar) = 3; # also an error</code>

</pre><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="POSIX::tmpnam()_has_been_removed"></span><span class="mw-headline" id="POSIX::tmpnam.28.29_has_been_removed">POSIX::tmpnam() has been removed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The fundamentally unsafe tmpnam() interface was deprecated in Perl 5.22 and has now been removed. File::Temp interfaces can be used as an alternate.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="The_autoderef_feature_has_been_removed">The autoderef feature has been removed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The experimental autoderef feature which allowed calling push, pop, shift, unshift, splice, keys, values, and each on a scalar argument has been deemed unsuccessful. It has now been removed. Trying to use the feature or to disable the experimental::autoderef warning it previously triggered now yields an exception.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Lexical_$_has_been_removed"></span><span class="mw-headline" id="Lexical_.24_has_been_removed">Lexical $_ has been removed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">$_ was introduced in Perl 5.10, and subsequently caused much confusion with no obvious solution. In Perl 5.18.0, it was made experimental on the theory that it would either be removed or redesigned in a less confusing way. Over the years, no alternatives were proposed and the feature has now been removed and will fail to compile.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Nested_declarations_are_now_disallowed">Nested declarations are now disallowed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Keyword “my”, “our”, or “state” declaration is no longer allowed inside of another “my”, “our”, or “state” declaration. For example, these are now fatal:</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;"> <code style="font-size: 16px; font-family: MetricHPE_Medium; background-color: rgb(241, 242, 243); color: rgb(51, 51, 51) !important; padding: 2px 5px !important;"> my ($x, my($y));
  our (my $x);</code>
</pre><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="sysread(),_syswrite(),_recv()_and_send()_are_deprecated_on_:utf8_handles"></span><span class="mw-headline" id="sysread.28.29.2C_syswrite.28.29.2C_recv.28.29_and_send.28.29_are_deprecated_on_:utf8_handles">sysread(), syswrite(), recv() and send() are deprecated on :utf8 handles</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The sysread (), recv (), syswrite () and send () operators are deprecated on handles that have the :utf8 layer, either explicitly, or implicitly.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="use_UNIVERSAL_'...'_is_now_a_fatal_error"></span><span class="mw-headline" id="use_UNIVERSAL_.27....27_is_now_a_fatal_error">use UNIVERSAL '...' is now a fatal error</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Importing functions from UNIVERSAL has been deprecated since v5.12, and is now a fatal error. “use UNIVERSAL” without any arguments is still allowed.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Omitting_%_and_@_on_hash_and_array_names_is_no_longer_permitted"></span><span class="mw-headline" id="Omitting_.25_and_.40_on_hash_and_array_names_is_no_longer_permitted">Omitting&nbsp;% and @ on hash and array names is no longer permitted</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Old Perl was allowing to omit the @ on array names and the&nbsp;% on hash names in some spots. This has issued a deprecation warning since Perl 5.000, and is no longer permitted.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="defined(@array)_and_defined(%hash)_are_now_fatal_errors"></span><span class="mw-headline" id="defined.28.40array.29_and_defined.28.25hash.29_are_now_fatal_errors">defined(@array) and defined(%hash) are now fatal errors</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">These have been deprecated since v5.6.1 and have raised deprecation warnings since v5.16. Usage of these constructs are fatal now.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Using_a_hash_or_an_array_as_a_reference_are_now_fatal_errors">Using a hash or an array as a reference are now fatal errors</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Using a hash or an array as a reference are now fatal errors. For example, %foo-&gt;{"bar"} now causes a fatal compilation error.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Changes_to_the_*_prototype"></span><span class="mw-headline" id="Changes_to_the_.2A_prototype">Changes to the * prototype</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The * character in a subroutine's prototype used to allow bare words to take precedence over most, but not all, subroutine names. Now it has been changed, so subroutines always take precedence over bare words, which brings it into conformity with similarly prototyped built-in functions.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Character_matching_routines_in_POSIX">Character matching routines in POSIX</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Use of any of these functions in the POSIX module is now deprecated: isalnum , isalpha , iscntrl , isdigit , isgraph , islower , isprint , ispunct , isspace , isupper , and isxdigit . The functions are buggy and don't work on UTF-8 encoded strings.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="The_${^ENCODING}_facility_has_been_removed"></span><span class="mw-headline" id="The_.24.7B.5EENCODING.7D_facility_has_been_removed">The ${^ENCODING} facility has been removed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The special behavior associated with assigning a value to this variable has been removed. Consequently, the encoding pragma's default mode is no longer supported. If you still need to write your source code in encoding other than UTF-8, use a source filter such as Filter::Encoding on CPAN or encoding's Filter option.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Literal_control_character_variable_names_are_no_longer_permissible">Literal control character variable names are no longer permissible</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">A variable name may no longer contain a literal control character under any circumstances. These previously were allowed in single-character names on ASCII platforms, but have been deprecated there since Perl 5.20. This affects things like $\cT, where \cT is a literal control (such as a NAK or NEGATIVE ACKNOWLEDGE character) in the source code.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Regular_expression_compilation_errors">Regular expression compilation errors</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Some regular expression patterns that had runtime errors now do not compile at all. Almost all Unicode properties using the \p{} and \P{} regular expression pattern constructs are now checked for validity at pattern compilation time, and invalid ones will cause the program to not compile. In earlier releases, this check was often deferred until run time. Whenever an error check is moved from run- to compile time, erroneous code is caught 100% of the time, whereas before it would only get caught when the offending portion actually gets executed, which for unreachable code might be never.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Nested_declarations_are_now_disallowed_2">Nested declarations are now disallowed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Keyword “my”, “our”, or “state” declaration is no longer allowed inside of another “my”, “our”, or “state” declaration.</p><p style="font-size: 18px; margin: 0px 0px 12px;">For example, these are now fatal:</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;"> <code style="font-size: 16px; font-family: MetricHPE_Medium; background-color: rgb(241, 242, 243); color: rgb(51, 51, 51) !important; padding: 2px 5px !important;"> my ($x, my($y));
  our (my $x);</code>
</pre><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="The_/\C/_character_class_has_been_removed"></span><span class="mw-headline" id="The_.2F.5CC.2F_character_class_has_been_removed">The /\C/ character class has been removed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">This regular expression character class was deprecated in v5.20.0 and has produced a deprecation warning since v5.22.0. It is now a compile-time error. If you need to examine the individual bytes that make up a UTF8-encoded character, then use utf8::encode() on the string (or a copy) first.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="chdir()_no_longer_chdirs_home"></span><span class="mw-headline" id="chdir.28.29_no_longer_chdirs_home">chdir(<i>) no longer chdirs home</i></span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Using chdir(<i>) or chdir(undef) to chdir home has been deprecated since perl v5.8, and will now fail. Use chdir() instead.</i></p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="ASCII_characters_in_variable_names_must_now_be_all_visible">ASCII characters in variable names must now be all visible</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">It was legal until now on ASCII platforms for variable names to contain non-graphical ASCII control characters (ordinals 0 through 31, and 127, which are the C0 controls and DELETE ). This usage has been deprecated since v5.20, and as of now causes a syntax error. The variables these names referred to are special, reserved by Perl for whatever use it may choose, now, or in the future. Each such variable has an alternative way of spelling it. Instead of the single non-graphic control character, a two character sequence beginning with a caret is used, like $^] and ${^GLOBAL_PHASE} It remains legal, though unwise and deprecated (raising a deprecation warning), to use certain non-graphic non-ASCII characters in variables names when not under use utf8 . No code should do this, as all such variables are reserved by Perl, and Perl doesn't currently define any of them (but could at any time, without notice).</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Only_blanks_and_tabs_are_now_allowed_within_[...]_within_(?[...])"></span><span class="mw-headline" id="Only_blanks_and_tabs_are_now_allowed_within_.5B....5D_within_.28.3F.5B....5D.29">Only blanks and tabs are now allowed within [...] within (?[...])</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The experimental Extended Bracketed Character Classes can contain regular bracketed character classes within them. These differ from regular ones in that white space is generally ignored, unless escaped by preceding it with a backslash. The white space that is ignored is now limited to just tab \t and SPACE characters. Previously, it was any white space.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Doing_bitwise_operations_on_strings_containing_code_points_above_0xFF_is_deprecated">Doing bitwise operations on strings containing code points above 0xFF is deprecated</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The string bitwise operators treat their operands as strings of bytes, and values beyond 0xFF are nonsensical in this context. To operate on encoded bytes, first encode the strings. To operate on code points' numeric values, use split and map order. In the future, this warning will be replaced by an exception.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="&amp;_and_\&amp;_prototypes_accept_only_subs"></span><span class="mw-headline" id=".26_and_.5C.26_prototypes_accept_only_subs">&amp; and \&amp; prototypes accept only subs</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The &amp; prototype character now accepts only anonymous subs (sub {...} ), things beginning with \&amp; , or an explicit undef. Formerly it erroneously also allowed references to arrays, hashes, and lists. In addition, the \&amp; prototype was allowing subroutine calls, whereas now it only allows subroutines: &amp;foo is still permitted as an argument, while &amp;foo() and foo() no longer are.</p><p style="font-size: 18px; margin: 0px 0px 12px;"><br></p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="use_encoding_is_now_lexical">use encoding is now lexical</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The encoding pragma's effect is now limited to lexical scope. This pragma is deprecated, but in the meantime, it could adversely affect unrelated modules that are included in the same program; this change fixes that.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="List_slices_returning_empty_lists">List slices returning empty lists</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">List slices now return an empty list only if the original list was empty (or if there are no indices). Formerly, a list slice would return an empty list if all indices fell outside the original list; now it returns a list of undef values in that case.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Splitting_the_tokens_(?_and_(*_in_regular_expressions_is_now_a_fatal_compilation_error"></span><span class="mw-headline" id="Splitting_the_tokens_.28.3F_and_.28.2A_in_regular_expressions_is_now_a_fatal_compilation_error">Splitting the tokens (? and (* in regular expressions is now a fatal compilation error</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">These had been deprecated since v5.18.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="(?[...])_operators_now_follow_standard_Perl_precedence"></span><span class="mw-headline" id=".28.3F.5B....5D.29_operators_now_follow_standard_Perl_precedence">(?[...]) operators now follow standard Perl precedence</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">This experimental feature allows set operations in regular expression patterns. Prior to this, the intersection operator had the same precedence as the other binary operators. Now it has higher precedence. This could lead to different outcomes than existing code expects (though the documentation has always noted that this change might happen, recommending fully parenthesizing the expressions)</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Omitting_%_and_@_on_hash_and_array_names_is_no_longer_permitted_2"></span><span class="mw-headline" id="Omitting_.25_and_.40_on_hash_and_array_names_is_no_longer_permitted_2">Omitting&nbsp;% and @ on hash and array names is no longer permitted</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Old Perl was allowing to omit the @ on array names and the&nbsp;% on hash names in some spots. This has issued a deprecation warning since Perl 5.000, and is no longer permitted.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Support_for_?PATTERN?_without_explicit_operator_has_been_removed"></span><span class="mw-headline" id="Support_for_.3FPATTERN.3F_without_explicit_operator_has_been_removed">Support for ?PATTERN? without explicit operator has been removed</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The m?PATTERN? construct, which allows matching a regex only once, previously had an alternative form that was written directly with a question mark delimiter, omitting the explicit m operator. This usage has produced a deprecation warning since 5.14.0. It is now a syntax error, so that the question mark can be available for use in new operators.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="defined(@array)_and_defined(%hash)_are_now_fatal_errors_2"></span><span class="mw-headline" id="defined.28.40array.29_and_defined.28.25hash.29_are_now_fatal_errors_2">defined(@array) and defined(%hash) are now fatal errors</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">These have been deprecated since v5.6.1 and have raised deprecation warnings since v5.16. Usage of these constructs are fatal now.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Using_a_hash_or_an_array_as_a_reference_are_now_fatal_errors_2">Using a hash or an array as a reference are now fatal errors</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Using a hash or an array as a reference are now fatal errors. For example, %foo-&gt;{"bar"} now causes a fatal compilation error.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Inlining_of_sub_()_{_$var_}_with_observable_side-effects"></span><span class="mw-headline" id="Inlining_of_sub_.28.29_.7B_.24var_.7D_with_observable_side-effects">Inlining of sub () { $var } with observable side-effects</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">In many cases Perl makes sub () { $var } into an inlinable constant subroutine, capturing the value of $var at the time the sub expression is evaluated. This can break the closure behaviour in those cases where $var is subsequently modified, since the subroutine won't return the changed value. ( Note that this all only applies to anonymous subroutines with an empty prototype sub(). ) This usage is now deprecated in those cases where the variable could be modified elsewhere. Perl detects those cases and emits a deprecation warning. Such code will likely change in the future and stop producing a constant.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Use_of_multiple_/x_regexp_modifiers"></span><span class="mw-headline" id="Use_of_multiple_.2Fx_regexp_modifiers">Use of multiple /x regexp modifiers</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">It is now deprecated to say something like any of the following:</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;">   qr/foo/xx;
   /(?xax:foo)/;
   use re qw(/amxx);
</pre><p style="font-size: 18px; margin: 0px 0px 12px;">That is, now x should only occur once in any string of contiguous regular expression pattern modifiers. We do not believe there are any occurrences of this in all CPAN. This is in preparation for a future Perl release having /xx permit white-space for readability in bracketed character classes (those enclosed in square brackets: [...] ).</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Using_a_NO-BREAK_space_in_a_character_alias_for_\N{...}_is_now_deprecated"></span><span class="mw-headline" id="Using_a_NO-BREAK_space_in_a_character_alias_for_.5CN.7B....7D_is_now_deprecated">Using a NO-BREAK space in a character alias for \N{...} is now deprecated</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">This non-graphic character is essentially indistinguishable from a regular space, and so should not be allowed. See CUSTOM ALIASES in char names.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Quote-like_escape_changes">Quote-like escape changes</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The character after \c in a double-quoted string ("..." or qq(...)) or regular expression must now be a printable character and may not be {. A literal { after \B or \b is now fatal. These were deprecated in Perl v5.14.0.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="Data::Dumper's_output_may_change"></span><span class="mw-headline" id="Data::Dumper.27s_output_may_change">Data::Dumper's output may change</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Depending on the data structures dumped and the settings set for Data::Dumper, the dumped output may have changed from previous versions. If you have tests that depend on the exact output of Data::Dumper, they may fail. To avoid this problem in your code, test against the data structure from evaluating the dumped structure, instead of the dump itself.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Locale_decimal_point_character_no_longer_leaks_outside_of_use_locale_scope">Locale decimal point character no longer leaks outside of use locale scope</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The current locale that the program is running under is not supposed to be visible to Perl code except within the scope of a use locale . However, until now under certain circumstances, the character used for a decimal point (often a comma) leaked outside the scope. If your code is affected by this change, simply add a use locale .</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="References_to_non-integers_and_non-positive_integers_in_$/"></span><span class="mw-headline" id="References_to_non-integers_and_non-positive_integers_in_.24.2F">References to non-integers and non-positive integers in $/</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Setting $/ to a reference to zero or a reference to a negative integer is now deprecated and will behave exactly as though it was set to undef. Setting $/ to a reference to a non-integer is now forbidden and will throw an error. Perl has never documented what would happen in this context and while it used to behave the same as setting $/ to the address of the references in future it may behave differently, so we have forbidden this usage.</p><p style="font-size: 18px; margin: 0px 0px 12px;"><br></p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Interpreter-based_threads_are_now_discouraged">Interpreter-based threads are now discouraged</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">The "interpreter-based threads" provided by Perl are not the fast, lightweight system for multitasking that one might expect or hope for. Threads are implemented in a way that make them easy to misuse. Few people know how to use them correctly or will be able to provide help. The use of interpreter-based threads in perl is officially discouraged.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Explicit_rules_for_variable_names_and_identifiers">Explicit rules for variable names and identifiers</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Due to an oversight, single character variable names in v5.16 were completely unrestricted. This opened the door to several kinds of insanity. As of v5.18, these now follow the rules of other identifiers, in addition to accepting characters that match the \p{POSIX_Punct} property. There is no longer any difference in the parsing of identifiers specified by using braces versus without braces. For instance, perl used to allow ${foo:bar} (with a single colon) but not $foo:bar . Now that both are handled by a single code path, they are both treated the same way: both are forbidden. Note that this change is about the range of permissible literal identifiers, not other expressions.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="given_now_aliases_the_global_$"></span><span class="mw-headline" id="given_now_aliases_the_global_.24">given now aliases the global $_</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Instead of assigning to an implicit lexical $_, given now makes the global $_ an alias for its argument, just like foreach . However, it still uses lexical $_ if there is lexical $_ in scope (again, just like foreach)</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="The_smartmatch_family_of_features_are_now_experimental">The smartmatch family of features are now experimental</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Smart match, added in v5.10.0 and significantly revised in v5.10.1, has been a regular point of complaint. Although there are several ways in which it is useful, it has also proven problematic and confusing for both users and implementors of Perl. There have been several proposals on how to best address the problem. Smartmatch is almost certainly either going to change or go away in the future. Relying on its current behaviour is not recommended. Warnings will now be issued when the parser sees ~~ , given , or when . To disable these warnings, you can add this line to the appropriate scope: no if $] &gt;= 5.018, warnings =&gt; "experimental::smartmatch";</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="readline()_with_$/_=_\N_now_reads_N_characters,_not_N_bytes"></span><span class="mw-headline" id="readline.28.29_with_.24.2F_.3D_.5CN_now_reads_N_characters.2C_not_N_bytes">readline() with $/ = \N now reads N characters, not N bytes</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">Previously, when reading from a stream with I/O layers such as encoding , the readline() function, otherwise known as the &lt;&gt; operator, would read N bytes from the top-most layer. Now, N characters are read instead. There is no change in behaviour when reading from streams with no extra layers, since bytes map exactly to characters.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Overridden_glob_is_now_passed_one_argument">Overridden glob is now passed one argument</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">glob overrides used to be passed a magical undocumented second argument that identified the caller.</p><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span class="mw-headline" id="Alphanumeric_operators_must_now_be_separated_from_the_closing_delimiter_of_regular_expressions">Alphanumeric operators must now be separated from the closing delimiter of regular expressions</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">You may no longer write something like:</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;">m/a/and 1
</pre><p style="font-size: 18px; margin: 0px 0px 12px;">Instead you must write</p><pre style="padding: 1em; background-color: rgb(248, 249, 250); border-width: 1px; border-style: solid; border-color: rgb(234, 236, 240); margin-top: 4px; margin-bottom: 4px; font-family: Consolas, &quot;Courier New&quot;; line-height: 1.25em; overflow: auto; font-size: 14px !important;">m/a/ and 1
</pre><h3 style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; margin-top: 8px; margin-bottom: 6px; text-transform: none; border-bottom: none;"><span id="qw(...)_can_no_longer_be_used_as_parentheses"></span><span class="mw-headline" id="qw.28....29_can_no_longer_be_used_as_parentheses">qw(...) can no longer be used as parentheses</span></h3><p style="font-size: 18px; margin: 0px 0px 12px;">qw lists used to fool the parser into thinking they were always surrounded by parentheses. This permitted some surprising constructions such as foreach $x qw(a b c) {...} , which should really be written foreach $x (qw(a b c)) {...} . These would sometimes get the lexer into the wrong state, so they didn't fully work, and the similar foreach qw(a b c) {...} that one might expect to be permitted never worked at all. This side effect of qw has now been abolished. It has been deprecated since Perl v5.13.11. It is now necessary to use real parentheses everywhere that the grammar calls for them.</p></span></div>