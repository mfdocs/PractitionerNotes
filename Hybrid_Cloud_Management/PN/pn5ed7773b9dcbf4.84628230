<html><h2>Scope</h2>

<p id="HCM2019.02BackupandRestore-Scope">This document describes the steps followed to back up and restore HCM 2019.02. The scope of this document is limited to HCM 2019.02 and should not&nbsp;be used for other versions without consulting Micro Focus.</p>

<h2>Back up process of HCM</h2>

<ul>
	<li>Back up NFS folders &nbsp;(Persistent Volumes)</li>
	<li>Back up the embedded PostgreSQL databases (suite-DB and default-DB)&nbsp;</li>
	<li>Back up external Postgres/Oracle/MSSQL database</li>
	<li>Back up Vertica database</li>
	<li>Stop and repeat the above process if offline backup is required</li>
</ul>

<h2>Restore process of HCM</h2>

<ol>
	<li>Stop HCM Namespace</li>
	<li>Restore NFS folders and permission</li>
	<li>Restore embedded database and Postgres</li>
	<li>Restore external Postgres/Oracle /MSSQL database</li>
	<li>Restore Vertica database</li>
	<li>Start HCM Namespace</li>
</ol>

<p><strong>Note</strong>: Restore process should be done sequentially.</p>

<h2>Disclaimers</h2>

<ul>
	<li>HCM does not recommend point in time &nbsp;backup/restore because of transactional data.</li>
	<li>The subscriptions and its data created after the backup will have to be managed manually as the data will be different after restore.</li>
	<li>It is always recommended to use regular online backup for database and NFS.</li>
	<li>It is always recommended to use external database and NFS for production.</li>
	<li>There is no sequence to be followed for HCM backup process, but restore.should be done in the sequence specified under restore process.</li>
</ul>

<p></p>

<h2>How to Backup HCM?</h2>

<p>It is recommended to back up HCM data at frequent intervals to make sure data is not lost during a catastrophe. &nbsp;Detailed instructions to back up HCM is provided below.<br>
<br>
<strong>Note</strong>: &nbsp;The backup steps are independent and can be performed simultaneously in any order.</p>

<h2>Backup Persistent Volumes</h2>

<p>HCM requires the following persistent volume locations to be backed up.&nbsp;<br>
&nbsp;</p>

<table border="1" cellpadding="1" cellspacing="1" style="width: 500px;">
	<tbody>
		<tr>
			<td><strong>Volume name</strong></td>
			<td><strong>&nbsp;Default mount point</strong></td>
		</tr>
		<tr>
			<td>&lt;itom-vol-claim&gt;</td>
			<td>/var/vols/itom/core</td>
		</tr>
		<tr>
			<td>&lt;hcm-vol-claim&gt;</td>
			<td>&nbsp;/var/vols/itom/hcm</td>
		</tr>
		<tr>
			<td>&lt;logs-volume&gt;</td>
			<td>/var/vols/itom/logs</td>
		</tr>
		<tr>
			<td>&lt;db-single-vol&gt;</td>
			<td>/var/vols/itom/postgres</td>
		</tr>
		<tr>
			<td>&lt;db-backup-vol&gt;</td>
			<td>&nbsp;/var/vols/itom/postgres-backup</td>
		</tr>
		<tr>
			<td>&lt;db-ha-volume&gt;</td>
			<td>&nbsp;/var/vols/itom/postgres1</td>
		</tr>
	</tbody>
</table>

<p><br>
Suite and default postgres database volumes (rows 4, 5, and 6 in the above table) should be backed up only after next the step <strong>Backup Embedded PostgreSQL databases&nbsp;(suite-db and default-db)&nbsp;</strong>explained below.<br>
<br>
Backup procedure for persistent volumes depends on type of persistent volumes. &nbsp;For persistent volumes hosted on local file system or remote NFS server, recommended approach is to tar the files and save it on backup device.&nbsp;<br>
<br>
<strong>Note</strong>: Ensure the ownership and permission for files and directories are preserved during backup and restore activity.<br>
<br>
Example commands:&nbsp;<br>
<br>
<code>cd /var/vols/itom/<br>
tar &nbsp;-czvf &nbsp; /path/to/backup-directory/backup-core.tar.gz &nbsp; core<br>
tar &nbsp;-czvf &nbsp; /path/to/backup-directory/backup-hcm.tar.gz &nbsp; hcm&nbsp;<br>
tar &nbsp;-czvf &nbsp;/path/to/backup-directory/backup-logs.tar.gz &nbsp; logs</code><br>
*/path/to/backup-directory should be based on date and timestamp</p>

<h2>Backup Embedded PostgreSQL databases (suite-db and default-db)&nbsp;</h2>

<p>Internal database backup can be performed either manual steps or automatic. Recommended way of back up is automatic.&nbsp;<br>
<br>
Backup embedded PostgreSQL databases manually&nbsp;<br>
If embedded PostgreSQL database is used to install CDF, we need to backup the embedded databases.<br>
<br>
There are two embedded PostgreSQL databases:<br>
<br>
suite-db &nbsp; &nbsp; // &nbsp;used only by CDF apiserver.<br>
default-db &nbsp; // used by CDF IdM and may also be used by the suite related components.<br>
Use database backup tool to back up the suite-db and default-db database. The tool is located under ${K8S_HOME}/tools/postgres-backup directory, and the logs are available at location /tmp/postgres_backup.log.<br>
<br>
NOTE: Run the following command to make sure the backup service is running:&nbsp;<br>
<br>
1<br>
kubectl get pods --all-namespaces | grep backup.<br>
&nbsp;<br>
<br>
Perform the following steps on any one of the master nodes to back up the suite-db database and default-db database.<br>
<br>
Note: Follow the same steps below to back up the suite-db database solely.<br>
<br>
Navigate to the database backup directory with the following command:<br>
&nbsp;<br>
<br>
1<br>
cd ${K8S_HOME}/tools/postgres-backup<br>
Get the authorization token with the following command. And copy the token. You will be asked to enter this token later.<br>
1<br>
./getRestoreToken<br>
&nbsp;<br>
<br>
2. Run the following command to back up the database. You will be asked to enter the authorization token.<br>
1<br>
./db_admin.sh backup<br>
&nbsp;<br>
<br>
Your terminal resembles the following:<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>
<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. Run the following command to check the backup status.<br>
<br>
&nbsp;<br>
<br>
1<br>
./db_admin.sh status -l {backup location} -t backup<br>
&nbsp;<br>
<br>
<br>
For example: ./db_admin.sh status -l 2019-01-15T05:38:43.686Z -t backup<br>
You will be asked to input the authorization. Your terminal resembles the following:<br>
<br>
<br>
<br>
4. Run the following command to get the details of db-back-vol persistent volume.<br>
<br>
<br>
&nbsp;<br>
<br>
1<br>
kubectl get pv -n core | grep db-backup-vol<br>
&nbsp;<br>
<br>
<br>
Then your terminal resembles the following:<br>
<br>
<br>
<br>
<br>
<br>
5. Run the following commands to get the NFS server and NFS path details of the PV db-back-vol. Replace the &lt;db-backup-vol&gt; with the value you get from the previous step. For example, "demo-XXXXX-db-backup-vol".<br>
For NFS server: kubectl get pv &lt;db-backup-vol&gt; -n core -o json | $K8S_HOME/bin/jq -r .spec.nfs.server<br>
For the NFS path: kubectl get pv &lt;db-backup-vol&gt; -n core -o json | $K8S_HOME/bin/jq -r .spec.nfs.path<br>
Your terminal resembles the following:<br>
<br>
<br>
<br>
6. In the example, the backup path is /nfs/db-backup-vol. The server is myhost.mycomany.com.<br>
<br>
7. Log into the NFS server.<br>
<br>
8. Run the following commands to show the log folder. Replace the &lt; NFS backup directory&gt; with the backup path you get from the previous step. For example: /nfs/db-backup-vol.<br>
<br>
&nbsp; &nbsp; &nbsp; &nbsp;<br>
<br>
1<br>
2<br>
3<br>
4<br>
5<br>
cd &lt;NFS backup directory&gt;<br>
&nbsp;<br>
cd pg-data-backup<br>
&nbsp;<br>
ll<br>
&nbsp;<br>
<br>
&nbsp;Your terminal resembles the following:<br>
<br>
<br>
<br>
Backup embedded PostgreSQL databases automatically<br>
You can run the following command to back up the embedded suite-db and default-db PostgreSQL databases automatically.<br>
&nbsp; &nbsp;<br>
<br>
RESTORETOKEN=$(${K8S_HOME}/tools/postgres-backup/getRestoreToken|awk '{print $3}')<br>
&nbsp; &nbsp; echo "${RESTORETOKEN}" | ${K8S_HOME}/tools/postgres-backup/db_admin.sh backup<br>
<br>
Your terminal resembles the following:<br>
<br>
<br>
<br>
&nbsp;<br>
<br>
Backup Persistent Volumes for suite-db and embedded-db.<br>
Database backup files will reside in persistence volumes, that need to be copied to backup directory. You need to go to persistent volumes hosted on local file system or login to remote NFS server and tar the files.<br>
<br>
&nbsp;<br>
<br>
Example:&nbsp;<br>
cd /var/vols/itom/<br>
tar -czvf /path/to/backup-directory/backup-postgres.tar.gz postgres<br>
tar -czvf &nbsp;/path/to/backup-directory/backup-postgres-backup.tar.gz postgres-backup<br>
tar &nbsp;-czvf &nbsp;/path/to/backup-directory/backup-postgres1.tar.gz &nbsp;postgres1<br>
<br>
*/path/to/backup-directory should be based on date and timestamp<br>
Backup External PostgreSQL database<br>
It is recommended to follow vendor documentation for backup and restore.<br>
<br>
For postgres database, perform the following steps to backup all databases: ara, autopass, csa, idm, oo, oodesigner, ucmdb<br>
<br>
Login to postgres server.&nbsp;<br>
Execute below commands:<br>
su - postgres<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pg_dump &lt;dbname&gt; &gt; &lt;path/to/backup-directory&gt;/dbname.bak<br>
Note: replace the &lt;dbname&gt; with the required DB name<br>
Back up Vertica database<br>
Please refer to Vertica documentation for detailed instructions on backup and restore.<br>
<br>
https://docs.microfocus.com/itom/Hybrid_Cloud_Management:2019.02/BackupHCM#Back_up_Vertica_database<br>
<br>
How to do offline Backup?<br>
<br>
The steps to take offline backup is to shutdown the HCM namespace (./cdfctl.sh runlevel set -l DOWN -n &lt;hcm-namespace&gt;) &nbsp;before starting the backup process.<br>
<br>
&nbsp;<br>
<br>
Restore HCM<br>
The following steps needs to be performed sequentially to restore HCM. HCM namespace should be shut down before we start restoring.<br>
<br>
Shut Down HCM<br>
Log in to any of the Kubernetes master nodes and run the following commands:<br>
<br>
cd /opt/kubernetes/scripts<br>
<br>
./cdfctl.sh runlevel set -l DOWN -n &lt;hcm-namespace&gt;<br>
hcm-namespace can be found by running the command &nbsp;kubectl get pods --all-namespaces | grep hcm<br>
<br>
Restore Persistent Volume<br>
Restore procedure for persistent volumes depends on type of persistent volumes. &nbsp;For persistent volumes hosted on local file system or remote NFS server, approach is to untar the files and restore<br>
<br>
Restore data from backup device to Persistent volume following the below steps -<br>
<br>
Restore the NFS data from back up location to persistent volume path.<br>
Example:<br>
tar -xzvf /path/to/backup-directory/backup-core.tar.gz /var/vols/itom/<br>
tar -xzvf /path/to/backup-directory/backup-hcm.tar.gz /var/vols/itom/<br>
tar -xzvf /path/to/backup-directory/backup-logs.tar.gz /var/vols/itom/<br>
tar -xzvf /path/to/backup-directory/backup-postgres.tar.gz /var/vols/itom/<br>
tar -xzvf /path/to/backup-directory/backup-postgres-backup.tar.gz /var/vols/itom/<br>
tar -xzvf /path/to/backup-directory/backup-postgres1.tar.gz /var/vols/itom/<br>
<br>
<br>
Restore embedded database and Postgres<br>
Please refer to HCM Backup and Restore doc section https://docs.microfocus.com/itom/Hybrid_Cloud_Management:2019.02/RestoreSuiteDB<br>
<br>
Restore external database<br>
Please refer to vendor documentation for database restore procedure.<br>
<br>
If you have used external database (PostgreSQL or Oracle) to install HCM, you need to restore the external database. Refer to the related database manual for the detailed restore steps.<br>
<br>
For example , to restore external postgres follow below steps,<br>
<br>
Login to external postgres database shell as postgres user. (su - postgres)<br>
<br>
Execute the following commands to drop and recreate hcmadmin databases. (ara, autopass, csa, idm, oo, oodesigner, ucmdb)<br>
drop &lt;dbname&gt;;<br>
CREATE DATABASE &lt;dbname&gt; WITH OWNER = hcmadmin &nbsp; ENCODING = 'UTF8' &nbsp;TABLESPACE = pg_default LC_COLLATE = 'en_IN.UTF-8' &nbsp; LC_CTYPE = 'en_IN.UTF-8' &nbsp;CONNECTION LIMIT = -1;<br>
Go to &lt;path/to/backup-directory&gt; and execute below command to restore the database<br>
psql &lt;dbname&gt; &nbsp;&lt; dbname.bak;<br>
Restore Vertica database<br>
Refer HCM B &amp; R documentation for vertica backup and restore steps https://docs.microfocus.com/itom/Hybrid_Cloud_Management:2019.02/VerticaDatabaseBackupRestore.<br>
<br>
Start HCM after Restore<br>
Log in to any of the Kubernetes master nodes and run the following commands:<br>
<br>
cd /opt/kubernetes/scripts<br>
<br>
./cdfctl.sh runlevel set -l UP -n &lt;hcm-namespace&gt;<br>
&nbsp;</p>
</html>