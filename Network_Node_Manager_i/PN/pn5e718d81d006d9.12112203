<html><p>Business Value Dashboards present your data in real time in a very flexible layout for visualizing on any browser capable device.&nbsp; Within Micro Focus Network Operations Management (NOM) suite, there are several out-of-the-box data sources, such as incidents from Network Node Manager (NNMi) and device configuration and vulnerability from Network Automation (NA).&nbsp; These data sources can be streamed to BVD when integration is enabled.&nbsp;&nbsp; However, the current NOM Suite by default does not include an out-of-the-box performance metrics data source for BVD.&nbsp; This article will demonstrate how to build a new data channel solution to achieve this requirement with a concrete use case.</p>

<p><strong>Use Case Description</strong>:&nbsp; Due to the COVID-19 outbreak, Company A is requesting all its employees to work from home.&nbsp; The company is responding to an urgent request from top management and needs to conduct a network stress test.&nbsp; This is done to make sure its network infrastructure is capable of providing sufficient bandwidth and to identify bottlenecks rapidly.&nbsp; Also executives request insight into network status and performance. They want to use NOM to capture the required metrics to validate the test, and stream the results to an executive business dashboard such as the one shown below:</p>

<p><img alt="" src="/mediawiki/images/pn_images/pn_image_5e8fb3c8048609.77267466.jpeg" style="height:281px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"></p>

<p><strong>Use Case Implementation:</strong> The use case&nbsp;was implemented in the following three steps:</p>

<ol>
	<li>Determine the metrics to be collected for the test,</li>
	<li>Configure NNMi to collect these new metrics,</li>
	<li>Use Micro Focus provided scripts to retrieve the collected metrics from NNMi NPS Server and stream them to a BVD dashboard.<br>
	(The scripts are included in the Appendix)</li>
</ol>

<p>Note:&nbsp; NNM iSPI Performance for Metrics and Network Performance Server (NPS) is required for this solution as all the metrics&nbsp;to be collected are performance data.&nbsp;</p>

<p>Details for each steps are described below:</p>

<p><strong>Step 1 - Determine the metrics to be collected </strong><br>
After some investigation of the devices, it was determined that the following metrics need to be collected to understand the devices’ current “stress level”:</p>

<ol>
	<li>The number of concurrent session on a company’s VPN Appliance. This number indicates how many employees are concurrently connected to the company’s VPN;</li>
	<li>CPU utilization of the router behind the VPN Appliance;</li>
	<li>Interface utilization of the router behind the VPN Appliance.</li>
</ol>

<p>The number of concurrent session is not part of NNMi’s standard polling metrics.&nbsp; After reviewing the SNMP MIB on the VPN Appliance (Cisco Adaptive Security Appliance Version 9.12(2)5), the MIB variable cfwConnectionStatValue.40.6 (OID:1.3.6.1.4.1.9.9.147.1.2.2.2.1.3.40.6) was found to contain the number of concurrent session needed.<br>
For devices other than this particular Cisco Security Appliance, proceed in a similar way: examine the device’s MIB, identify the MIB variable(s) that describe current device load or capacity, and take note of the corresponding OID(s).<br>
CPU and Interface utilizations are part of NNMi standard performance polling collection and don’t need to be configured through custom polling.<br>
<br>
<strong>Step 2 - Configure NNMi to collect the metrics</strong>&nbsp;<br>
The MIB variable identified in Step 1, cfwConnectionStatValue, is not part of NNMi’s standard (out-of-the-box) SNMP polling. &nbsp;NNMi provides a feature called “Custom Poller” which allows users to collect non-standard MIB variables.<br>
Create a custom poller “ConcurrentSessionPoller” as shown below:<br>
<br>
<img alt="https://docs.microfocus.com/mediawiki/images/pn_images/pn_image_5e7153f0193995.92249861.png" src="https://docs.microfocus.com/mediawiki/images/pn_images/pn_image_5e7153f0193995.92249861.png" style="height:358px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"><br>
<br>
(The details of creating a custom poller are not covered in this article.&nbsp; Instructions can be found <a href="https://docs.microfocus.com/NNMi/10.30/Content/Administer/nmAdminHelp/nmAdmConfCP0200CreateCPCol.htm">here</a>)<br>
This custom poller will be polling the number of concurrent session from the VPN Appliance every 5 minutes and store the data in the NPS server.<br>
To limit the impact of polling for CPU and Interface utilizations on all devices, create a node group “COVID-19” containing only those devices of interest for this use case: the VPN Appliances&nbsp;and the routers:<br>
<br>
<img alt="https://docs.microfocus.com/mediawiki/images/pn_images/pn_image_5e7153f042cf90.56002371.png" src="https://docs.microfocus.com/mediawiki/images/pn_images/pn_image_5e7153f042cf90.56002371.png" style="height:415px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"></p>

<p>Then enable the performance polling on the node group:<br>
<br>
<img alt="https://docs.microfocus.com/mediawiki/images/pn_images/pn_image_5e7155531df910.36331397.png" src="https://docs.microfocus.com/mediawiki/images/pn_images/pn_image_5e7155531df910.36331397.png" style="height:380px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"><br>
<br>
<strong>Step 3 - Use Micro Focus provided scripts to retrieve the collected metrics from NNMi NPS and stream them to BVD</strong><br>
As the title indicated, this article is mainly about streaming performance metrics from NNMi to BVD.&nbsp; Therefore this is the most important step.&nbsp;<br>
Micro Focus provided 2 scripts, <code>sqlgenerator.ovpl</code> and <code>streambvd.sh</code>, to facilitate the use case implementation.&nbsp; The scripts are attached in the Appendix.&nbsp; With the scripts, customers do not need to write complex SQL queries. By just specifying the extension pack and the metrics of interest, the <code>sqlgenerator.ovpl</code>&nbsp;will generate the appropriate SQL query.</p>

<p>Follow the instructions below to implement your custom solution:</p>

<ol>
	<li>Run the command “<code>about.ovpl</code>” on the NPS server.&nbsp; The command lists all the extension packs installed on the NPS.&nbsp;<br>
	Example:<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e8fb6265f51a9.50007573.png" style="height:156px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"><br>
	&nbsp;</li>
	<li>Choose an extension pack which contains the performance metrics of interest.&nbsp; For example, if you are interested in interface utilization metrics, choose the “Interface_Health” extension pack.<br>
	Run the script:<br>
	<code>sqlgenerator.ovpl –p &lt;extension pack&gt;&nbsp;–a colgen</code><br>
	Example:<br>
	<code>sqlgenerator.ovpl –p Interface_Health –a colgen</code><br>
	The script extracts all the metrics from the extension pack and saves them in a text file <code>&lt;extension pack&gt;</code><code>_dataColumns.config</code>, for example, <code>Interface_Health_dataColumns.config</code>.</li>
	<li>Edit the <code>&lt;extension pack&gt;_dataColumns.config</code>&nbsp;file.&nbsp; Uncomment out the metrics of interest in the file then save the file.&nbsp;&nbsp; For example, if the metrics of interest are “<code>Utilization (avg)</code>”, “<code>Utilization (max)</code>” and “<code>Utilization (min)</code>”, remove the “#” from the beginning of the line, then save the file:<br>
	<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e8fb62692d4d2.85588626.png" style="height:160px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:283px"></li>
	<li>Run the script:<br>
	<code>sqlgenerator.ovpl –p &lt;extension pack&gt; –a sqlgen</code><br>
	Example:<br>
	<code>sqlgenerator.ovpl –p Interface_Health –a sqlgen</code><br>
	In this step, the script will fetch all the metrics of interest specified in previous step, and generate a complex SQL query to retrieve the metrics from NPS server. &nbsp;The query will be saved in a text file with the name convention of <code>&lt;extension pack&gt;_query.sql</code>, for example:<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e8fb626c5d327.23055772.png" style="height:42px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"></li>
	<li>Run the script:<br>
	<code>streamtobvd.sh –s &lt;BVD FQDN&gt; -k &lt;BVD KEY&gt; -f&nbsp;&lt;SQL File&gt;</code><br>
	Where <code>&lt;BVD FQDN&gt;&nbsp;</code>is the FQDN of the BVD server, <code>&lt;BVD KEY&gt;&nbsp;</code>is the BVD server’s API key (obtained from BVD Console), and <code>&lt;SQL File&gt;&nbsp;</code>is the name of the previously generated .sql query file.<br>
	Example:<br>
	<code>streamtobvd.sh –s mybvd.microfocus.com –k fa4b8c37d69445c79695739c53e0ccd5 –f interfacemetrics_query.sql</code><br>
	<br>
	In this step, the script runs SQL query against NPS database, retrieve the metrics of interest, then format the metrics into a JSON message and stream it to the BVD server.&nbsp; A new data channel with these metrics will be available in BVD, as shown below:<br>
	<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e8fb627197337.54864391.png" style="height:159px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"><br>
	<br>
	If your NPS server is running on Windows, use the streamtobvd.ovpl.&nbsp;<br>
	Example:<br>
	<code>streamtobvd.ovpl&nbsp;–s mybvd.microfocus.com –k fa4b8c37d69445c79695739c53e0ccd5 –f interfacemetrics_query.sql</code><br>
	<br>
	Now, each performance metric in the new data channel can easily be associated with a particular widget in dashboard.</li>
</ol>

<p>Finally, we use a complete BVD dashboard example to conclude this article.<br>
<strong>Example – </strong>this example consisted of two BVD dashboards, a top-level executive dashboard and a drill-down dashboard showing more network performance data. &nbsp;The content of each dashboard is described as the following:</p>

<ol>
	<li>The top-level executive dashboard displays the company’s VPN architecture on the left panel.&nbsp;&nbsp;<br>
	The VPN is protected by a few VPN appliance servers (firewall servers) and a number of routers were deployed behind the VPN appliances.&nbsp; The right panel displays the time-series of the number of concurrent session on each VPN appliances.&nbsp;<br>
	The VPN appliance widgets or router widgets on the left panel can be configured to link to a drill-down dashboard.<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e8fb7d26b5785.63299721.jpeg" style="height:281px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px">&nbsp; &nbsp; &nbsp;</li>
	<li>The drill-down dashboard displays network performance metric data, such as interface and CPU utilization on VPN appliances and routers.&nbsp; This dashboard is of more interest to network engineers:<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e8fb8f814cdd5.34663268.jpeg" style="height:285px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"></li>
</ol>

<p>Notes:<br>
a)&nbsp;As a prerequisite, NNMi and NA integration with BVD has to be configured.&nbsp; Instructions can be found&nbsp;<a href="https://docs.microfocus.com/itom/Network_Node_Manager_i:2019.11/NetworkDataBVD">here</a><br>
b)&nbsp;Both MF provided scripts need to run on the NPS server as it executes SQL queries to the NPS database.</p>

<p><strong>Summary</strong><br>
This article described the implementation of a solution to a user case which allow NOM customers to collect special MIB variables and performance metrics and stream the collected metrics to a BVD dashboard. &nbsp;This article also included 2 scripts for customers to facilitate the implementation of the solution.</p>

<p><strong>Appendix</strong><br>
Three scripts, &nbsp;<code>sqlgenerator.ovpl,&nbsp;</code><code>streamtobvd.sh</code>&nbsp;and&nbsp;<code>streamtobvd.ovpl</code>&nbsp;for this solution are included in this section in their entirety.&nbsp;</p>

<p><code>sqlgenerator.ovpl:</code></p>

<pre><code class="language-perl">#!/opt/OV/nonOV/perl/a/bin/perl -I/opt/OV/NNMPerformanceSPI/lib/perllibs/lib
# NNM iSPI Performance
# Purpose:
#	To extract the data columns from a given extension pack and generate sql.
#

use NPS::nps;
use DBI;


loggername("Utility.sqlgenerator");

# Command line validations.
my %OPTS ;
showUsage() unless getopts("a:p:h", \%OPTS);
showUsage() unless (defined $OPTS{p});

sub showUsage {
	my $usage = qq(Usage: sqlgenerator.ovpl [-h] -p &lt;ExtensionPack&gt; -a sqlgen/colgen
	-h                  Display usage
	-p ExtensionPack    Run against tables for named ExtensionPack
	-a colgen/sqlgen
	 NOTE :
	 	-p ExtensionPack Name should be the first argument
	 	colgen - to generate a list of data columns.
	 	sqlgen - to generate the sql, "-a colgen" should be run before "-a sqlgen"
	 	if -a is not provide default action chosen is "colgen"
		Use "PerfSPIProxyDSN" to run the generated sql
);
	l10n_printf("%s", $usage);
	exit 0;
}

#Reference Aggregations : avg, max, min, sum, cnt pctile05, pctile90, pctile95, pctile99
#Collected Aggregations.
#my $aggs_to_find = "avg";
my $aggs_to_find = "avg, min, max,";
my $catalog_table_prefix = "Column_Catalog_";
my $catalog_table_name = $catalog_table_prefix . $EXTENSIONPACK;
my $output_file_name = $EXTENSIONPACK . "_dataColumns" . ".config";
my $star_star = "***";
my $star = "*";
my $hash = "#";
my $col_delimiter = " | ";
my $conn = "DSN=$cfg{PRSPI_DB_DSN}" ;

my $ifname_present = "" ; # ONLY used while sql generation.

# Connect to DB avoiding auto commit to preserve the table locks
my $dbh =
  DBI-&gt;connect("dbi:SQLAnywhere:$conn;CON=sqlgenerator.OVPL PID=$$", "", "", { RaiseError =&gt; 0, AutoCommit =&gt; 0, PrintError =&gt; 1} ) ||
     FATAL("Unable to connect to database: %s", $DBI::errstr);


sub getDataColumns {
	my $aggs_list = "";
	foreach my $aggs (split(/,/,$aggs_to_find)) {
		my $str = "'". trim($aggs) . "'";
		if($aggs_list eq "") {
				$aggs_list = $str;
			} else {
				$aggs_list = $aggs_list . "," . $str;
			}
	}
	if($aggs_list eq "") {
		INFO("Aggregations provided is empty, exiting");
		exit 1;
	}

	my $colSelectionSql = "SELECT MetricName FROM $catalog_table_name WHERE MetricDescrAggType in ($aggs_list) order by MetricName" ;
	my $colNames = $dbh-&gt;selectcol_arrayref($colSelectionSql) || FATAL ("Unable to get the columns names : %s",$DBI::errstr);
	return @$colNames;
}

sub getMetricName {
	my $metric_name_sql = "SELECT distinct MetricBlock FROM $catalog_table_name" ;
	my $metric_name = $dbh-&gt;selectrow_array($metric_name_sql) || FATAL ("Unable to get the metic block name: %s",$DBI::errstr);
	return $metric_name;
}

sub persistToFile {
	my ($metric_name, @colNames) = @_;
	my $cnt = 0;
	if(-e $output_file_name) {
		WARN("The file '%s' exists, all the modifications will be overwritten" , $output_file_name);
	}

	my $file_handle = open_or_die("&gt;$output_file_name") ;
	print $file_handle $star_star . "Data columns generated for the extension Pack :" . $EXTENSIONPACK . "\n";
	print $file_handle $star_star . "ExtensionPack=". $EXTENSIONPACK . "\n";
	print $file_handle $star_star . "MetricName=". $metric_name . "\n";
	print $file_handle $star_star . "IMPORTANT STEPS : ". "\n";
	print $file_handle $star_star . "        1. Remove “#” from the beginning of the line to choose that particular column in the generated SQL.". "\n";
	print $file_handle $star_star . "        2. Run the script 'sqlgenerator.ovpl -p $EXTENSIONPACK -a sqlgen'". "\n\n";
	foreach my $colName (@colNames) {
		++$cnt;
		print $file_handle $hash.$colName."\n";
	}
	close $file_handle ;
	INFO ("Query returned %s records for the extension pack %s" , $cnt, $EXTENSIONPACK);
	if( $cnt &gt; 0) {
		INFO ("IMPORTANT : \n        Open the file '%s' and follow the instructions to generate the query" , $output_file_name);
	} else {
		WARN("Unable to generate the data columns");
		if (-e $output_file_name) {
			unlink($output_file_name)
		}
	}
}

sub readFileAndGenerateColList {
	if(! -e $output_file_name) {
		WARN("Data columns is not generated for this extension pack ");
		exit 1;
	}
	my @selected_columns ;
	my $metric_search_string = "MetricName=";
	my $metric_name = "";
	my $file_handle = open_or_die("&lt;$output_file_name") ;
	my $row_uncommented = 0;
	while (my $row = &lt;$file_handle&gt;) {
	 	chomp $row;
	 	if(($row ne "" ) &amp;&amp; !((index($row, $star_star) == 0) || index($row, $hash) == 0))  {
	 		# This row will be uncommented column name
	 		push (@selected_columns, $row) ;
	 		++$row_uncommented ;
	 	}

	 	if (($metric_name eq "") &amp;&amp; $row =~ m/$metric_search_string/) {
	 		#***MetricName=ComponentMetrics
			my $equal_idx = index($row, "=");
			$metric_name = substr($row, $equal_idx + 1);
	 	}
	}
	if($row_uncommented &lt; 1) {
		WARN("The file '%s' is not modified to pick the column list, modify the file and rerun the command" , $output_file_name);
		exit 1;
	}
	return ($metric_name, @selected_columns);
}

sub buildSelectHeader {
	my ($virtual_table_name) = @_;
	my $header;
	my $group;

	#$virtual_table_name = "f_Virtual_InterfaceMetrics";    # this is to test.
	my $ifname_column_to_check = 'Qualified Interface Name';
	my $colSelectionSql = "SELECT column_name FROM sp_iqcolumn() WHERE table_name ='$virtual_table_name' and column_name = 'Qualified Interface Name'" ;
	$ifname_present = $dbh-&gt;selectrow_array($colSelectionSql);

	$header = "[Minute] [Minute | ], [Node Name] [Node Name | ]";  # The header has | as the delimiter so that its easy for parsing in the script.
	if($ifname_present eq "") {
		$group = "[Minute], [Node Name]";
	} else {
		#$header = "[Minute], [Node Name], replace([Qualified Interface Name], ' ','-') [Qualified Interface Name]";
		#Removing the [Qualified Interface Name] as requested by implementation.
		$group  = "[Minute], [Node Name], [Qualified Interface Name]";
	}
	return ($header, $group);
}

sub buildSelectFooter {
	if($ifname_present ne "") {
		return " , replace([Qualified Interface Name], ' ','-') [Qualified Interface Name | ] ";
	}
}

sub buildIntervalSql {
	my $interval = @_;   # minutes
	my $ret = "";

	if($interval == 5 ) {
		$ret = " where [Minute] &gt; dateadd(second, -300, DATETIME(NOW())) ";
	} elsif ($interval == 10 ) {
		$ret = " where [Minute] &gt; dateadd(second, -600, DATETIME(NOW())) ";
	} elsif ($interval == 60){
		$ret = " where [Minute] &gt; dateadd(second, -3600, DATETIME(NOW())) ";
	} else {
		$ret = " where [Minute] &gt; dateadd(second, -600, DATETIME(NOW())) ";
	}
	return $ret;
}

sub getRange {
	if($ifname_present eq "") {
		return "1, 2 ";
	} else {
		return "1, 2, 3 ";
	}
}

sub formatColumnNameForSelect {
	my ($col_name) = @_;

	my $sum_fn = "sum";
	my $count_fn = "count";
	my $div_oper = "/";
	my $open_param = "(";
	my $close_param = ")";
	my $open_braces = "[";
	my $close_braces = "]";

	##((sum([Column_name]) / count([Column_name]))) [Column_name]

	my $col_name_header = $open_braces . $col_name . $col_delimiter . $close_braces;  # -&gt; [Column_name | ]  --&gt; | used as a delimiter to parse.
	my $temp_col_name = $open_braces . $col_name . $close_braces;  # -&gt; [Column_name]
	my $temp_col_name_sum = $sum_fn. $open_param . $temp_col_name . $close_param ;  # sum ("[Column_name]")
	my $temp_col_name_cnt = $count_fn. $open_param . $temp_col_name . $close_param;  # count ("[Column_name]")
	my $final_col_strut = $open_param . $temp_col_name_sum . $div_oper . $temp_col_name_cnt . $close_param ;  # Build equation (sum ("[Column_name]") / count ("[Column_name]"))
	$final_col_strut =  $final_col_strut . $col_name_header;   #  Added Header (sum ("[Column_name]") / count ("[Column_name]")) [Header]
	return $final_col_strut
}

sub generateSql {
	my ($metric_name, @colNamesLocal) = @_;
	my $virtual_table_name = fVirtualTableName($metric_name);

	my $select = "select ";
	my $comma = ", ";
	my $group_by = " group by ";
	my $order_by = " order by ";
	my $from = " from ";
	my $double_quote = "\"";

	my ($select_header, $group_cols) = buildSelectHeader($virtual_table_name);

	my $columns_for_sel = "";
	foreach my $col_name (@colNamesLocal) {
		my $formatted_col_name = formatColumnNameForSelect($col_name);
		$columns_for_sel = $columns_for_sel . $comma . $formatted_col_name;
	}

	# Add the footer columns if any.
	my $footer_cols = buildSelectFooter();
	$columns_for_sel = $columns_for_sel . $footer_cols;

	# Add the from clause  -- the virtual table
	my $final_sql = $columns_for_sel . $from . $double_quote . $virtual_table_name . $double_quote;

	#Add where clause  -- last 10 minutes
	$final_sql = $final_sql . buildIntervalSql(10);

	# Add order by and group by
	$final_sql = $final_sql . $group_by . $group_cols;
	#$final_sql = $final_sql . $order_by . $select_header . $columns_for_sel ;   # convert to range
	$final_sql = $final_sql . $order_by . getRange() ;   # convert to range

	# Prepend select and select_header
	$final_sql = $select . $select_header . $final_sql;

	#Writing the sql to ouput file.
	my $sql_file_name = lc $metric_name . "_query.sql";
	if (-e $sql_file_name) {
		my $backup_file_name =  $sql_file_name . "." . time;
		print "Renamed the existing SQL file " . $sql_file_name . " to " . $backup_file_name ."\n";
		copy_or_warn("$sql_file_name","$backup_file_name") ;
	}
	my $file_handle = open_or_die("&gt;$sql_file_name") ;
	print $file_handle $final_sql;
	close $file_handle;

	#Instructions
	print "Generated SQL is written to the file " . $sql_file_name . "\n";
}


my $action = $OPTS{a} || "colgen" ;  # default action to generate data columns

if ($action eq "colgen") {
	#Generating the column list
	INFO("Generating data columns for the extension pack %s", $EXTENSIONPACK);
	my @colNamesRet = getDataColumns();
	my $metric_name = getMetricName();
	persistToFile($metric_name, @colNamesRet);
} elsif ($action eq "sqlgen") {
	#For generating the sql
	my ($metric_name, @columns_for_sql) = readFileAndGenerateColList();
	generateSql($metric_name, @columns_for_sql);
} else {
	INFO("Invalid Action");
	showUsage();
}

exit 0;
</code></pre>

<p><br>
<code>streamtobvd.sh:</code></p>

<pre><code class="language-bash">#!/bin/sh
usage(){
  echo "Usage: $0 -s &lt;BVD FQDN&gt; -k &lt;BVDAPIKEY&gt; -f &lt;SQL FILE&gt;"
  exit 1
}
[[ $# -lt 6 ]] &amp;&amp; usage
while [ "$1" != "" ]; do
case $1 in
        -s ) 	shift
                BVDFQDN=$1
                ;;
        -k )    shift
                BVDAPIKEY=$1
                ;;
        -f )    shift
                SQLFILE=$1
                ;;
        * )     usage 
    esac
    shift
done

BVDURL="https://$BVDFQDN/bvd-receiver/api/submit/"
BVDCURLURL="$BVDURL$BVDAPIKEY/dims/NodeName,PerfMetrics"

FLAG=1

while [ 1 ]
do
    dbisql -nogui -c "DSN=PerfSPIProxyDSN" $SQLFILE | grep -v "NULL" | grep -v "Execution time" | grep -v "rows)" | while read line 
    do
      if [ $FLAG -eq 1 ]
      then
        #echo "Process header---- "$line
        FLAG=0 
        IFS='|'
        read -a metrics &lt;&lt;&lt; "$line"
        metriclen=${#metrics[@]}
        for (( k=0; k&lt;$metriclen; k++ ))
        do
          metrics[$k]=`echo -e "${metrics[$k]}" | sed 's/^[ \t]*//;s/[ \t]*$//'`
          #echo ${metrics[$k]}
        done
        IFS=' '
      else 
        line=`echo $line | sed -e '/^\s*$/d' -e '/^-/d'`
        if [ ! -z "$line" ]
        then
          arr=($line)
          len=${#arr[@]}
          NODENAME=${arr[2]}
          JSONMSG='{"NodeName":"'$NODENAME'","PerfMetrics":"My Metrics",'
          for (( c=3; c&lt;$len; c++ ))
          do
            i=$[$c-1]
            name=${metrics[$i]}
            if [ $c -lt $[len-1] ]
            then
              element="\""${name}"\"":"\""${arr[$c]}"\"", 
            else
              element="\""${name}"\"":"\""${arr[$c]}"\""
            fi
            echo $element
            JSONMSG=${JSONMSG}$element
          done
          JSONMSG=${JSONMSG}"}"
          curl -k -X POST -H "Content-Type:application/json" -d "$JSONMSG" $BVDCURLURL 
          echo ""
        fi
      fi
    done
    sleep 300
done
</code></pre>

<p><br>
<code>streamtobvd.ovpl:</code><br>
&nbsp;</p>

<pre><code class="language-perl">#!/opt/OV/nonOV/perl/a/bin/perl -I/opt/OV/NNMPerformanceSPI/lib/perllibs/lib
#use NPS::nps;
use Getopt::Std;
use HTTP::Request ();
use LWP::UserAgent;

my %opts;
my %BVDFQDN;
my %BVDAPIKEY;
my %SQLFILE;


sub usage {
  print "Usage:  -s &lt;BVD FQDN&gt; -k &lt;BVDAPIKEY&gt; -f &lt;SQL FILE&gt; -m https\n";
  exit 1;
}


my $argc = @ARGV;

if ($argc &lt; 6) {
  usage
}

getopts("s:k:f:m:", \%opts);

if ( defined $opts{s}) {
  $BVDFQDN = $opts{s};
}


if ( defined $opts{k}) {
  $BVDAPIKEY = $opts{k};
}

if ( defined $opts{f}) {
  $SQLFILE = $opts{f};
}

my $https = "false" ;  # https yes/no
if (defined $opts{m}) {
    if($opts{m} eq "https") {
      $https = "true";
    } 
}

#my $BVDURL="http://$BVDFQDN/api/submit/";
my $BVDURL;

if($https eq "true") {
    $BVDURL="https://$BVDFQDN/bvd-receiver/api/submit/";
} else {
    $BVDURL="http://$BVDFQDN/bvd-receiver/api/submit/";
}

my $BVDCURLURL="$BVDURL$BVDAPIKEY/dims/NodeName,PerfMetrics";
my $HEADER= ['Content-Type' =&gt; 'application/json; charset=UTF-8'];

my $flag = 1;
print_communication_mode();

sub push_data_to_bvd {
  my ($msg_to_send) = @_ ;
  #print ("Message to send : $msg_to_send\n");
  my $r = new HTTP::Request POST =&gt; $BVDCURLURL;
  $r-&gt;content_type('application/json');
  $r-&gt;content($JSONMSG);
  my $ua = LWP::UserAgent-&gt;new();
  if($https eq "true") {
      $ua-&gt;ssl_opts(verify_hostname =&gt; 0);  #To bypass all certificate checks 
  }
  my $res = $ua-&gt;request($r);
  if (! $res-&gt;is_success) {
    print "Error is sending message " . $res-&gt;status_line . "\n";
  } else {
    print "SUCCESS " . $res-&gt;content . "\n";
  }
}

sub print_communication_mode {
  print "\n\n\nCommunication Configurations \n";
  print "----------------------------\n";
  print "Using HTTPS mode    : " . uc $https . "\n";
  print "BVDURL              : " . $BVDURL . "\n";
  print "----------------------------\n";
}

while (1) {
  my $cmd = qq(dbisql -onerror exit -nogui -c "DSN=PerfSPIProxyDSN" "$SQLFILE" |);
  #system_or_die($cmd);
  open(PS_F, $cmd);
  my @header;
  my $nodeName;
  while (&lt;PS_F&gt;) {
    if ($flag == 1){
      @header = split /\|/, $_;
      $flag = 0;
      next;
    }
    if ($_ =~ /Execution time/ or $_ =~ /rows/) {
      #print ("Ignoring SQL stmt summary\n");
      next;
    }
    my @data = split(' ', $_);
    my $i = 3;
    $nodeName = $data[2];
    if ($nodeName eq '' or $nodeName =~ /---/) {
      #print("Invalid data: $nodeName\n");
      next;
    }
    my $element;
    $JSONMSG="{" . '"NodeName"' . ":" . "\"" . $nodeName  . '"' .  ',"PerfMetrics":"My Metrics",';
    #$JSONMSG="{" . '"NodeName"' . ":" . "\"" . $nodeName  .  '," PerfMetrics":"My Metrics",';

    for (my $i = 3; $i &lt;= $#data; $i++) {
      if ($i &lt;$#data) {
        $metricName = $header[$i-1];
        $metricName =~ s/^\s+|\s+$//g;
        $element="\"". $metricName . "\"" . ':' . '"' . $data[$i] . '"' . ',';
      }
      else {
        $metricName = $header[$i-1];
        $metricName =~ s/^\s+|\s+$//g;
        $element="\"". $metricName . "\"" . ':' . '"' . $data[$i] . '"';
      }
      $JSONMSG=$JSONMSG . $element;
    }
    $JSONMSG=$JSONMSG . '}';
    push_data_to_bvd($JSONMSG); 
	} 
  print_communication_mode();
  print "\nWaiting for 5 minutes to get the new data \n";
  sleep(30);
}
</code></pre>

<p><br>
&nbsp;</p>
</html>