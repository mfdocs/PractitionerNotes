<html><p>Business Value Dashboards present your data in real time in a very flexible layout for visualizing on any browser capable device.&nbsp; Within Micro Focus Network Operations Management (NOM) suite, there are several out-of-the-box data sources, such as incidents from Network Node Manager (NNMi) and device configuration and vulnerability data from Network Automation (NA).&nbsp; These data sources can be streamed to BVD when integration is enabled.&nbsp;&nbsp; However, these built-in OOTB data sources are limited.&nbsp; Customers often need to create custom data channels to stream to BVD. &nbsp;This article will demonstrate how to use NNMi APIs to retrieve data of interest (e.g., incident data) and build a custom data channel with a concrete use case.<br>
<strong>Use Case Description</strong>:&nbsp; The user wants to display NNMi incident statistics of a node group in a top-level BVD dashboard, and would like to drill down to another dashboard to see more details of the incidents.&nbsp; For example, the dashboard below is a network risk dashboard which displays NNMi incident statistics:<br>
<br>
<img alt="" src="/mediawiki/images/pn_images/pn_image_5e952ce1c25dc4.42093689.jpeg" style="height:329px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:480px"></p>

<p>The numbers in the circle in the 2<sup>nd</sup> column are the count of critical incidents of a node group. This data field is part of an OOTB data channel “&lt;Node Group&gt;&nbsp;- Incidents”. &nbsp;&nbsp;The user then wants to drill down to another dashboard to see more details of these critical incidents, such as what these incidents are, what the source nodes of the incidents are, and at what time they occurred, etc. There are no OOTB data channels from NNMi to stream these details to BVD server.</p>

<p><strong>Use Case Solution:</strong> The use case was implemented in two steps:</p>

<ol>
	<li>Retrieve the incident data of interest from NNMi via NNMi WebService APIs,</li>
	<li>Format the data in JSON messages and stream them to a BVD dashboard.</li>
</ol>

<p>The solution was implemented with 2 java classes, <code>DataRetriever.java</code> and <code>DataPoster.java</code>.&nbsp; Details are explained in the following sections.<br>
<br>
<strong>Step 1 – Retrieve the incident data of interest from NNMi via NNMi WebService API</strong><br>
<code>DataRetriever.java</code> is created to retrieve incident date.&nbsp; The class interacts with three NNMi WebServices (NodeGroupService, NodeService and IncidentService) to retrieve incidents and filter those that are relevant to the node group.&nbsp; The important methods of the class are explained in detail below in the order of execution:</p>

<ol>
	<li><code>lookupService()</code>- NNMi offers 15 WebServices for different object types, such as Node, Interface, Incident, etc.&nbsp; We need 3 WebServices for this use case, NodeService, NodeGroupService, and IncidentService.&nbsp; This method connects to the NNMi WebService URL and look for these three services.&nbsp; Upon successful completion, it returns three service objects, NmsNode, NmsNodGroup and NmsIncident, respectively.</li>
	<li><code>authenticateService()</code>- In this method, you provide a user account to be authenticated with each service.&nbsp; The user account must be an existing NNMi user account and it must be mapped to “NNMi Web Service Clients” group. &nbsp;In this example, we use “wsclient” user account in NNMi:<br>
	<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e952ce248c3a5.18931837.jpeg" style="height:225px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:240px"><br>
	&nbsp;</li>
	<li><code>buildNodeList()</code>- This method calls the NodeGroupService’s <code><u>getMemberId</u>()</code>to get the list of node IDs in a given node group.&nbsp; However, an incident only contains <code>SourceNodeName</code> in its VARBINDs.&nbsp; Therefore, we call Node Service to get the corresponding node name for each node ID. &nbsp;The node’s name is then added to a list which is used later to filter the incidents of interest. &nbsp;This method also demonstrates how to use a simple filter to retrieve a subset of objects from the service.&nbsp; In this example, we built a filter (“id” EQ &lt;nodeID&gt;) in the method <code>buildFilter()</code>, then use this filter to retrieve the corresponding node object.<br>
	&nbsp;</li>
	<li><code>getIncidents()</code>- This method retrieves the incidents from IncidentService by calling its <code>getIncidents(Filter)</code> method. But before calling the method, we need to build a filter because we only need to retrieve the incidents with “CRITICAL” severity, and those that were registered with NNMi within past 10 minutes.&nbsp; The method <code>buildFilter2()&nbsp;</code>builds such a filter with 3 conditions, (“severity” EQ “CRITICAL”), (incident’s time stamp &lt; NOW), and (incident’s time stamp &gt; "NOW – 10 minutes").&nbsp; Each condition was built as a sub-filter, then the three sub-filters were combined into a compound filter with the operator AND.<br>
	After we retrieved all the incidents using this compound filter, we compared each incident’s VARBIND “<code>SourceNodeName</code>” with the node list generated in step 3.&nbsp; If the list contained the source node, we added this incident to an incident list maintained by the <code>DataPoster.java</code>.&nbsp; &nbsp;<br>
	<br>
	<strong>Step 2 - Format Incident’s data in JSON messages and stream to BVD dashboard</strong>
	<p><code>DataPoster.java</code> is created for this step. This class maintains an internal incident list which was populated by <code>DataRetriever.java</code> if an incident passed through the filter.&nbsp; Once all the incidents were processed, the <code>PostData()</code> method was invoked.&nbsp; It formatted all the incidents’ data in JSON messages and pushed these messages to BVD server.<br>
	Once the method established a stream data channel with the BVD server, these incident data will be available in BVD Dashboard Configuration page.&nbsp; User can associate the data with a widget group in BVD, and create a table view dashboard like the example showing below:<br>
	<img alt="" src="/mediawiki/images/pn_images/pn_image_5e952ce738fa61.84947371.jpeg" style="height:217px; margin-bottom:0px; margin-left:0px; margin-right:0px; margin-top:0px; width:500px"></p>

	<p><strong>Summary</strong><br>
	This article described the implementation of a solution which allows NOM customers to retrieve incident data via NNMi WebService APIs, build custom data channels and stream to a BVD dashboard. &nbsp;</p>

	<p><strong>Appendix </strong></p>

	<p>Three java classes for this solution are included in this section in their entirety.&nbsp; Some variables that need to be replace with appropriate values were indicated in the comments.<br>
	<br>
	<code>NnmWSClient.java</code></p>

	<pre><code class="language-java">package com.hp.ov.nms.sdk.client;

import java.util.Properties;
import com.hp.ov.nms.sdk.incident.NmsIncidentFault_Exception;
import com.hp.ov.nms.sdk.node.NmsNodeFault_Exception;
import com.hp.ov.nms.sdk.nodegroup.NmsNodeGroupFault_Exception;

public class NnmWSClient {
	private String nodeGroup="Sunnyvale";
		
	public static void main(String[] args) {
		System.out.println("Starting NnmSdkClient ...\n");
		
		try {
			NnmWSClient nodeClient = new NnmWSClient();
		} catch (NmsIncidentFault_Exception e) {
			System.out.println(e.getMessage());
		}  catch (NmsNodeGroupFault_Exception e) {
			System.out.println(e.getMessage());
		}  catch (NmsNodeFault_Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	public NnmWSClient() throws NmsIncidentFault_Exception, NmsNodeGroupFault_Exception, NmsNodeFault_Exception{
		
		DataPoster dataPoster = new DataPoster();
		DataRetriever dataRetriever = new DataRetriever(nodeGroup, dataPoster); 
		dataPoster.postData();		
	}
}
</code></pre>

	<p><br>
	<code>DataRetriever.java</code></p>

	<pre><code class="language-java">package com.hp.ov.nms.sdk.client;

import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import com.hp.ov.nms.sdk.filter.BooleanOperator;
import com.hp.ov.nms.sdk.filter.Condition;
import com.hp.ov.nms.sdk.filter.Expression;
import com.hp.ov.nms.sdk.filter.Filter;
import com.hp.ov.nms.sdk.filter.Operator;
import com.hp.ov.nms.sdk.incident.Incident;
import com.hp.ov.nms.sdk.incident.IncidentArray;
import com.hp.ov.nms.sdk.incident.NmsIncident;
import com.hp.ov.nms.sdk.incident.NmsIncidentFault_Exception;
import com.hp.ov.nms.sdk.node.NmsNode;
import com.hp.ov.nms.sdk.node.NmsNodeFault_Exception;
import com.hp.ov.nms.sdk.node.Node;
import com.hp.ov.nms.sdk.node.NodeArray;
import com.hp.ov.nms.sdk.nodegroup.NmsNodeGroup;
import com.hp.ov.nms.sdk.nodegroup.NmsNodeGroupFault_Exception;
import com.hp.ov.nms.sdk.nodegroup.NodeGroup;
import com.hp.ov.nms.sdk.nodegroup.NodeGroupArray;

import net.java.dev.jaxb.array.StringArray;

public class DataRetriever {
	
	private String wsURL="http://&lt;NNMi FQDN&gt;:80/"; //replace with your NNMi FQDN
	private String NAMESPACE=".sdk.nms.ov.hp.com/";
	private NmsIncident incidentService=null;
	private NmsNodeGroup ngService=null;
	private NmsNode nodeService=null;
	private List&lt;String&gt; nodeGroupMembers=null;
	private Properties nodeIdName=null;
	private DataPoster dataPoster=null;
	private String username="&lt;my user&gt;";  //replace with your NNMi user account
	private String password="&lt;my password&gt;";   //replace with your password
	private String nodeGroup = null;
	
	public DataRetriever(String ng, DataPoster poster) throws NmsNodeGroupFault_Exception, NmsIncidentFault_Exception, NmsNodeFault_Exception {
		dataPoster=poster;
		nodeGroup=ng;
		//We need to use 3 NNMi Web Services: NodeService, NodeGroupService and IncidentService
		//So, we need to look up these 3 services
		nodeService=lookupService("Node").getPort(NmsNode.class);
		incidentService=lookupService("Incident").getPort(NmsIncident.class);
		ngService=lookupService("NodeGroup").getPort(NmsNodeGroup.class);	
		
		//Now we provide NNMi user/password to authenticate
		authenticateService("Node",(BindingProvider)nodeService);
		authenticateService("Incident",(BindingProvider)incidentService);
		authenticateService("NodeGroup",(BindingProvider)ngService);
		
		//now we build a list with node names
		buildNodeList();
		
		//now we retrieve all the CRITICAL incidents registered 
		//with NNMi within the past 10 minutes 
		String severity = "CRITICAL";
		List&lt;Incident&gt; incidents = getIncidents(severity);
		//we only keep the incidents with SourceNode in the node group of interest
		for (Incident  incident : incidents){
			if (nodeGroupMembers.contains(incident.getSourceNodeName())) {
				dataPoster.getIncidents().add(incident);
			}
		}
	}
	
	private void buildNodeList() throws NmsNodeGroupFault_Exception, NmsNodeFault_Exception {
		Filter ngFilter=buildFilter("name", nodeGroup);
		NodeGroupArray ngArray = ngService.getNodeGroups(ngFilter);
		NodeGroup ng = ngArray.getItem().get(0);
		StringArray nodeIds = ngService.getMemberIds(ng.getId());
		nodeGroupMembers = new ArrayList&lt;String&gt;();
		for (String nodeId : nodeIds.getItem()){
			nodeGroupMembers.add(getNodeName(nodeId));
		}	
	}

	private javax.xml.ws.Service lookupService(String name) {
        javax.xml.ws.Service service=null;
        String serviceWsdl=null;
        try {
            serviceWsdl=getServiceName(name)+"?wsdl";
            String namespace=getNamespace(name);
            System.out.println("Namespace: " + namespace + "\n");
            URL url = new URL(serviceWsdl);
            QName qname = new QName(namespace,name+"BeanService");
            service = javax.xml.ws.Service.create(url, qname);
        } catch(Exception e) {
        	e.printStackTrace();
        }
        return service;
    }
	
	private String getServiceName(String name) {
        return wsURL+name+"BeanService/"+name+"Bean";
    }
	
	private String getNamespace(String name) {
        String serviceNameSpace=name.toLowerCase();
        if(name.equals("Interface")) serviceNameSpace="iface";
        return "http://"+serviceNameSpace+NAMESPACE;
    }
	
	private void authenticateService(String serviceName, BindingProvider bindingProvider) {
        String wsdlName=getServiceName(serviceName);
        try {
            Map&lt;String, Object&gt; reqContext = bindingProvider.getRequestContext();
            reqContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, wsdlName);
            reqContext.put(BindingProvider.USERNAME_PROPERTY, username);
            reqContext.put(BindingProvider.PASSWORD_PROPERTY, password);
        } catch(Exception e) {
        	e.printStackTrace();
        }
    }
	
	private String getNodeName(String nodeId) throws NmsNodeFault_Exception {
		Filter nodeFilter=buildFilter("id", nodeId);
		NodeArray nodeArray=nodeService.getNodes(nodeFilter);
		List&lt;Node&gt; nodeList= nodeArray.getItem();
		return nodeList.get(0).getName();
	}
	
	private List&lt;Incident&gt; getIncidents(String severity) throws NmsIncidentFault_Exception {
		Expression incidentFilter=buildIFilter2("severity", severity);
		IncidentArray incidentArray = incidentService.getIncidents(incidentFilter);
		List&lt;Incident&gt; incidentList= incidentArray.getItem();
		return incidentList;
	}
	
	private Filter buildFilter(final String propertyName, final String propertyValue){
        propertyName.trim();
        propertyValue.trim();
        Condition cond = new Condition();
        cond.setName(propertyName);
        cond.setOperator(Operator.EQ);
        cond.setValue(propertyValue);
        return cond;
	}
	
	private Expression buildIFilter2(final String name, final String value) {
        Condition condition1=new Condition();
        condition1.setName(name);
        condition1.setOperator(Operator.EQ);
        condition1.setValue(value);
        
        Long now=Calendar.getInstance().getTimeInMillis();
        Long then=now-(15*24*60*60*1000);//10 minutes (600,000 milliseconds) old
        
        Condition condition2 = new Condition();
        condition2.setName("lastOccurrenceTime");
        condition2.setOperator(Operator.LT);
        condition2.setValue(now.toString());
        
        Condition condition3 = new Condition();
        condition3.setName("lastOccurrenceTime");
        condition3.setOperator(Operator.GT);
        condition3.setValue(then.toString());
       
        Expression exp = new Expression();
        exp.getSubFilters().add(condition1);
        exp.getSubFilters().add(condition2);
        exp.getSubFilters().add(condition3);
        exp.setOperator(BooleanOperator.AND);
        return exp;
    }

}
</code></pre>

	<p><br>
	<code>DataPoster.java</code></p>

	<pre><code class="language-java">package com.hp.ov.nms.sdk.client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;

import com.hp.ov.nms.sdk.incident.Incident;

public class DataPoster {
	//replace with your BVD Server FQDN
	private String bvdURL = "https://&lt;My BVD FQDN&gt;/bvd-receiver/api/submit/";
	//replace with your BVD API Key
	private String bvdApiKey="&lt;My BVD API Key&gt;";
	private List&lt;Incident&gt; incidents=null;
	
	public DataPoster() {
		incidents = new ArrayList&lt;Incident&gt;();
	}
	
	public List&lt;Incident&gt; getIncidents() {
		return incidents;
	}
	
	public void postData() {
		String bvdCurlUrl= this.bvdURL + this.bvdApiKey + "/dims/NodeName,CriticalIncident";	
		try {
			for (Incident  incident : incidents){
				String jsonMsg = "\'{";
				jsonMsg = jsonMsg + "," + "\"NodeName\"" + ":" + "\"" + incident.getSourceNodeName() + "\"" + ","
							  + "\"CriticalIncident\"" + ":" + "\"" + incident.getName() + "\"" + ","
							  + "\"SourceNode\"" + ":" + "\"" + incident.getSourceNodeName() + "\"" + ","
			                  + "\"SourceName\"" + ":" + "\"" + incident.getSourceName() + "\"" + ","
			                  + "\"Incident\"" + ":" + "\"" + incident.getName() + "\"" + ","
			                  + "\"LastOccurrenceTime\"" + ":" + "\"" + incident.getLastOccurrenceTime() + "\"";
				jsonMsg = jsonMsg + "}\'";
				jsonMsg = jsonMsg.replaceFirst(",","");
				String curlCLI = "curl -k -X POST -H \"Content-Type: application/json\" -d " + jsonMsg 
					+ " " + bvdCurlUrl;
				System.out.println(curlCLI);
			
				String s = null;
				// using the Runtime exec method:
				Process p;
				p = Runtime.getRuntime().exec(curlCLI);
				BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
				BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
				// read the output from the command
				System.out.println("Here is the standard output of the command:\n");
				while ((s = stdInput.readLine()) != null) {
					System.out.println(s);
				}
				// read any errors from the attempted command
				System.out.println("Here is the standard error of the command (if any):\n");
			
				while ((s = stdError.readLine()) != null) {
					System.out.println(s);
				}
			}	
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}</code></pre>

	<p><br>
	&nbsp;</p>
	</li>
</ol>

<p>&nbsp;</p>
</html>