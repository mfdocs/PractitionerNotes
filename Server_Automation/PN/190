<p>A server script represents a code blob that runs on a managed server. This service is used for the registration and management of server scripts within folders. It also provides means to invoke scripts on servers.</p>

<p>&nbsp;</p>

<h2>Exporting servers scripts</h2>

<p>This script will export all the source code for scripts that have been created. It demonstrates the use of;&nbsp;<tt>findServerScriptRefs,&nbsp;getServerScriptVOs,&nbsp;getSource</tt>&nbsp;along with various attributes of the ServerScriptVO object.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.search import Filter
ts = twistserver.TwistServer()
SS = ts.script.ServerScriptService
refs = SS.findServerScriptRefs(Filter())
camelCase = lambda s: ''.join(x for x in s.title() if not x.isspace())
for vo in SS.getServerScriptVOs(refs):
    filename = "%s.%s" %(camelCase(vo.name),vo.codeType)
    print "Exporting %s" % filename
    with open(filename,'w') as f:
        f.write(SS.getSource(vo.ref, vo.currentVersion.versionLabel))
</pre>

<p>&nbsp;</p>

<h2>Scheduling a server script against servers</h2>

<p>This is jumping ahead a little as we need to deal with some objects related to Job creation but its as good a time as any to introduce this topic. Our objective is to programmatically schedule a server script to run against a batch of servers that match a filter condition. Error handling has been left out to improve readability.</p>

<pre>#!/opt/opsware/bin/python
import time
from pytwist import twistserver
from pytwist.com.opsware.job import JobNotification, JobSchedule
from pytwist.com.opsware.script import ServerScriptJobArgs

ts = twistserver.TwistServer()
ts.authenticate("user","password")
ServerScriptService = ts.script.ServerScriptService
SearchService = ts.search.SearchService

email = 'jyaya@yoyodyne.com'
jobNotification = JobNotification()
jobNotification.onCancelRecipients=[email]
jobNotification.onFailureRecipients=[email]
jobNotification.onSuccessRecipients=[email]

jobSchedule = JobSchedule()
jobSchedule.startDate = long(time.time() + 60) #  1 min from now

args = ServerScriptJobArgs()
args.timeOut = 4 * 60 # seconds
args.targets = SearchService.findObjRefs(
        'device_management_ip BEGINS_WITH 10.0',
        'device')
scriptRef = SearchService.findObjRefs(
        'ServerScriptVO.name = "Sleeping Server Script"',
        'server_script')[0]
userTag = "run script on servers"

jobRef = ServerScriptService.startServerScript(scriptRef, args, userTag,
                                               jobNotification, jobSchedule)
print "Created job %s" % jobRef
</pre>

<p>Execution:</p>

<pre>[root@dc1 demo]# ./run-script.py
Created job Run Server Script (ScheduledJobRef:114110001)</pre>

<p>The call to&nbsp;<tt>startServerScript</tt>&nbsp;is asynchronous, that is once the job has been submitted the python program will resume control whilst the SA deals with the execution of the submitted job, either immediately or in the future as we have scheduled it.</p>

<p>Normally the&nbsp;<tt>startDate</tt>&nbsp;is not a relative offset but some absolute point in time when you want the job to run. To convert absolute date/time to an epoch number suitable for supplying to&nbsp;<tt>startDate</tt>&nbsp;this calculation is handy:</p>

<pre>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; (datetime(2019,12,1,16,43,45)-datetime(1970,1,1)).total_seconds()
1575218625.0
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.ctime(1575218625)
'Sun Dec  1 16:43:45 2019'
&gt;&gt;&gt;
</pre>

<p>&nbsp;</p>

<h2>Running an adHoc script</h2>

<p>Paring down to the bare essentials we can submit and adHoc shell script to execute against a Linux server to run immediately without any notification.</p>

<pre>#!/opt/opsware/bin/python
import time
from pytwist import twistserver
from pytwist.com.opsware.script import ServerScriptJobArgs
from pytwist.com.opsware.server import ServerRef

ts = twistserver.TwistServer()
ts.authenticate("user","password")

args = ServerScriptJobArgs()
args.targets = [ServerRef(91190001)]
args.tailOutputSize = 10 * 1024 # 10k
args.timeOut = 600

userTag = "adHoc script"
source = 'echo hello world\necho adhoc script here\n'
codeType = 'SH'

jobRef = ts.script.ServerScriptService.startAdhocServerScript(source, codeType, args, userTag, None, None)
print "Created job %s" % jobRef
</pre>

<p>&nbsp;</p>

<h2>Running an adHoc script synchronously and obtaining results</h2>

<p>As the job execution engine (Way) is executing the job asynchronously if we want to get the results in the same script we'll need to wait for the job to finish. This will require polling the job and waiting for either FAILURE or SUCCESS. The job return status is a numeric so we need a mapping table.</p>

<pre>import sys, time
from pytwist import twistserver
from pytwist.com.opsware.script import ServerScriptJobArgs
from pytwist.com.opsware.job import JobInfoVO
from pytwist.com.opsware.server import ServerRef

jobStatus = {
  JobInfoVO.STATUS_ABORTED: 'ABORTED',   JobInfoVO.STATUS_ACTIVE: 'ACTIVE',
  JobInfoVO.STATUS_BLOCKED: 'BLOCKED',   JobInfoVO.STATUS_CANCELLED: 'CANCELLED',
  JobInfoVO.STATUS_DELETED: 'DELETED',   JobInfoVO.STATUS_EXPIRED: 'EXPIRED',
  JobInfoVO.STATUS_FAILURE: 'FAILURE',   JobInfoVO.STATUS_PENDING: 'PENDING',
  JobInfoVO.STATUS_RECURRING: 'RECURRING',
  JobInfoVO.STATUS_STALE: 'STALE',       JobInfoVO.STATUS_SUCCESS: 'SUCCESS',
  JobInfoVO.STATUS_TAMPERED: 'TAMPERED', JobInfoVO.STATUS_UNKNOWN: 'UNKNOWN',
  JobInfoVO.STATUS_WARNING: 'WARNING',   JobInfoVO.STATUS_ZOMBIE: 'ZOMBIE'}

ts = twistserver.TwistServer()
ts.authenticate("user","password")

ServerScriptService = ts.script.ServerScriptService
JobService = ts.job.JobService

def runAdHocScript(serverRef):
    args = ServerScriptJobArgs()
    args.targets = [serverRef]
    source = 'echo hello world\necho adhoc script here'
    jobRef = ServerScriptService.startAdhocServerScript(source, 'SH',
                                                        args, 'adHoc Script',
                                                        None, None)
    print "Created job %s" % jobRef
    return jobRef

def waitForJobToFinish(jobRef):
    jobvo = JobService.getJobInfoVO(jobRef)
    while jobvo.status in (JobInfoVO.STATUS_ACTIVE,JobInfoVO.STATUS_PENDING):
        sys.stdout.write('.')
        sys.stdout.flush()
        time.sleep(2)
        jobvo = JobService.getJobInfoVO(jobRef)
    sys.stdout.write('\n')

    print "End: %s" % time.ctime(jobvo.endDate)
    print "Job status: %s" % jobStatus[jobvo.status]

def displayJobResults(jobRef, serverRef):
    jobOutput = ServerScriptService.getServerScriptJobOutput(jobRef, serverRef)
    print "exit code: %s" % jobOutput.exitCode
    print "stderr: %s" % jobOutput.tailStderr
    print "stdout: %s" % jobOutput.tailStdout

myServer = ServerRef(91190001)
job = runAdHocScript(myServer)
waitForJobToFinish(job)
displayJobResults(job, myServer)
</pre>

<p>An neat trick using dictionary comprehension available in python 2.7 and class introspection to setup the jobStatus translation map that we defined manually.</p>

<pre>&gt;&gt;&gt; jobStatus = {v: k.replace('STATUS_','')
...              for k,v in vars(JobInfoVO).items()
...              if not callable(v) and k.startswith('STATUS_')}
&gt;&gt;&gt; jobStatus
{0: 'ABORTED', 1: 'ACTIVE', 2: 'CANCELLED', 3: 'DELETED', 4: 'FAILURE', 5: 'PENDING', 6: 'SUCCESS', 7: 'UNKNOWN', 8: 'WARNING', 9: 'TAMPERED', 10: 'STALE', 11: 'BLOCKED', 12: 'RECURRING', 13: 'EXPIRED', 14: 'ZOMBIE', 15: 'TERMINATING', 16: 'TERMINATED'}
&gt;&gt;&gt;</pre>

<p>Execution of the script</p>

<pre>[root@dc1 ServerScriptService]# ./run-adhoc-script-sync.py
Created job Run Server Script (JobRef:114220001)
..
End: Fri Oct  4 12:27:25 2019
Job status: SUCCESS
exit code: 0
stderr:
stdout: hello world
adhoc script here</pre>

<p>What is wrong with this code is that the polling loop waiting for the job to finish is iterating every 2 seconds. This creates a scalability issue and is ok for a demo but in production you should only poll a minimum of once every 60 second. Even that does not scale well. A better solution is to use the use the EventCacheService.</p>

<p>Why does is job polling this way perform badly? Its due to the fact that the call&nbsp;<tt>getJobInfo()</tt>&nbsp;is a heavy call that exerts load upon the Twist.</p>

<p>The reason it's a heavy is due to this structure being populated.</p>

<p><img src="./mediawiki/images/PN/graphviz4138907836451724440.png"></p>

<p>&nbsp;</p>

<p>The primary issue being the JobServerInfo. For large server jobs populating this array when all we require is the job status is what causes problems.</p>

<p>&nbsp;</p>

<p>You may think perhaps using&nbsp;<tt>getProgress()</tt>&nbsp;method would be lighter but it still has to populate the&nbsp;<tt>JobInfoVO</tt>&nbsp;and it too suffers the same performance issue.</p>

<pre>def jobIsInProgress(job_ref):
        job_progress = ts.job.JobService.getProgress(job_ref)
        return job_progress and (job_progress.active == 1)

def waitForJobToFinish(job_ref):
   while jobIsInProgress(job_ref):
      time.sleep(60)
</pre>

<p>An enhancement request OCTCR19L333539 to create a new API that only fetches the job status is in development. In future SA releases we will be able to code</p>

<pre>  def waitForJobToFinish(jobRef):
    status = JobService.getJobStatus(jobRef)
    while status in (JobInfoVO.STATUS_ACTIVE,JobInfoVO.STATUS_PENDING):
        time.sleep(60)
        status = JobService.getJobStatus(jobRef)
</pre>

<p>Until this appears using the EventCacheService is the lightest call that can be made when polling for completion.</p>
