<p>The event cache service provide events that describe the last change made to persistent objects. Client programs can use this mechanism to trigger various actions such as updating a client side cache of value objects.</p>

<p>&nbsp;</p>

<h2>Monitoring object update events</h2>

<p>Monitor the event cache and display when something happens to an object.</p>

<pre>#!/opt/opsware/bin/python
import time
from pytwist import twistserver
from pytwist.com.opsware.cache import Event

ts = twistserver.TwistServer()
ts.authenticate("user","password")

actionMap = {Event.CREATED:'Created',
             Event.DELETED:'Deleted',
             Event.UPDATED:'Updated',
             Event.CUSTOM_FIELD_UPDATED:'Custom field updated',
             Event.COMPLIANCE_UPDATED:'Compliance Updated',
             Event.COMPLIANCE_RECURRING_JOB_SCHEDULED:'Compliance Recurring job scheduled',
             Event.COMPLIANCE_SCHEDULE_CANCELED:'Compliance schedule canceled'}

lastEventPoll = long(time.time())
while True:
    events = ts.cache.EventCacheService.getEvents(lastEventPoll)
    for e in events.getEvents():
        print "%s %s %s" % (time.ctime(e.date), e.source, actionMap[e.action])
    lastEventPoll = events.fetchDate
    time.sleep(10) # 10 seconds
</pre>

<p>Execution</p>

<pre>[root@dc1 EventCacheService]# ./monitorEvents.py
Fri Oct  4 17:29:33 2019 (JobRef:114260001) Updated
Fri Oct  4 17:29:45 2019 (JobRef:114270001) Updated
Fri Oct  4 17:29:55 2019 (ServerRef:91190001) Compliance Updated
Fri Oct  4 17:29:56 2019 (JobRef:114280001) Updated</pre>

<p>&nbsp;</p>

<h2>Running an adHoc script synchronously and obtaining results (redux)</h2>

<p>To address the scalability issue raised while waiting for a job to finish we can make use of the Event service to reduce the number of times the call&nbsp;<tt>getJobInfoVO</tt>&nbsp;is made. The event service is lightweight and designed to be polled the&nbsp;<tt>getJobInfoVO</tt>&nbsp;call is not.</p>

<p>Rather than constantly polling the job to check its state we now monitor with the&nbsp;<tt>EventCacheService</tt>&nbsp;and when it tells us a change on the&nbsp;<tt>jobRef</tt>&nbsp;has occurred only then do we check its state.</p>

<p>We require a modification of the&nbsp;<tt>waitForJobToFinish</tt>&nbsp;function in the previous example.</p>

<pre>def waitForJobEvent(jobRef):
    global lastEventPoll
    while True:
        events = ts.cache.EventCacheService.getEvents(lastEventPoll)
        for e in events.getEvents():
            if e.source == jobRef:
                return
            lastEventPoll = events.fetchDate
            time.sleep(5)

def waitForJobToFinish(jobRef):
    global lastEventPoll
    lastEventPoll = long(time.time())
    jobvo = JobService.getJobInfoVO(jobRef)
    while jobvo.status in (JobInfoVO.STATUS_ACTIVE,JobInfoVO.STATUS_PENDING):
        waitForJobEvent(jobRef)
        jobvo = JobService.getJobInfoVO(jobRef)
    print "End: %s" % time.ctime(jobvo.endDate)
    print "Job status: %s" % jobStatus[jobvo.status]
</pre>

<p>This logic is not thread safe as we are using a global to track the last poll timestamp. Refactor into a class if multi-threading.</p>
