<h1 id="Pytwist-Introduction" style="margin: 30px 0px 0px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 1.25; color: rgb(51, 51, 51); border-bottom-color: rgb(204, 204, 204); font-family: Arial, sans-serif; letter-spacing: normal; text-transform: none;">Introduction</h1><p style="margin-top: 10px; margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; letter-spacing: normal;">This document discusses the Unified API and uses twister and pytwist to access the API. It is intended for people with some programming background and access to the Global Shell.</p><p style="margin-top: 10px; margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; letter-spacing: normal;">If you don't have access to Global Shell then these examples can also be run with minimal changes on a core server or any agent with the pytwist API's installed.</p><h1 id="Pytwist-Pre-requisites" style="margin: 30px 0px 0px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 1.25; color: rgb(51, 51, 51); border-bottom-color: rgb(204, 204, 204); font-family: Arial, sans-serif; letter-spacing: normal; text-transform: none;">Pre-requisites</h1><p style="margin-top: 10px; margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; letter-spacing: normal;">In order to use this guide, a user should have:</p><ul style="margin: 10px 0px 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px;"><li>A login with basic privileges and the ability to access the Global Shell.</li><li>The ability to create and run a Global Shell scripts.</li></ul><h1 id="Pytwist-AbouttheAPI" style="margin: 30px 0px 0px; padding: 0px; font-size: 24px; font-weight: normal; line-height: 1.25; color: rgb(51, 51, 51); border-bottom-color: rgb(204, 204, 204); font-family: Arial, sans-serif; letter-spacing: normal; text-transform: none;">About the API</h1><p style="margin-top: 10px; margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; letter-spacing: normal;">The API is organized into various Java packages. Packages are organized by features and/or data types. Each API package consists of only classes and interfaces that are part of the API. An API package consists of the following:</p><ul style="margin: 10px 0px 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px;"><li><strong>Interfaces.</strong>&nbsp;Java interfaces are used to classify collections of functions exposed by the API.</li><li><strong>Service Interfaces.</strong>&nbsp;The stateless session beans which implement the functionality expressed in the API's interfaces.</li><li><strong>Data Objects (Plain Old Java Objects).</strong>&nbsp;The API may define data-only, serializable objects to represent custom complex types.</li><li><strong>Object references.</strong>&nbsp;Special serializable classes are used to identify logical objects exposed thru the API.</li><li><strong>Value objects (VO).</strong>&nbsp;Serializable, data-only objects used to transfer associated members of an object in-bulk.</li><li><strong>Exceptions.</strong>&nbsp;The API may throw java.rmi.RemoteException and exceptions derived from com.opsware.common.OpswareException. Exceptions thrown by the API are declared exceptions (i.e. derivation of java.lang.Exception).</li></ul>