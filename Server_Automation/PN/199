<html><p>Jobs represent actions in SA that run in the background and have progress and results.</p>

<p>You cannot access job information using core authentication. That is you must make an&nbsp;<tt>authenticate(user,pass)</tt>&nbsp;call.</p>

<h2>Finding the latest job based on its description</h2>

<p>We have a recurring Audit that runs every day.&nbsp; We want to export the Audit Results and need to know the last job executed for an Audit.&nbsp; &nbsp;The name of the Audit will become the description of the job once executed, we will search on this field.&nbsp; Note: If the Audit has never run max() will throw a ValueError exception, error handling is not included in the sample.</p>

<pre>#!/opt/opsware/bin/python
from pytwist.twistserver import TwistServer
ts = TwistServer()
ts.authenticate("user","password")
SS = ts.search.SearchService
jobRef = max(SS.findObjRefs('(JobInfoVO.description CONTAINS "Check CVE-2021-44228") &amp; (job_type = server.audit.create)','job'))
print(jobRef)
</pre>

<h2>Display communication test results</h2>

<p>Textual representation of what is displayed in the GUI interface</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.job import JobRef
from pytwist.com.opsware.server import CommTestJobResult
ts = twistserver.TwistServer()
ts.authenticate('user','password') # Job access requires a valid SA user
jobRef = JobRef(143700001)
jr = ts.job.JobService.getResult(jobRef)
if isinstance(jr,CommTestJobResult):
    print "%s of %s completed" % (jr.totalCompleted,jr.totalDvcs)
    print "%30s AGT CRP  CE DAE SWR  MD" % " "
    for je in jr.elemResultInfo:
        agt = je.agentReachable # AGenT
        crp = je.cryptoOk       # CRyPto
        ce = je.wayReachable    # Command Engine
        dae = je.spinReachable  # Data Access Engine
        swr = je.wordReachable  # SoftWare Repository
        md = je.midOk           # Machine iD
        result = map(lambda i: {'None':'-','0':'O'}.get(i,'X'),
                     [agt,crp,ce,dae,swr,md])
        print "%30s  %s" % (je.name,'   '.join(result))
    print "Failures: %s" % jr.totalFailed
</pre>

<p>Execution</p>

<pre>[root@dc1 ServerService]# ./commTestResults.py
5 of 5 completed
                               AGT CRP  CE DAE SWR  MD
                dc1.blue.local  O   O   O   O   O   O
               sat1.blue.local  O   O   O   O   O   O
               dc1.green.local  X   -   -   -   -   -
            zuludb.green.local  X   -   -   -   -   -
            charlie.pink.local  O   O   O   O   O   O
Failures: 2</pre>

<p>Note the order is different as the GUI is sorted by hostname.</p>

<p><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/f/f5/CommTestResult.png" height="251" hspace="0" src="https://docs.microfocus.com/mediawiki/images/f/f5/CommTestResult.png" style="width:495px;height:251px;margin-top:0px;margin-bottom:0px;margin-left:0px;margin-right:0px;border:0px solid black;" vspace="0" width="495"></p>

<h2>Canceling a scheduled job</h2>

<p>The call is a single line but there is a lot of error handling that has to happen. You must authenticate as a user to perform any job manipulation using Core Authentication will not give you access.</p>

<pre>#!/opt/opsware/bin/python
import sys
from pytwist import twistserver
from pytwist.com.opsware.job import ScheduledJobRef, JobNotScheduledException
from pytwist.com.opsware.common import NotFoundException
from pytwist.com.opsware.fido import AuthorizationDeniedException

if len(sys.argv) &lt; 2:
    print "cancelScheduleJob &lt;id&gt; [reason]"
    sys.exit(1)

ts = twistserver.TwistServer()
ts.authenticate("user","password")
jobRef = ScheduledJobRef(long(sys.argv[1]))
reason = None if len(sys.argv) == 2 else sys.argv[2]
try:
    ts.job.JobService.cancelScheduledJob(jobRef, reason)
    print "Job schedule canceled"
except NotFoundException:
    print "Job not found"
except AuthorizationDeniedException:
    print "Unauthorized"
except JobNotScheduledException:
    print "Job not scheduled"
</pre>

<p></p>

<h2>Start a scheduled job now</h2>

<p>There is a recurring job that is scheduled to run on Sunday but we want to run an instance of that job now and then let the recurring job continue to run on its normal schedule.</p>

<p>We run aground trying to implement this feature as the Twist search filters provides no mechanism to locate the children of a parent job. This filter won't work and its what we want to do.</p>

<pre>childJob = ts.search.SearchService.findObjRefs('(job_parent_id = xxxx) &amp; (job_status = PENDING)','job')
</pre>

<p>A small sojourn into the SA job scheduling system is required to understand the problem. When you create a recurring job SA actually creates two jobs.</p>

<table cellspacing="0" style="border-collapse:collapse">
	<tbody>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Job Id</strong></p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Status</strong></p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Visibility</strong></p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>114680001</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>RECURRING</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>Visible</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>114690001</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>PENDING</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>Hidden</p>
			</td>
		</tr>
	</tbody>
</table>

<p>These jobs are associated with each other by use of the&nbsp;<tt>parent_session_id</tt>&nbsp;column in the&nbsp;<tt>sessions</tt>&nbsp;database table. The PENDING child is what will be executed by the&nbsp;<strong>Way</strong>&nbsp;when its scheduled execution time becomes current. Upon completion of that child it will be marked as SUCCESS (or FAILURE) and a new PENDING child will be scheduled according to the scheduling rules held on the parent (RECURRING) job.</p>

<table cellspacing="0" style="border-collapse:collapse">
	<tbody>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Job Id</strong></p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Status</strong></p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Visibility</strong></p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>114680001</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>RECURRING</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>Visible</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>114690001</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>SUCCESS</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>Visible</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>114700001</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>PENDING</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>Hidden</p>
			</td>
		</tr>
	</tbody>
</table>

<p>If we want the PENDING child to run now we need to first find it and that is the crux of the issue. There is no Twist API call to do that. We workaround that problem by obtaining this information using the&nbsp;<strong>Spin</strong>&nbsp;in a read-only context.</p>

<pre>#!/opt/opsware/bin/python2
# Start a recurring job now
import sys, time
from pytwist import twistserver
from pytwist.com.opsware.job import ScheduledJobRef, JobInfoVO, JobSchedule, JobRef
from pytwist.com.opsware.common import NotFoundException
from coglib import spinwrapper

def start_pending(jobId):
    vo = ts.job.JobService.getJobInfoVO( JobRef( jobId ) )
    if vo.status != JobInfoVO.STATUS_RECURRING:
        print "This is not a scheduled job"
        sys.exit(1)

    # There is no TWIST filter to find a pending child of a recurring job !?
    spin = spinwrapper.SpinWrapper()
    childJob = spin.Session.getAll(restrict={'parent_session_id': jobId,
                                             'status':'PENDING'})[0]

    jobRef = ScheduledJobRef(childJob['id'])
    print "Found child job %s" % jobRef
    vo = ts.job.JobService.getJobInfoVO( jobRef )
    print "Scheduled to run at %s" % time.ctime(vo.schedule.startDate)
    sched = JobSchedule()
    sched.startDate = long(time.time() + 60)
    print "Rescheduled to run at %s" % time.ctime(sched.startDate)
    ts.job.JobService.updateScheduledJob( jobRef, vo.userTag, vo.notification, sched )


if len(sys.argv) != 2:
   print "startJobNow &lt;id&gt;"
   sys.exit(1)

ts = twistserver.TwistServer()
ts.authenticate('user','password')
try:
    start_pending(sys.argv[1])
except NotFoundException:
    print "Job not found"
</pre>

<p>Execution</p>

<p><img src="./mediawiki/images/PN/Recurring-jobs.png"></p>

<p></p>

<p></p>

<p></p>

<pre>[root@dc1 JobService]# ./startJobNow.py 114680001
Found child job (ScheduledJobRef:114740001)
Scheduled to run at Sun Oct 13 18:01:00 2019
Rescheduled to run at Tue Oct  8 19:33:19 2019</pre>

<p>The PENDING child was rescheduled and it has executed becoming visible in the Job Logs</p>

<p><img src="./mediawiki/images/PN/Recurring-job-child.png"><br>
&nbsp;</p>

<h2>Orphaned recurring jobs</h2>

<p>An orphaned recurring job is one where all its underlying servers no longer exists.&nbsp; This code snippet will look for all visible recurring jobs in the system that are Audits and examine it&nbsp;to see if there are still associated servers.</p>

<pre>#!/opt/opsware/bin/python
from pytwist.twistserver import TwistServer
from pytwist.com.opsware.compliance.sco import AuditTaskRef

ts = TwistServer()
ts.authenticate('user','pass')
AuditTaskService = ts.compliance.sco.AuditTaskService

jobs = ts.search.SearchService.findObjRefs('(job_status = RECURRING) &amp; (job_visible = 1)','job')
for j in ts.job.JobService.getJobInfoVOs(jobs):
    if isinstance(j.taskRef, AuditTaskRef):
        auditTaskVO = AuditTaskService.getAuditTaskVO(j.taskRef)
        if len(auditTaskVO.targets) == 0:
            print "Job '%s' has Zero Servers" % j.ref
</pre>
</html>