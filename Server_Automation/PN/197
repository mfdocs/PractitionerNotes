<html><p>PlatformService provides read-only access to the platforms managed by SA. A platform describes the hardware architecture and operating system version of a server. Platforms are created during installations, upgrades or via pluggable platform APX installation. PlatformService provides methods for fetching and searching the pre-configured platform information.</p>

<p></p>

<h2>Show available platforms</h2>

<p>If you are trying to figure out the valid platform name for a search expression</p>

<pre>/opt/opsware/bin/python -c "from pytwist import twistserver; ps=twistserver.TwistServer().device.PlatformService; print sorted([(x.ref.id,x.name) for x in ps.getPlatformVOs(ps.findPlatformRefs(None))])"</pre>

<p>This list is also available from within the global shell.&nbsp; Note: The .id virtual file for an OS is the RoleClass, this is not its Platform_id&nbsp;as shown in the above example.</p>

<pre>$ ls /opsw/OS</pre>

<p></p>

<h2>Explore the platform family hierarchy</h2>

<p>The platform family is a hierarchical structure returned as an array of nodes by the call&nbsp;<tt>PlatformService.findPlatformFamilies()</tt>. This is easier to visualize as a tree with a count of the number of platforms each family supports.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver

def render(platformFamily):
    lines = []
    lines.append("%s - %s (%s)" % (platformFamily.platformFamilyName,
                                   platformFamily.displayName,
                                   len(platformFamily.platforms)))
    children = [x for x in families if x.parentName == platformFamily.platformFamilyName]
    for n, child in enumerate(children):
        child_tree = render(child)
        lines.append(" +- " + child_tree.pop(0))
        if n == len(children) - 1:
            lines.extend('    ' + line for line in child_tree)
        else:
            lines.extend(' |  ' + line for line in child_tree)
    return lines

ts = twistserver.TwistServer()
families = ts.device.PlatformService.findPlatformFamilies()
root = [x for x in families if x.parentName is None][0]
print '\n'.join(render(root))
</pre>

<p>Execution</p>

<pre>ALL - All Operating Systems (120)
 +- UNIX - All UNIX (102)
 |   +- AIX - All AIX (8)
 |   +- HP-UX - All HP-UX (5)
 |   +- LINUX - All Linux (77)
 |   |   +- CENTOS - All CentOS (5)
 |   |   +- OEL - All Oracle Enterprise Linux (7)
 |   |   +- REDHAT - All RedHat Linux (43)
 |   |   +- SUSE - All SuSE Linux (14)
 |   |   +- UBUNTU - All Ubuntu (6)
 |   |   +- XEN - All XenServer (2)
 |   +- SOLARIS - All Solaris (8)
 |   +- VMWARE - All VMware (4)
 +- WINDOWS - All Windows (18)</pre>
</html>