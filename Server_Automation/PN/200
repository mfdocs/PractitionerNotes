<html><p>A common question asked by SA users is what the differences between custom attributes and custom fields and when should each be used?</p>

<p><strong>Custom Attribute</strong></p>

<ol>
	<li>Values are always strings</li>
	<li>Can be used in a number of other features: Agent Tools, app config, audit + compliance, dynamic MRL, parameterized provisioning, and more</li>
	<li>Visible in the SA Client and OGSH (R/W access)</li>
	<li>Settable on a variety of objects: servers, server groups, customers, facilities, OS Installation Profiles, and SW Policies.</li>
	<li>These are inherited from more general objects to more specific objects.</li>
	<li>To create these, a user just needs write access to the server and can create, update, and delete custom attributes through any of the UIs.</li>
</ol>

<p><strong>Virtual Columns</strong></p>

<ol>
	<li>The fields are common across all servers - if a "bios_version" virtual column is created, it will be seen on all servers</li>
	<li>Values are typed, each custom field is either a SHORT_STRING, LONG_STRING, DATE, FILE, URI, or NUMBER. This allows custom fields to be used in more specific ways.</li>
	<li>Can't be used by all features mostly used for tracking info about servers.</li>
	<li>These are not inherited from one object to another.</li>
	<li>
	<p>To create these, a user with the "Manage Virtual Columns" permission must use the&nbsp;<strong>Manage Custom Field</strong>&nbsp;Web APX or PyTwist.</p>
	</li>
	<li>You can search and create device groups based on custom field values, including different matching criteria for different data types.</li>
</ol>

<p>So when should I use which?</p>

<p><strong>Custom Attributes are good:</strong></p>

<ul>
	<li>If the information you're storing doesn't apply to all (or most) servers. If I want to track the eeprom version on Sparc systems, creating a virtual column for this would be a bad idea because all servers would show a field called "eeprom version" in the UI and that doesn't make sense for non-Sparc machines.</li>
	<li>If you want to use them with certain other features.</li>
	<li>If you want to select from values at different levels of precedence in the inheritance hierarchy.</li>
</ul>

<p><strong>Virtual Columns are good:</strong></p>

<ul>
	<li>If you want typed data</li>
	<li>If you want to search or group based on the values</li>
	<li>If you want them to show up almost like regular fields in the properties section of the UI.</li>
</ul>

<p></p>

<h2>Create a virtual column</h2>

<p>Create a new virtual column called patch_exception to track servers that should not be patched.</p>

<pre>from pytwist import twistserver
from pytwist.com.opsware.custattr import VirtualColumnVO
from pytwist.com.opsware.common import NotFoundException

ts = twistserver.TwistServer()
VCS = ts.custattr.VirtualColumnService

vcName = 'patch_exception'
try:
    vcRef = VCS.findVirtualColumnRef(vcName)
except NotFoundException:
    vo = VirtualColumnVO()
    vo.displayName='Patch Exception'
    vo.name=vcName
    vo.type=VirtualColumnVO.TEXT
    vcRef = VCS.create(vo)
</pre>

<p></p>

<h2>Attaching virtual columns</h2>

<p>Continuing on from the code above that created or found our virtual column. Virtual columns can be attached to Servers or Device Groups. Attaching the virtual column to an object type will make it appear in the UI properties page as a Custom Field.</p>

<pre>ts.server.ServerService.attachVirtualColumn(vcRef)</pre>

<p>After this call the property panel of a server will display a new custom field.</p>

<p><img src="./mediawiki/images/PN/patch_exception-custom-field.png"></p>

<p></p>

<p></p>

<p></p>

<h2>Using a DATE virtual column type</h2>

<p>The DATE type is not handled well in the API and you need to jump through some hoops to make use of it.&nbsp; One of those hoops is that you need to use a native python class that can be serialized to a java.util.Date object.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.custattr import VirtualColumnVO
from pytwist.com.opsware.common import NotFoundException
import time

ts = twistserver.TwistServer()
VCS = ts.custattr.VirtualColumnService
Date = twistserver.makeLegacyObject('java.util', 'Date')

#### Create a virtual column ####
vcName = 'last_boot'
try:
    VCS.findVirtualColumnRef(vcName)
except NotFoundException:
    vo = VirtualColumnVO()
    vo.displayName='Last Boot'
    vo.name=vcName
    vo.type=VirtualColumnVO.DATE
    vcRef = VCS.create(vo)

    #### Attaching virtual columns ####
    ts.server.ServerService.attachVirtualColumn(vcRef)

#### Updating a virtual column value ####
serverRefs = ts.search.SearchService.findObjRefs('ServerVO.name = dc1.blue.local',
                                                'device')
if serverRefs:
   now = Date()
   now.time = long(time.time() * 1000) # expects milliseconds
   ts.server.ServerService.setCustomField(serverRefs[0], vcName, now)</pre>

<h2>Updating a virtual column value</h2>

<p>ServerVO.name vs ServerVO.hostName whats the difference when building a filter?</p>

<ul>
	<li>
	<p>The hostName is the FQDN of the server, its what reported by the&nbsp;<tt>hostname&nbsp;--fqdn</tt>&nbsp;command on Linux. This value is immutable in the GUI and it's the prefer query field.</p>
	</li>
	<li>The name is a mutable field and by default this is set to the hostName when the server is assimilated with an agent as users are free to change this value its not ideal for searches.</li>
</ul>

<p>Neither of these fields are guaranteed to be unique within SA and you should code with this in mind.</p>

<p></p>

<p><img src="./mediawiki/images/PN/hostname-name.png"></p>

<p></p>

<p>Assigning a value to our Custom Field.</p>

<p></p>

<pre>serverRefs = ts.search.SearchService.findObjRefs('ServerVO.hostName = dc1.blue.local','device')
if len(serverRefs) == 0:
   print "Server not found"
elif len(serverRefs) &gt; 1:
   print "Duplicate server found"
else:
   ts.server.ServerService.setCustomField(serverRefs[0], 'patch_exception','Y')
</pre>

<p>After execution:&nbsp;<img src="./mediawiki/images/PN/patch_exception-Y.png"></p>

<p></p>

<h2 id="Getting_field_values">Getting field values</h2>

<p>In this example, a Server has the following virtual column attached. Last Boot is of type DATE, the other is a STRING.</p>

<p><img alt="Annotation 2020-07-29 093950.png" src="http://wiki.local/BrettEngland/PyTwist?action=AttachFile&amp;do=get&amp;target=Annotation+2020-07-29+093950.png" title="Annotation 2020-07-29 093950.png"></p>

<p>If a Server object has a custom field called "Patch Except" you can fetch the value for a server like this:</p>

<pre dir="ltr" id="CA-f85099962ae4f030c0cd27c911672b5ffdfdcc21" lang="en">ref = ServerRef(91590002)
print ts.server.ServerService.getCustomField(ref, 'Patch Except')
</pre>

<p>Each object type that supports virtual columns (Custom fields) implements the&nbsp;<a href="http://wiki.local/CustomField">?</a>CustomField interface which exposes those methods.</p>

<p>To retrieve all the custom fields as a map (k,v pairs) you can do this.</p>

<pre dir="ltr" id="CA-11eca3a4598f3509e3e2c8b1f55a6a1b9be808fd" lang="en">ref = ServerRef(91590002)
namespace = 'DEFAULT'
print ts.server.ServerService.getCustomFields(ref, namespace)
</pre>

<p>Manipulating a DATE type VC will require a little more effort as the value is returned as an EPOCH.</p>

<pre dir="ltr" id="CA-0bc40ceee5afd4abb1c6caccadc4658e92a747c1" lang="en">epoch = ts.server.ServerService.getCustomField(ref, 'Last Boot')
print time.ctime(epoch)</pre>

<h2>Query a server based on a virtual column (custom field)</h2>

<p>Demonstration of how to query a server based on a virtual column value.</p>

<p>Why is this so complicated ? Consider this filter below. The problem is it will search across ALL virtual columns defined for the device matching any where its value is Y and that's not what we want.</p>

<pre>&gt;&gt;&gt; ts.search.SearchService.findObjRefs('vc_string_value = Y','device')
</pre>

<p>You need to search on the Virtual Column ID as part of the expression.</p>

<pre>&gt;&gt;&gt; ts.custattr.VirtualColumnService.findVirtualColumnRef('patch_exception')
&lt;Patch Exception (VirtualColumnRef:2020001) instance at 0x7f98e9a9c3b0&gt;
&gt;&gt;&gt; f.expression='((vc_string_value = Y) &amp; (vc_string_id = 2020001))'
</pre>

<p>You can query based on a Virtual Column like this too which is not documented.</p>

<pre>&gt;&gt;&gt; ts.search.SearchService.findObjRefs('vc_string_value = "vc_string_id=2020001" "Y"','device')
(&lt;dc1.blue.local (ServerRef:10001) instance at 0x7f98e9a9c050&gt;,)
&gt;&gt;&gt;
</pre>

<p>If we build the dynamic device group in the GUI and then dump it this is what we will see. Examine the rule.</p>

<pre>[root@dc1 VirtualColumns]# /opt/opsware/support/bin/dgDump 13730001
role_class_id: 13730001
role_class_full_name: Device Groups Public VC query
role_class_short_name: VC query
created_by: brett
created_dt: 20191015T20:55:56
modified_by: : brett
modified_dt: : 20191015T20:56:40
parent_role_class_id: 5030001
rule: ((vc_string_value IN ('vc_string_id=2020001', 'Y')))
rule (raw):(eJyllN9PwjAQx/8V3vrCQ8cQxMSHBYfBEEZAMMaQpnZFR2q7tINICP+717GNye/o632/d/fZ9W5rxJSciYglkfxAdxVcraAwMrGgKyLpF4dQX0kOUcMFZ4nSJAohWHfcJsbY6YFifSamzJrRgz/ptn3yOAzGAzLye377ORgicLHPSISaSzCtEfE8z/+ONTcmUvJpIaG/stLb+gjQfKejcb8b9G09XqSTXN+iNZqNVo52ZdMpWH+rp1DU+5wwQY2xLHsp10KVTEsqFpwkqzidXWdydFCdiItwYp1XU5VSQF5muWjJiEk05AHUfQ3XLNEedkp703RxTjuzpTLQVHSx6+biQSDRNKvhQKRVc25TZVOt/If79S+Q9X3I+iXI6eZCGxVzTeEGLFM33UKwqoVmnGwJtm/d+D2fcoWzrc8sV7GtedHyQp0tWtxtds4ILtfNH/6g4yhzp9+mxO6ug8HoxRv6Rf/yD+BU/x9cI1G6)
sql: SELECT DISTINCT dvc_id from  (select /* ResourceTypeView.01 */ devices.* from truth.devices where devices.DVC_ID in (((((select /* RA.device_base_view */ distinct devices.dvc_id from   (select /* RA.device_virtual_column_string */ d.dvc_id as dvc_id, vc.virtual_column_id as vc_string_id, vcv.text_value as vc_string_value from truth.devices d left join truth.device_virtual_column_values dvcv on d.dvc_id = dvcv.dvc_id left join truth.virtual_column_values vcv on dvcv.virtual_column_value_id = vcv.virtual_column_value_id left join (select * from truth.virtual_columns where data_type = 'SHORT_STRING') vc on vcv.virtual_column_id = vc.virtual_column_id) device_virtual_column_string,  truth.devices where devices.opsw_lifecycle != 'DELETED' and devices.dvc_id = device_virtual_column_string.dvc_id  and upper(device_virtual_column_string.vc_string_value) in ('Y') and device_virtual_column_string.VC_STRING_ID = 2020001)))))) devices</pre>

<p></p>

<h2>Create a dynamic device group based on virtual column filter</h2>

<p>To finish this rolling example a dynamic device group is created that will show all the servers with patch exceptions.</p>

<pre>from pytwist.com.opsware.search import Filter
from ptwwist.com.opsware.device import DeviceGroupVO
from pytwist.com.opsware.common import UniqueNameException

ref = ts.custattr.VirtualColumnService.findVirtualColumnRef('patch_exception')

#### Create a dynamic device group based on virtual column filter ###
ruleFilter = Filter()
ruleFilter.expression = 'vc_string_value IN ("vc_string_id=%s", "Y")' % ref.id

vo = DeviceGroupVO()
vo.parent = ts.device.DeviceGroupService.getPublicRoot()
vo.dynamic = True
vo.dynamicRule = ruleFilter
vo.shortName = 'Patch Exempt Servers'
vo.status = 'ACTIVE'
try:
    ts.device.DeviceGroupService.create(vo)
except UniqueNameException:
    print "Device group '%s' already exists" % vo.shortName
</pre>

<p>Execution will create the dynamic device group and we will see our single server with the Patch Exemption.</p>

<p><img src="./mediawiki/images/PN/patch_exception-dg.png"></p>
</html>