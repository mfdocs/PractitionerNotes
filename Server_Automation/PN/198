<p>CustomerService provides access to persistent customer objects in SA. Customers can be associated with managed servers, folders, and other objects. Customers are used as security boundaries with user groups.</p>

<p>&nbsp;</p>

<h2>Finding a customer</h2>

<p>A function that can be supplied with twistserver and either a customer name or the object ID and it will validate and return a CustomerRef.</p>

<pre>from pytwist.com.opsware.common import NotFoundException
from pytwist.com.opsware.locality import CustomerRef

def get_customer_ref(ts, customer):
    """
    Returns a CustomerRef given a customer name or id.  None if not found.
    """
    # The name of a customer can be all digits, try first with the name 
    # and then with the id
    cust_refs = ts.search.SearchService.findObjRefs('CustomerVO.displayName = "%s"' % customer, "customer")
    if len(cust_refs) == 1:
        return cust_refs[0]
    elif customer.isdigit():
        try:
            cust_ref = CustomerRef(long(customer))
            ts.locality.CustomerService.getCustomerVO(cust_ref)
            return cust_ref
        except NotFoundException:
            pass
    return None
</pre>

<p>&nbsp;</p>

<h2>Creating customers</h2>

<p>This example will create a set of customers attached to every facility. The&nbsp;<tt>name</tt>&nbsp;field aka&nbsp;<tt>Short&nbsp;Name</tt>&nbsp;must adhere to SA naming rules and the field will be automatically populated.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.locality import CustomerVO
from pytwist.com.opsware.common import UniqueNameException
import re

ts = twistserver.TwistServer()
shortChars = re.compile('[^0-9A-Z\-_]')            # allowed chars
sanitize = lambda s: shortChars.sub('',s.upper())  # remove non-allowed
allFacilityRefs = ts.search.SearchService.findObjRefs(None,'facility')

for customer in ['Mr Red','Mr Blue','Mr Green','Mr Pink']:
    VO = CustomerVO()
    VO.name = sanitize(customer)
    VO.displayName = customer
    VO.facilities = allFacilityRefs
    try:
        nVO = ts.locality.CustomerService.create(VO)
        print "Created customer: %s" % nVO.ref
    except UniqueNameException:
        print "Customer '%s' already exists" % customer
</pre>

<p>Execution</p>

<pre>[root@dc1 CustomerService]# ./createCustomers.py
Created customer: Mr Red (CustomerRef:190001)
Created customer: Mr Blue (CustomerRef:200001)
Created customer: Mr Green (CustomerRef:210001)
Created customer: Mr Pink (CustomerRef:220001)</pre>

<p>&nbsp;</p>

<h2>Remove a facility relationship</h2>

<p>Assuming there is a facility named CHARLIE we will detach it from a list of customers</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver

ts = twistserver.TwistServer()
FacilityRefs = ts.search.SearchService.findObjRefs('FacilityVO.name = CHARLIE','facility')

for customer in ['Mr Red','Mr Blue','Mr Green','Mr Pink']:
    refs = ts.search.SearchService.findObjRefs('CustomerVO.displayName = "%s"' % customer,'customer')
    print "Detaching from (%s) %s" % (refs[0], customer)
    ts.locality.CustomerService.removeFacilities(refs[0],FacilityRefs)
</pre>

<p>Execution</p>

<pre>[root@dc1 CustomerService]# ./detachFacility.py
Detaching from (Mr Red (CustomerRef:230001)) Mr Red
Detaching from (Mr Blue (CustomerRef:240001)) Mr Blue
Detaching from (Mr Green (CustomerRef:250001)) Mr Green
Detaching from (Mr Pink (CustomerRef:260001)) Mr Pink</pre>
