<p>The&nbsp;<tt>SearchService</tt>&nbsp;interface is used to search for objRefs and to manage/assist searching for objRefs. Typical search involves constructing a&nbsp;<tt>Filter</tt>&nbsp;object, which consists of a filter string and a searchable type, as an argument. The method&nbsp;<tt>getSearchableTypes</tt>&nbsp;returns a list of search types which can be used on the method&nbsp;<tt>getSearchableAttributes</tt>&nbsp;to get the list of searchable attributes for the type. With both the search type and the searchable attribute, the method&nbsp;<tt>getSearchableAttributeOperators</tt>&nbsp;can be used to get a list of suitable search operators on the particular attribute. Once you have the search type, searchable attributes and operators, then you're ready to construct the&nbsp;<tt>Filter</tt>&nbsp;object.</p>

<p>Below is an example of a Filter object:</p>

<pre> FilterStr:      ((Device.use IN "UNKNOWN" "PRODUCTION" "escaped\"double\"quote\"example") &amp; 
                  (Device.cpuCount GREATER_THAN 1) &amp; 
                  (Device.modifiedDt IN 1146952526855 1126552826955))
 searchableType: device</pre>

<p>Special notes about the grammar for the common-search filter expression:</p>

<ul>
	<li>The same junction type must be used within each expression junction.</li>
</ul>

<p>&nbsp;</p>

<pre>    valid:   ((x = y) &amp; (a = y) &amp; (x = a))
    invalid: ((x = y) &amp; (a = y) | (x = a))</pre>

<ul>
	<li>A text value needs to have double-quotes surrounding it but a number does not.
	<ul>
		<li>Any double-quote that is part of the value must be escaped with a backslash.</li>
	</ul>
	</li>
</ul>

<p>&nbsp;</p>

<pre>    valid number:  123.456

    valid text:    "abc"
    invalid text:  abc

    valid text:    "ab\"c"
    invalid text:  "ab"c"
    invalid text:  ab"c</pre>

<ul>
	<li>Parentheses must surround groups of expressions which will junction with another group of expressions</li>
</ul>

<p>&nbsp;</p>

<pre>    valid grouping:   ((x = y) &amp; (a = b)) | (n = r)
    invalid grouping: (x = y) &amp; (a = b) | (n = r)</pre>

<p>Common-search filter grammar:</p>

<pre> &lt;filter&gt;                      ::= (&lt;expression-junction&gt;)+
 &lt;expression-junction&gt;         ::= &lt;expression-list-open&gt; &lt;junction&gt; 
                                   (&lt;expression&gt;)+ &lt;expression-list-close&gt;
 &lt;expression&gt;                  ::= &lt;expression-open&gt; &lt;attribute&gt; 
                                   &lt;general-delimiter&gt; &lt;operator&gt; 
                                   &lt;general-delimiter&gt; &lt;value-list&gt; 
                                   &lt;expression-close&gt;

 &lt;attribute&gt;                   ::= &lt;resource_field&gt;
 &lt;vo_member&gt;                   ::= &lt;text&gt;
 &lt;resource_field&gt;              ::= &lt;text&gt;
 &lt;value-list&gt;                  ::= (&lt;double-quote&gt; &lt;text&gt; &lt;double-quote&gt;)* 
                                   | (&lt;number&gt;)*

 &lt;text&gt;                        ::= [a-z] [A-Z] [0-9]
 &lt;number&gt;                      ::= [0-9] [.]

 &lt;junction&gt;                    ::= &lt;union-junction&gt; | &lt;intersect-junction&gt;
 &lt;union-junction&gt;              ::= '|'
 &lt;intersect-junction&gt;          ::= '&amp;'
 &lt;expression-list-open&gt;        ::= '('
 &lt;expression-list-close&gt;       ::= ')'
 &lt;expression-open&gt;             ::= '(' | '{'
 &lt;expression-close&gt;            ::= '(' | '}'
 &lt;general-delimiter&gt;           ::= &lt;whitespace&gt;
 &lt;whitespace&gt;                  ::= ' '
 &lt;double-quote&gt;                ::= '"'
 &lt;escape-characte&gt;&gt;            ::= '\'

 &lt;operator&gt;                    ::= 
            &lt;equal_to&gt; | &lt;not_equal_to&gt; | &lt;not_in&gt; |
            &lt;in&gt; | &lt;greater_than&gt; | &lt;less_than&gt; | 
            &lt;greater_than_or_equal&gt;&gt; | &lt;less_than_or_equal&gt; | 
            &lt;greater_than_or_equal&gt; | &lt;less_than_or_equal&gt; | &lt;begins_with&gt; | 
            &lt;ends_with&gt; | &lt;contains&gt; | &lt;not_contains&gt; | 
            &lt;in_or_below&gt; | &lt;in_or_above&gt; | &lt;between&gt; | 
            &lt;not_between&gt; | &lt;not_begins_with&gt; | &lt;not_ends_with&gt; |
            &lt;is_today&gt; | &lt;is_not_today&gt; | &lt;greater_than_today&gt; | 
            &lt;greater_than_or_equal_today&gt; | &lt;less_than_today&gt; | 
            &lt;less_than_or_equal_today&gt; | &lt;within_last_days&gt; | 
            &lt;within_last_months&gt; | &lt;within_next_days&gt; | &lt;within_next_months&gt;| 
            &lt;not_within_last_days&gt; | &lt;not_within_last_months&gt; | 
            &lt;not_within_next_days&gt; | &lt;not_within_next_months&gt; |
 &lt;contains_or_below&gt; | &lt;contains_or_above&gt;
 &lt;equal_to&gt;                    ::= '='    | 'EQUAL_TO'
 &lt;not_equal_to&gt;                ::= '!='   | '&lt;&gt;' | 'NOT_EQUAL_TO'
 &lt;in&gt;                          ::= '='    | 'IN'
 &lt;not_in&gt;                      ::= '!='   | '&lt;&gt;' | 'NOT_IN'
 &lt;greater_than&gt;                ::= '&gt;'    | 'GREATER_THAN'
 &lt;less_than&gt;                   ::= '&lt;'    | 'LESS_THAN'
 &lt;greater_than_or_equal&gt;       ::= '&gt;='   | 'GREATER_THAN_OR_EQUAL'
 &lt;less_than_or_equal&gt;          ::= '&lt;='   | 'LESS_THAN_OR_EQUAL'
 &lt;begins_with&gt;                 ::= '=*'   | 'BEGINS_WITH'
 &lt;ends_with&gt;                   ::= '*='   | 'ENDS_WITH'
 &lt;contains&gt;                    ::= '*=*'  | 'CONTAINS'
 &lt;not_contains&gt;                ::= '*&lt;&gt;*' | 'NOT_CONTAINS'
 &lt;in_or_below&gt;                 ::= 'IN_OR_BELOW'
 &lt;in_or_above&gt;                 ::= 'IN_OR_ABOVE'
 &lt;between&gt;                     ::= 'BETWEEN'
 &lt;not_between&gt;                 ::= 'NOT_BETWEEN'
 &lt;not_begins_with&gt;             ::= 'NOT_BEGINS_WITH'
 &lt;not_ends_with&gt;               ::= 'NOT_ENDS_WITH'
 &lt;is_today&gt;                    ::= 'IS_TODAY'
 &lt;is_not_today&gt;                ::= 'IS_NOT_TODAY'
 &lt;within_last_days&gt;            ::= 'WITHIN_LAST_DAYS'
 &lt;within_last_months&gt;          ::= 'WITHIN_LAST_MONTHS'
 &lt;within_next_days&gt;            ::= 'WITHIN_NEXT_DAYS'
 &lt;within_next_months&gt;          ::= 'WITHIN_NEXT_MONTHS'
 &lt;not_within_last_days&gt;        ::= 'NOT_WITHIN_LAST_DAYS'
 &lt;not_within_last_months&gt;      ::= 'NOT_WITHIN_LAST_MONTHS'
 &lt;not_within_next_days&gt;        ::= 'NOT_WITHIN_NEXT_DAYS'
 &lt;not_within_next_months&gt;      ::= 'NOT_WITHIN_NEXT_MONTHS'
 &lt;contains_or_below&gt;           ::= 'CONTAINS_OR_BELOW'
 &lt;contains_or_above&gt;           ::= 'CONTAINS_OR_ABOVE'</pre>

<p>Using either the Twister API interface or some pytwist we can start to explore what kind of objects are searchable</p>

<pre>&gt;&gt;&gt; ts.search.SearchService.getSearchableTypes()
('platform', 'apx_version', 'chef_recipe', 'software_policy', 'audit_policy', 'os_build_plan', 'os_node', 'audit_trail_event', 'apx_interface', 'patch_policy', 'patch_unit', 'policy_override', 'customer', 'cust_attr_namespace', 'sitemap_result', 'job', 'snapshot_task', 'customer_admin_role', 'report_result', 'user', 'software_unit', 'audit_result', 'business_application', 'server_module', 'user_role', 'server_script', 'realm', 'device_group', 'facility', 'audit_task', 'ogfs_script', 'v12n_virtual_machine', 'snapshot_result', 'os_sequence', 'v12n_general_leaf_item', 'audit_exclusion', 'saved_search', 'cml', 'configuration', 'folder', 'device', 'report', 'v12n_vmw_ds', 'admin_role', 'apx', 'manager', 'scocheck')
&gt;&gt;&gt;
</pre>

<p>Each searchable type in turn has a list of attributes we can search on</p>

<pre>&gt;&gt;&gt; ts.search.SearchService.getSearchableAttributes('customer')
('CustomerVO.displayName', 'CustomerVO.name', 'CustomerVO.pK', 'customer_dvc_id', 'customer_rc_id', 'customer_rc_name')
&gt;&gt;&gt;
</pre>

<ul>
	<li>To produce a handy reference guide of all searchable types and their attributes:
	<pre>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; ss=ts.search.SearchService
&gt;&gt;&gt; typeAttributeMap = {type: ss.getSearchableAttributes(type) for type in ss.getSearchableTypes()}
&gt;&gt;&gt; with open('typeAttributeMap.txt','w') as f:
...   pprint.pprint(typeAttributeMap, stream=f)
&gt;&gt;
</pre>
	</li>
</ul>

<p>What kinds of operations can we do with the customer and CustomerVO.name attibute</p>

<pre>&gt;&gt;&gt; ts.search.SearchService.getSearchableAttributeOperators('customer','CustomerVO.name')
('IS_NOT_NULL', 'IN', 'NOT_ENDS_WITH', 'BEGINS_WITH', 'EQUAL_TO', 'NOT_IN', 'CONTAINS', 'NOT_EQUAL_TO', 'NOT_CONTAINS', 'IS_NULL', 'ENDS_WITH', 'NOT_BEGINS_WITH')
</pre>

<p>Building a search filter to locate a customer by their name</p>

<pre>&gt;&gt;&gt; from pytwist.com.opsware.search import Filter
&gt;&gt;&gt; f = Filter()
&gt;&gt;&gt; f.objectType = 'customer'
&gt;&gt;&gt; f.expression = 'CustomerVO.name EQUAL_TO CustomerA'
&gt;&gt;&gt; myCustomers = ts.search.SearchService.findObjRefs(f)
</pre>

<p>Using the overloaded API avoids the Filter construction. Replacing the string EQUAL_TO with the = symbol makes the expression more concise.</p>

<pre>&gt;&gt;&gt; myCustomers = ts.search.SearchService.findObjRefs('CustomerVO.name = CustomerA','customer')
&gt;&gt;&gt; myCustomers
(&lt;CustomerA (CustomerRef:30001) instance at 0x7ff7cae839e0&gt;,)
&gt;&gt;&gt;
</pre>

<p>The result returned will be an array of CustomerRef objects as the search may match more than 1 customer, in our case we know it can only match one. Using these references we can then lookup the VO (Value Object).</p>

<pre>&gt;&gt;&gt; VOs = ts.locality.CustomerService.getCustomerVOs(myCustomers)
&gt;&gt;&gt; VOs
(&lt;pytwist.com.opsware.locality.CustomerVO instance at 0x7ff7cae83cf8&gt;,)
&gt;&gt;&gt; myCustomer = VOs[0]
&gt;&gt;&gt; vars(myCustomer)
{'status': 'ACTIVE', 'businessAcctId': -1L, 'displayName': 'CustomerA', '__OPSW_CHANGED_ATTRS__': {}, 'authDomain': 'N/A', 'dirtyAttributes': (), 'facilities': (&lt;alpha (FacilityRef:1) instance at 0x7ff7cae83dd0&gt;,), 'internal': False, 'modifiedBy': 'brett', 'modifiedDate': 1552395688L, 'createdBy': 'brett', 'createdDate': 1551899863L, 'logChange': True, 'ref': &lt;CustomerA (CustomerRef:30001) instance at 0x7ff7cae83d88&gt;, 'name': 'CUSTOMERA'}
</pre>

<p>Internally the VO is represented as a dictionary and we can access the members by using DOT notation.</p>

<pre>&gt;&gt;&gt; myCustomer.status
'ACTIVE'
</pre>

<p>As mentioned prior in the pytwist quirks section java.util.Date objects are converted to seconds since epoch and we have two of those; createdDate and modifiedDate. Use of the time package will be required to examine them in a human readable format.</p>

<pre>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.ctime(myCustomer.createdDate)
'Wed Mar  6 19:17:43 2019'
</pre>

<p>Another interesting method in the search service is asking the Twist what SQL it would construct for the supplied expression.</p>

<pre>&gt;&gt;&gt; from pytwist.com.opsware.search import Filter
&gt;&gt;&gt; f = Filter()
&gt;&gt;&gt; f.objectType = 'customer'
&gt;&gt;&gt; f.expression = 'CustomerVO.name EQUAL_TO CustomerA'
&gt;&gt;&gt; ts.search.SearchService.getFilterSQL(f)
"select /* FilterParser.02 */ distinct accounts.acct_id, accounts.display_name from  (select /* ResourceTypeView.01 */ accounts.* from truth.accounts where accounts.ACCT_ID in ((select /* RA.customer_base_view */ distinct accounts.acct_id from  truth.accounts where 1=1))) accounts , ((select /* FilterParser.04 */ customer_acct_ivw.acct_id from (select /* RA.customer_acct_ivw */ accounts.acct_id, accounts.acct_id as customer_account_id, accounts.acct_name as customer_account_name, accounts.display_name as customer_account_display_name from truth.accounts) customer_acct_ivw where upper(customer_acct_ivw.customer_account_name) = 'CUSTOMERA')) search_view where accounts.acct_id=search_view.acct_id and accounts.acct_id in (select /* RA.customer_base_view */ distinct accounts.acct_id from  truth.accounts where 1=1 )"
</pre>

<p>This can be useful when trying to understand why a query is running sub-optimally in the database and from where it might have originated.</p>

<p>&nbsp;</p>

<h2>Special search expressions</h2>

<p>There are two search expressions not documented in the Twister javadoc API page for the SearchService and those are IS_NULL and IS_NOT_NULL. Due to a quirk in the way in which the expression parser is written all expressions are required to be in the format&nbsp;<em><strong>operand operator operand</strong></em>. This posses a problem for monotonic operators such as those just mentioned. The workaround, or hack if you like, is to supply an arbitrary 2nd operand. The convention is to use 0 as that operand.</p>

<pre>&gt;&gt;&gt; allCustomers = ts.search.SearchService.findObjRefs('CustomerVO.name IS_NOT_NULL 0','customer')
</pre>

<p>&nbsp;</p>

<h2>Method orthogonality</h2>

<p>Using the SearchService its possible to search on all the known object types withing the system using method calls such as</p>

<pre>&gt;&gt;&gt; from pytwist.com.opsware.search import Filter
&gt;&gt;&gt; f = Filter()
&gt;&gt;&gt; f.objectType = 'customer'
&gt;&gt;&gt; f.expression = 'CustomerVO.name EQUAL_TO CustomerA'
&gt;&gt;&gt; myCustomers = ts.search.SearchService.findObjRefs(f)
</pre>

<p>In each object type there will be a service with a corresponding findRefs method</p>

<p>Although we used the SearchService to find the customer ref each object interface service will also have a Find method. For instance the CustomerService will have the following method</p>

<pre>findCustomerRefs(Filter filter)</pre>

<p>When we use the objects Service class to build a Filter the objectType is not required as the API knows what type of object we are looking for.</p>

<pre>&gt;&gt;&gt; f = Filter()
&gt;&gt;&gt; f.expression = 'CustomerVO.name = "CustomerA"'
&gt;&gt;&gt; myCustomers = ts.locality.CustomerService.findCustomerRefs(f)&nbsp;</pre>

<p>&nbsp;</p>

<h2>Searching on date time fields</h2>

<p>The time search fields are expressed in units of epoch milliseconds.&nbsp; The following will find all jobs that have started in the last hour.&nbsp; When accessing job information we must authenticate as a user, core authentication will not give us access to job results.</p>

<pre>#!/opt/opsware/bin/python
from pytwist.twistserver import TwistServer
import time
ts = TwistServer()
ts.authenticate("jyaya","password")
SS = ts.search.SearchService
oneHourAgo = long(time.time() - 3600) * 1000
jobRefs = SS.findObjRefs('(JobInfoVO.startDate &gt; %d)' % oneHourAgo,'job')</pre>

<h2>Search type to service mapping</h2>

<p>The return results of the call&nbsp;<tt>SearchService.getSearchableType()</tt>&nbsp;will have a corresponding Service that can be used instead of the generic&nbsp;<tt>FindObjRefs</tt>&nbsp;call. This table maps those searchable types to the package, minus the com.opsware component, to their Service.</p>

<table cellspacing="0" style="border-collapse:collapse">
	<tbody>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Searchable Type</strong></p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p><strong>Service Interface</strong></p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>admin_role</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>fido.AdminRoleService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>apx</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>apx.APXService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>apx_interface</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>apx.APXInterfaceService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>apx_version</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>apx.APXVersionService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>audit_exclusion</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.AuditExclusionService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>audit_policy</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.AuditPolicyService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>audit_result</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.AuditResultService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>audit_task</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.AuditTaskService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>customer</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>locality.CustomerService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>customer_admin_role</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>fido.CustomerAdminRoleService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>device</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>server.ServerService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>device_group</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>device.DeviceGroupService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>facility</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>locality.FacilityService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>folder</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>folder.FolderService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>job</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>job.JobService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>ogfs_script</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>script.OGFSScriptService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>os_build_plan</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>osprov.OSBuildPlanService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>os_sequence</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>osprov.OSSequenceService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>patch_policy</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>swmgmt.PatchPolicyService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>patch_unit</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>pkg.PatchService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>platform</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>device.PlatformService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>policy_override</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.AuditExclusionService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>realm</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>locality.RealmService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>saved_search</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>savedsearch.SavedSearchService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>scocheck</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.SCOCheckService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>server_module</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>smo.ServiceModuleService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>server_script</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>script.ServerScriptService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>snapshot_result</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.SnapshotResultService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>snapshot_task</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>compliance.sco.SnapshotTaskService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>software_policy</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>swmgmt.SoftwarePolicyService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>software_unit</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>pkg.UnitService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>user_role</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>fido.UserRoleService</p>
			</td>
		</tr>
		<tr>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>v12n_virtual_machine</p>
			</td>
			<td style="border-color:#adb9cc; border-style:solid; border-width:1pt">
			<p>v12.VirtualServerService</p>
			</td>
		</tr>
	</tbody>
</table>
