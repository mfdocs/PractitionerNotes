<html><p>ServerService provides access to the servers managed by Server Automation.</p>

<p></p>

<h2>Updating a server property</h2>

<p>Find a server and examine its stage property updating it to be LIVE if its not already.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.search import Filter

ts = twistserver.TwistServer()
ServerService = ts.server.ServerService
ts.authenticate("user","password")
f = Filter()
f.expression = 'ServerVO.name = win2003-bt7xcc6'
foundServers = ServerService.findServerRefs(f)
if foundServers:
    serverRef = foundServers[0]
    vo = ServerService.getServerVO(serverRef)
    print "Current stage -&gt; %s" % vo.stage
    if vo.stage != 'LIVE':
        print "Updating to LIVE"
        vo.stage = 'LIVE'
        ServerService.update(serverRef, vo, False, False)
</pre>

<p>Execution:</p>

<pre>[root@dc1 demo]# ./updateServerState.py
Current stage -&gt; UNKNOWN
Updating to LIVE</pre>

<p>This is the pattern used to update a property of any Value Object. If multiple properties are to be updated a single update should be issued at the completion of modifying the VO object in memory. A dirty flag can be set to indicate if an update is required.</p>

<p>Lets talk about this statement some more</p>

<pre>        ServerService.update(serverRef, vo, False, False)
</pre>

<p>The two Boolean values are force and refresh in that order:</p>

<ul>
	<li>
	<p><strong>force</strong>&nbsp;- If true, this operation will overwrite edits made since the VO was first read. Otherwise, if this operation detects that the object has been edited since the VO was first read, it throws a ModifiedException. An object is considered edited if its modifiedDate is greater than VO.modifiedDate.</p>
	</li>
	<li>
	<p><strong>refetch</strong>&nbsp;- true if update is to return the updated data representation of the server object.</p>
	</li>
</ul>

<p>As the return value of the update statement is not required refetch should be set to False to avoid the Twist having to refetch the object which incurs a minor overhead.</p>

<p>The force flag should be used with caution as its not just the stage change that will be forced back onto the VO if it has been changed by somebody else in the system. The exact state that that the server was in when it was read will written back potentially overwriting somebody else's changes. It would be better that we handle the exception and re-read the server and check our attribute again.</p>

<p>With that an mind we would code this:</p>

<pre>from pytwist.com.opsware.common import ModifiedException, NotFoundException
...
if foundServers:
    serverRef = foundServers[0]
    while True:
       vo = ServerService.getServerVO(serverRef)
       print "Current stage -&gt; %s" % vo.stage
       if vo.stage != 'LIVE':
           print "Updating to LIVE"
           vo.stage = 'LIVE'
           try:
              ServerService.update(serverRef, vo, False, False)
           except ModifiedException:
              print "VO changed after we read it.  Retrying..."
              continue
           except NotFoundException:
              print "Server was deleted after we read it and before we could update it."
       break
</pre>

<p>Of course you could just risk it and not bother with the exception handling but if you are trying to build robust production code its something that should be taken into consideration especially if there is a long period between the read and update where the data could mutate. Also note that not all attributes of the VO are mutable. The Java doc manage page for the update method in the&nbsp;<tt>ServerService</tt>&nbsp;lists those that may be updated.</p>

<p></p>

<h2>Decommission</h2>

<p>To decomission a server we use the&nbsp;<tt>decommission(ServerRef)</tt>&nbsp;method of the ServerService. By way of example a script to purge servers by their Object ID (mid - Machine ID)</p>

<pre>#!/opt/opsware/bin/python
import sys
from pytwist import twistserver
from pytwist.com.opsware.server import ServerRef
from pytwist.com.opsware.common import NotFoundException

if len(sys.argv) &lt; 2:
    print "Usage: purgeServers &lt;id_file&gt;"
    sys.exit(0)

ts = twistserver.TwistServer()
ts.authenticate('user','password')

with open(sys.argv[1],"r") as f:
    for line in f.readlines():
        try:
            mid = long(line.strip())
            try:
                ts.server.ServerService.decommission(ServerRef(mid))
            except NotFoundException:
                print "Server %s not found" % mid
                continue
            print "Decomissioning server %s" % mid
        except:
            print "Invalid ID - %s" % line
</pre>

<p>Data file: id.txt</p>

<pre>91170001
91180001
91190001</pre>

<p>Execution</p>

<pre>[root@dc1 demo]# ./purgeServers.py id.txt
Decomissioning server 91170001
Decomissioning server 91180001
Server 91190001 not found</pre>

<p>This could easily be modified to use the&nbsp;<tt>findServerRefs()</tt>&nbsp;method and a&nbsp;<tt>Filter</tt>&nbsp;to find a server by its name, ip address or some other attribute to obtain the&nbsp;<tt>ServerRef</tt>.</p>

<p></p>

<h2>Update custom attributes</h2>

<p>Multiple custom attributes can be updated in a single call by supplying a dictionary of name/value pairs.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.server import ServerRef

ts = twistserver.TwistServer()

CAMap = {'hello':'world', 'foo':'bar'}
ref = ServerRef(10001)
ts.server.ServerService.setCustAttrs(ref, CAMap)
</pre>

<p></p>

<h2>Fetch custom attributes</h2>

<p>When fetching custom attribute you need to qualify if you want to fetch with regards to inheritance or not. Calculating the inherited attributes is more compute intensive than not doing so if you don't require the inherited data you should set the&nbsp;<tt>useScope</tt>&nbsp;value to False.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.server import ServerRef
ts = twistserver.TwistServer()
ref = ServerRef(10001)
print ts.server.ServerService.getCustAttrs(ref, None, False)
</pre>

<p>Execution with only return key/values that have a&nbsp;<strong>Locally Specified Value</strong></p>

<pre>[root@dc1 ServerService]# ./fetchCustAttr.py
{'hello': 'world', 'AGENT_STAGE_STATUS': '70.0.76793.1', 'foo': 'bar', '__OPSW_reachability_time': '1571140803.85'}</pre>

<p></p>

<p><img src="./mediawiki/images/PN/ServerCustomAttributes.png"></p>

<p></p>

<p>Those custom attributes beginning with&nbsp;<tt>__OPSW</tt>&nbsp;are private and should not be tampered with.</p>

<p></p>

<pre>&gt;&gt;&gt; from pytwist.com.opsware.custattr import CustomAttribute
&gt;&gt;&gt; CustomAttribute.OPSWARE_PRIVATE_KEY_PREFIX
'__OPSW'
</pre>

<p></p>

<h2>Encrypted custom attributes</h2>

<p>Quite often there is a need to store sensitive data such as password information into a custom attribute. SA provides the ability to create your own namespace and have the storage of information into it be transparently encrypted/decrypted when saving/restoring from the database. These custom namespaces are not visible in the UI and may only be accessed pro grammatically.</p>

<p>In this example we create a PASSWORD namespace and indicate that all attributes put into it should be encrypted when stored to the database. Although we are attaching the custom attributes to a Server this same approach works with; Customers, DataCenters, DeviceGroups, OS Build Plans and Software Policies.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.server import ServerRef
from pytwist.com.opsware.custattr import CustAttrNamespaceVO

ts = twistserver.TwistServer()
SS = ts.search.SearchService

nsName = 'PASSWORDS'
nsRef = SS.findObjRefs('CustAttrNamespaceVO.name = '+nsName,
                       'cust_attr_namespace')
if not nsRef:
    vo = CustAttrNamespaceVO()
    vo.storageType = CustAttrNamespaceVO.STORAGE_TYPE_ENCRYPTED
    vo.name = nsName
    vo.description = 'Password data'
    ts.custattr.CustAttrNamespaceService.create(vo)

ref = ServerRef(10001)

# Setting an attribute key/value pair
ts.server.ServerService.setCustAttr(ref,nsName,'password','its a secret')

# Getting an attribute value
print ts.server.ServerService.getCustAttr(ref,nsName,'password',False)
</pre>

<p></p>

<h2>Running a communication test</h2>

<p>The call to create a job that will execute a communication test on a group of servers is a single call. Its supplied with a list of servers to run against.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
ts = twistserver.TwistServer()
serverRefs = ts.search.SearchService.findObjRefs(
    'ServerVO.osVersion = "Linux 7SERVER-X86_64" ',
    'device')
jobRef = ts.server.ServerService.runAgentCommTest(serverRefs)
print "Created comm test job %s" % jobRef
</pre>

<p>Execution</p>

<pre>[root@dc1 ServerService]# ./commsTest.py
Created comm test job Communication Test (JobRef:143700001)</pre>

<p></p>

<h2>Display communication test results</h2>

<p>Textual representation of what is displayed in the GUI interface</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.job import JobRef
from pytwist.com.opsware.server import CommTestJobResult
ts = twistserver.TwistServer()
jobRef = JobRef(143700001)
jr = ts.job.JobService.getResult(jobRef)
if isinstance(jr,CommTestJobResult):
    print "%s of %s completed" % (jr.totalCompleted,jr.totalDvcs)
    print "%30s AGT CRP  CE DAE SWR  MD" % " "
    for je in jr.elemResultInfo:
        agt = je.agentReachable # AGenT
        crp = je.cryptoOk       # CRyPto
        ce = je.wayReachable    # Command Engine
        dae = je.spinReachable  # Data Access Engine
        swr = je.wordReachable  # SoftWare Repository
        md = je.midOk           # Machine iD
        result = map(lambda i: {'None':'-','0':'O'}.get(i,'X'),
                     [agt,crp,ce,dae,swr,md])
        print "%30s  %s" % (je.name,'   '.join(result))
    print "Failures: %s" % jr.totalFailed
</pre>

<p>Execution</p>

<pre>[root@dc1 ServerService]# ./commTestResults.py
5 of 5 completed
                               AGT CRP  CE DAE SWR  MD
                dc1.blue.local  O   O   O   O   O   O
               sat1.blue.local  O   O   O   O   O   O
               dc1.green.local  X   -   -   -   -   -
            zuludb.green.local  X   -   -   -   -   -
            charlie.pink.local  O   O   O   O   O   O
Failures: 2</pre>

<p>Note the order is different as the GUI is sorted by hostname.</p>

<p><img src="./mediawiki/images/PN/CommTestResult.png"></p>

<p></p>

<p></p>

<p></p>

<h2>Rebooting a server</h2>

<p>To immediately reboot a server the following can be performed. The first argument to startReboot is a list of ServerRefs in this example its a list of one. Even thou no schedule or notification is required empty class objects must be supplied. Examine&nbsp;"Scheduling a server script against servers"&nbsp;to see how these could be populated.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.server import ServerRef
from pytwist.com.opsware.job import JobNotification, JobSchedule
ts = twistserver.TwistServer()
jobRef = ts.server.ServerService.startReboot([ServerRef(112640001)],
                                             "Immediate Reboot",
                                             JobNotification(),
                                             JobSchedule())
print jobRef
</pre>

<p>Execution</p>

<pre>Reboot Servers (JobRef:143820001)</pre>

<p></p>

<h2>Assign a customer</h2>

<p>The GUI interface does not provide a mechanism to bulk assign a customer to a list of servers. This can be easily automated with pytwist.&nbsp;Locate all servers that belong to the customer&nbsp;<strong>not assigned</strong>&nbsp;and move them to the customer&nbsp;<strong>Mr Red</strong>.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver

ts = twistserver.TwistServer()
findObjRefs = ts.search.SearchService.findObjRefs
serverRefs = findObjRefs ('device_customer_displayname = "Not Assigned"','device')
# Matches one only customer.
customerRefs = findObjRefs ('CustomerVO.displayName = "Mr Red"','customer') 
if serverRefs and customerRefs:
    for serverRef in serverRefs:
        ts.server.ServerService.setCustomer(serverRef, customerRefs[0])</pre>
</html>