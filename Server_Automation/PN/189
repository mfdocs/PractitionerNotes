<html><p>Device groups are containers for device references. Device groups enable end users to categorize devices, to perform the same operation on multiple devices, and to control device access with security permissions.</p>

<p>Device groups are hierarchical: A device group can contain other device groups. Also, a device can belong to more than one device group. Device groups are either public or private. Public device groups are arranged hierarchically, starting at the top with the public device group root. Likewise, private device groups are under the private device group root.</p>

<p>Device groups are static or dynamic. To change the membership of a static device group, you indicate specific devices with the&nbsp;<tt>addDevice</tt>&nbsp;or&nbsp;<tt>removeDevice</tt>&nbsp;methods. The membership of a dynamic device group depends on its rule, which is similar to a search expression. You specify a rule with the&nbsp;<tt>setDynamicRule</tt>&nbsp;method.</p>

<p></p>

<h2>Exploring a device group structure</h2>

<p>Diving right in to investigate several DeviceGroupService methods;&nbsp;<tt>getChildren,&nbsp;getDeviceGroupVO,&nbsp;getDeviceGroupByPath</tt>&nbsp;by way of an example that prints an ASCII tree from a supplied device group root path.</p>

<pre>#!/opt/opsware/bin/python
import sys
from pytwist import twistserver
from pytwist.com.opsware.common import NotFoundException

ts = twistserver.TwistServer()
DGS = ts.device.DeviceGroupService

def render(ref):
    lines = []
    vo = DGS.getDeviceGroupVO(ref)
    lines.append(vo.shortName)
    children = DGS.getChildren(ref)
    for n, child in enumerate(children):
        child_tree = render(child)
        lines.append(" +- " + child_tree.pop(0))
        if n == len(children) - 1:
            lines.extend('    ' + line for line in child_tree)
        else:
            lines.extend(' |  ' + line for line in child_tree)
    return lines

if len(sys.argv) == 1:
    print "Usage: dgTree &lt;root&gt;"
    sys.exit(0)

root = sys.argv[1]
try:
    ref = DGS.getDeviceGroupByPath(root.split('/'))
except NotFoundException:
    print 'Path "%s" not found' % root
    sys.exit(1)
print '\n'.join(render(ref))
</pre>

<p>Print a tree of this Device Group node.</p>

<pre>[root@dc1 demo]# ./dgTree.py "Public/Environments"
Environments
 +- Development
 +- QA
 |   +- QA / Sample Target Group
 |       +- QA / Sample Target
 |           +- QA / Sample Target / Tomcat 6.0.20
 |           +- QA / Sample Target / Oracle 11.2.0.1
 +- Performance
 +- UAT
 +- PreProduction
 +- Production</pre>

<p></p>

<h2>List full device group paths a server is a member of</h2>

<p>The previous tree example showed walking down to the children of a device group. This example show walking up the parents.&nbsp;This script will walk up a nested device group hierarchy for a server and print out the full device group paths its a member of.</p>

<pre>from pytwist import twistserver
from pytwist.com.opsware.server import ServerRef
ts = twistserver.TwistServer()
ts.authenticate('user', 'password')
hostref = ServerRef(91190001)
for devgrp in ts.server.ServerService.getDeviceGroups(hostref):
    devgrpvo = ts.device.DeviceGroupService.getDeviceGroupVO(devgrp)
    devgrptree = []
    while 1:
        devgrptree.append(devgrpvo.shortName)
        if not devgrpvo.parent: break
        devgrpvo = ts.device.DeviceGroupService.getDeviceGroupVO(devgrpvo.parent)
    devgrptree.reverse()
    print '/'.join(devgrptree)
</pre>

<p>Sample execution</p>

<pre>[root@dc1 demo]# ./dgForAServer.py
Device Groups/Public/Opsware/Operating Systems/All Linux/All Linux CentOS/CentOS 6 X86_64
Device Groups/Public/10.x.x.x</pre>

<p></p>

<h2>Creating and populating a static device group</h2>

<p>Creating a static device group and populating it with servers is a two step process.</p>

<ul>
	<li>
	<p>First create the device group and get a DeviceGroupRef handle</p>
	</li>
	<li>Call a service method to add servers to the new device group</li>
</ul>

<p>The parent and shortName are mandatory attributes that must be present.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.device import DeviceGroupVO
from pytwist.com.opsware.server import ServerRef

ts = twistserver.TwistServer()
ts.authenticate('user','password')
DGS = ts.device.DeviceGroupService

vo = DeviceGroupVO()
vo.parent = DGS.getPublicRoot()
vo.shortName = 'Programmatic DG'
newVO = DGS.create(vo)
DGS.addDevices(newVO.ref, [ServerRef(1192001),
                           ServerRef(11930001)])
</pre>

<p>To root the new device group inside another device group we could supply a parent using&nbsp;<tt>DGS.getDeviceGroupByPath</tt>&nbsp;that we saw earlier.</p>

<p>We could have also used this method to setup the device group</p>

<pre>setDevices(DeviceGroupRef self, DeviceReference[] devices)
</pre>

<p>Where as&nbsp;<tt>addDevices</tt>&nbsp;will augment the devices with additional servers the&nbsp;<tt>setDevices</tt>&nbsp;call replaces the current servers with a new set. This is a convenience method that saves us from having from doing&nbsp;<tt>getDevices</tt>&nbsp;and then call&nbsp;<tt>removeDevices</tt>&nbsp;on that list before finally calling&nbsp;<tt>addDevices</tt>.</p>

<p>In the ServerService there is an orthogonal call that allows you to attach a single server to multiple device groups</p>

<pre>abstract  void  addDeviceGroups(ServerRef self, DeviceGroupRef[] groups)
</pre>

<p>Equally we could have coded this to attach servers to a device group</p>

<pre>for serverRef in [ServerRef(1192001), ServerRef(11930001)]:
   ts.server.addDeviceGroups(serverRef, [newVO.ref])
</pre>

<p>However as it performs more round trips to the Twist it's less efficient when adding multiple servers to the same device group. This is an important point. There often are complimentary calls in other services that may be more/less efficient at performing the same task. Always try to perform the work in the minimum number of calls.</p>

<p></p>

<h2>Creating a dynamic device group for unreachable servers</h2>

<p>The filter may look more complicated than expected and there is a good reasons for this. When integrating with a vCenter server records are created in SA with a lifecycle of MANAGED/UNREACHABLE. Searching by&nbsp;<tt>ServerVO.state</tt>&nbsp;alone is not sufficient. These agentless records will be excluded by only including those with a recorded Agent version. iLo integration with SA creates similar entries.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.device import DeviceGroupVO
from pytwist.com.opsware.search import Filter
from pytwist.com.opsware.common import UniqueNameException

ts = twistserver.TwistServer()
ts.authenticate('user','password')

ruleFilter = Filter()
ruleFilter.expression = '(ServerVO.state = UNREACHABLE) &amp; '
                        '(ServerVO.opswLifecycle = MANAGED) &amp; '
                        '(ServerVO.agentVersion IS_NOT_NULL 0)'

vo = DeviceGroupVO()
vo.parent = ts.device.DeviceGroupService.getPublicRoot()
vo.dynamic = True
vo.dynamicRule = ruleFilter
vo.shortName = 'Unreachable Servers'
try:
    ts.device.DeviceGroupService.create(vo)
except UniqueNameException:
    print "Device group '%s' already exists" % vo.shortName
</pre>

<p></p>

<h2>Next dynamic device group recalculation event time</h2>

<p>Although this does not use the DeviceGroupService the information is relevant to dynamic device groups. The next recalculation event time is held as a custom attribute against the Core facility. Attributes prefixed with&nbsp;<tt>__OPSW</tt>&nbsp;are prevented from being displayed in the GUI interface, they are internal and hidden.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
import time
ts = twistserver.TwistServer()
FS = ts.locality.FacilityService
coreRef = FS.getCoreFacility()
t = FS.getCustAttr(coreRef,'__OPSW_next_device_group_recalc_time',False)
print "Next recalc event: %s " % time.ctime(float(t))
</pre>

<p></p>

<h2>Refreshing dynamic device groups</h2>

<p>The following program accepts a single parameter, that being a device group id, it will then request the system to refresh the devices from its rules. Without any argument all dynamic device groups will be refreshed. Note this does not reset the system wide hourly refresh event however individual device group refresh times will be updated.</p>

<pre>#!/opt/opsware/bin/python
import sys
from pytwist import twistserver
from pytwist.com.opsware.search import Filter
ts = twistserver.TwistServer()
DGS = ts.device.DeviceGroupService

try:
    flt = Filter()
    flt.expression = 'device_group_rc_id = %s' % (sys.argv[1])
except IndexError:
    flt = None

dgRefs = DGS.findDeviceGroupRefs(flt)
print "Refreshing Group Memberships..."
if dgRefs:
    for ref in dgRefs:
        vo = DGS.getDeviceGroupVO(ref);
        if vo.dynamic == True and vo.deviceAttachmentAllowed == True:
            print "Group: %s" % vo.fullName
            DGS.refreshMembership(ref,True)</pre>
<h2>Delete all servers in a device group</h2>
<p>Demonstrates the iteration of servers in a device group with each being decomissioned and deleted.</p>
<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
ts = twistserver.TwistServer()
dgrefs = ts.search.SearchService.findObjRefs('DeviceGroupVO.shortName = "Old Servers"','device_group')
for deviceRef in ts.device.DeviceGroupService.getDevices(dgrefs):
    print "Deleting server %s" % deviceRef
    ts.server.ServerService.decommission(deviceRef)
    ts.server.ServerService.remove(deviceRef)
</pre>
Execution
<pre># ./delDGServers.py
Deleting server 0b5c6eaf0124 (ServerRef:5070001)
Deleting server 0a28805509d9 (ServerRef:5400001)
# cat delDGServers.py
</pre></html>