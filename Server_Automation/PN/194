<html><h2>Attach a new ZIP Unit to a software policy</h2>

<p>The problem we need to workaround is that there is no addXXX method so we must fetch all the items, add our item to that list, then set it all back.</p>

<pre>from pytwist.com.opsware.swmgmt import SoftwarePolicyRef, SoftwarePolicyItemData
from pytwist.com.opsware.pkg import ZIPRef

SoftwarePolicyService= ts.swmgmt.SoftwarePolicyService

missingUnit = ZIPRef(2710001)
pRef = SoftwarePolicyRef(2160001)

pVO = SoftwarePolicyService.getSoftwarePolicyVO(pRef)
itemList = list(pVO.getInstallableItemData())
item = SoftwarePolicyItemData()
item.setPolicyItem(missingUnit)
itemList.append(item)
pVO.setInstallableItemData(itemList)
SoftwarePolicyService.update(pRef, pVO, False, False)
</pre>

<p></p>

<h2>Ad hoc Software Installation</h2>

<p>This script will install software against a server in an ad hoc manner. Ad hoc means we don't need to create a software policy and attach it to the server and then remediate. Supplying the server and software to install is sufficient. It's what happens when you right click on a server in the UI and select "Install Software"</p>

<p></p>

<p><img src="./mediawiki/images/PN/adhoc-install-software.png"></p>

<p></p>

<p></p>

<p></p>

<pre>from pytwist.com.opsware.swmgmt import SoftwareInstallJobArgument, InstallableAttachableEntry
from pytwist.com.opsware.pkg import ZIPRef
from pytwist.com.opsware.server import ServerRef

e = InstallableAttachableEntry()
e.setInstallables([ZIPRef(625260001)])
e.setPolicyAttachables([ServerRef(2280001)])

s = SoftwareInstallJobArgument()
s.setInstallableAttachableEntries([e])

jobRef = ts.swmgmt.SoftwarePolicyService.startInstallSoftware(s)
print "Submitted job: %s" % jobRef
</pre>

<p></p>

<h2>Server to Software policy attachment report</h2>

<p>Building upon the services already explored;&nbsp;<tt>SearchService</tt>,&nbsp;<tt>FolderService</tt>&nbsp;and&nbsp;<tt>ServerService</tt>.</p>

<p>Create a report of all the software policies attached to every server with the full location of where this software policy is located in the library folder structure.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver

ts = twistserver.TwistServer()
ServerService= ts.server.ServerService
SoftwarePolicyService= ts.swmgmt.SoftwarePolicyService

folderPath = lambda folderRefs: '/'.join(c.name for c in folderRefs)

# For each server in the core.
for ref in ts.search.SearchService.findObjRefs(None,'device'):
    vo = ServerService.getServerVO(ref)
    # Look up the servers software policies.
    swrefs = ServerService.getSoftwarePolicies([ref])
    # For each policy
    sw = None
    for sw in SoftwarePolicyService.getSoftwarePolicyVOs(swrefs):
        # compute software repository path.
        path = folderPath(ts.folder.FolderService.getPath(sw.folder)[1:])
        print "%s: %s/%s"  %( vo.name, path, sw.name)
    if sw is None:
        print "%s: No software polices attached" % vo.name
</pre>

<p>Execution.&nbsp;<em>It will take a while on a system with many servers.</em></p>

<pre>[root@dc1 SoftwarePolicyService]# ./serverSWPolicies.py
32540685155e: Opsware/Tools/Python Opsware API Access/Python Opsware API Access
dc1.blue.local: Opsware/Tools/ISMtool/ISMtool
sat1.blue.local: No software polices attached
win2003-bt7xcc6: No software polices attached</pre>

<p>Improvements to the code to improve performance could involve creating a cache for the software policy folder path to avoid recomputation.<br>
&nbsp;</p>

<h2>Software policy to Server attachment report</h2>

<p>This report counts the number of servers attached to each software policy, this could be used to understand orphaned, or unused software policies, in the system that are candidates for deletion.</p>

<pre>#!/opt/opsware/agent/bin/python
from pytwist import twistserver
from pytwist.com.opsware.server import ServerRef

ts = twistserver.TwistServer()
SoftwarePolicyService = ts.swmgmt.SoftwarePolicyService

folderPath = lambda folderRefs: '/'.join(c.name for c in folderRefs)

# For each software policy
for ref in ts.search.SearchService.findObjRefs(None,'software_policy'):
    # Servers attached
    serverRefs = [x.policyAttachable
                  for x in SoftwarePolicyService.getPolicyAttachableAssociations([ref])
                  if isinstance(x.policyAttachable, ServerRef)]
    # The VO
    sw = SoftwarePolicyService.getSoftwarePolicyVO(ref)
    # Compute software repository path.
    path = folderPath(ts.folder.FolderService.getPath(sw.folder)[1:])
    print "%s/%s - %s"  %( path, sw.name, len(serverRefs))
</pre>

<p>Execution (output truncated)</p>

<pre>Opsware/Tools/Python Opsware API Access/Python Opsware API Access - 0
Opsware/Tools/Python/Python for SA Modules - 1
Opsware/Tools/Solaris Patching/Solaris IPS Package Acquisition Tools - 0
Opsware/Tools/Windows PowerShell Connector/Windows PowerShell Connector - 0
Opsware/Tools/Chef-12.8.1/chef-solo-12.8.1 - 0
</pre>

<h2>Augment a Software Policy's OS applicability</h2>

<p>When you use the pluggable platform installer to add a new platform to SA existing policies won't be associated with it.&nbsp; This script will find all Software Policies that are not built-in and are associated with the Window 2016 platform and will add Windows 2019 to them.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
import sys
ts = twistserver.TwistServer()
ts.authenticate('user','password')
SS = ts.search.SearchService
SPS = ts.swmgmt.SoftwarePolicyService

def getPlatform(name):
    refs = SS.findObjRefs('platform_name = "%s"' % name, 'platform')
    if len(refs) == 0:
        print "%s Not found" % name
        sys.exit(1)
    return refs[0]

win2019 = getPlatform("Windows Server 2019 x64")
win2016 = getPlatform("Windows 2016 x64")
for swPolicyRef in SS.findObjRefs( '(software_policy_platform_id = %s)&amp;'
                                   '(software_policy_platform_id != %s)&amp;'
                                   '(SoftwarePolicyVO.createdBy != "Opsware")' % (win2016.id,win2019.id),
                                   'software_policy'):
    print "Adding win2019 to %s" % swPolicyRef
    vo = SPS.getSoftwarePolicyVO(swPolicyRef)
    platformRefs = list(vo.getPlatforms()) + [win2019]
    vo.setPlatforms(platformRefs)
    SPS.update(swPolicyRef, vo, False, False)
</pre>
Execution

<pre># ./addWindows2019.py
Adding win2019 to New Software Policy (SoftwarePolicyRef:220001)
#
</pre>
</html>