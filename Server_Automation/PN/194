<h2>Attach a new ZIP Unit to a software policy</h2>

<p>The problem we need to workaround is that there is no addXXX method so we must fetch all the items, add our item to that list, then set it all back.</p>

<pre>from pytwist.com.opsware.swmgmt import SoftwarePolicyRef, SoftwarePolicyItemData
from pytwist.com.opsware.pkg import ZIPRef

SoftwarePolicyService= ts.swmgmt.SoftwarePolicyService

missingUnit = ZIPRef(2710001)
pRef = SoftwarePolicyRef(2160001)

pVO = SoftwarePolicyService.getSoftwarePolicyVO(pRef)
itemList = list(pVO.getInstallableItemData())
item = SoftwarePolicyItemData()
item.setPolicyItem(missingUnit)
itemList.append(item)
pVO.setInstallableItemData(itemList)
SoftwarePolicyService.update(pRef, pVO, False, False)
</pre>

<p>&nbsp;</p>

<h2>Ad hoc Software Installation</h2>

<p>This script will install software against a server in an ad hoc manner. Ad hoc means we don't need to create a software policy and attach it to the server and then remediate. Supplying the server and software to install is sufficient. It's what happens when you right click on a server in the UI and select "Install Software"</p>

<p>&nbsp;</p>

<p><img src="./mediawiki/images/PN/adhoc-install-software.png"></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<pre>from pytwist.com.opsware.swmgmt import SoftwareInstallJobArgument, InstallableAttachableEntry
from pytwist.com.opsware.pkg import ZIPRef
from pytwist.com.opsware.server import ServerRef

e = InstallableAttachableEntry()
e.setInstallables([ZIPRef(625260001)])
e.setPolicyAttachables([ServerRef(2280001)])

s = SoftwareInstallJobArgument()
s.setInstallableAttachableEntries([e])

jobRef = ts.swmgmt.SoftwarePolicyService.startInstallSoftware(s)
print "Submitted job: %s" % jobRef
</pre>

<p>&nbsp;</p>

<h2>Server to Software policy attachment report</h2>

<p>Building upon the services already explored;&nbsp;<tt>SearchService</tt>,&nbsp;<tt>FolderService</tt>&nbsp;and&nbsp;<tt>ServerService</tt>.</p>

<p>Create a report of all the software policies attached to every server with the full location of where this software policy is located in the library folder structure.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver

ts = twistserver.TwistServer()
ServerService= ts.server.ServerService
SoftwarePolicyService= ts.swmgmt.SoftwarePolicyService

folderPath = lambda folderRefs: '/'.join(c.name for c in folderRefs)

# For each server in the core.
for ref in ts.search.SearchService.findObjRefs(None,'device'):
    vo = ServerService.getServerVO(ref)
    # Look up the servers software policies.
    swrefs = ServerService.getSoftwarePolicies([ref])
    # For each policy
    sw = None
    for sw in SoftwarePolicyService.getSoftwarePolicyVOs(swrefs):
        # compute software repository path.
        path = folderPath(ts.folder.FolderService.getPath(sw.folder)[1:])
        print "%s: %s/%s"  %( vo.name, path, sw.name)
    if sw is None:
        print "%s: No software polices attached" % vo.name
</pre>

<p>Execution.&nbsp;<em>It will take a while on a system with many servers.</em></p>

<pre>[root@dc1 SoftwarePolicyService]# ./serverSWPolicies.py
32540685155e: Opsware/Tools/Python Opsware API Access/Python Opsware API Access
dc1.blue.local: Opsware/Tools/ISMtool/ISMtool
sat1.blue.local: No software polices attached
win2003-bt7xcc6: No software polices attached</pre>

<p>Improvements to the code to improve performance could involve creating a cache for the software policy folder path to avoid recomputation.</p>
