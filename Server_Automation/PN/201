<h2>Deploy an Agent</h2>

<p>This example will initiate the deploy agent service to install an agent on a UNIX server.</p>

<pre>#!/opt/opsware/bin/python
from pytwist.twistserver import TwistServer
from pytwist.com.opsware.mgmtservice.job import *
from pytwist.com.opsware.server import ServerRef

loginOpts = HPSAAgentDeployLoginOptions()
loginOpts.targetOSClass = HPSAAgentDeployLoginOptions.OS_CLASS_UNIX
loginOpts.username = 'root'
loginOpts.password = 'opsware'
loginOpts.hosts = ['10.0.0.3']
loginOpts.protocols = ['ssh:22']

advOpts = HPSAAgentDeployAdvancedOptions()
advOpts.tmpDir = "/tmp"
advOpts.wayPort = 1018
advOpts.wordPort = 1003
advOpts.spinPort = 1004

adt = HPSAAgentDeployJobInput()
adt.actionType = HPSAAgentDeployJobInput.ACTION_TYPE_INSTALL
adt.loginOptions = loginOpts
adt.gatewayServer = ServerRef(10001)
adt.gatewayAddressInfo = ['192.168.4.130:3001']
adt.installerOptions = "--force_full_hw_reg --force_sw_reg --withrpm --loglevel error"
adt.timeout = 3600
adt.advancedOptions = advOpts

ts = TwistServer()
ts.authenticate('user','password')
print ts.mgmtservice.HPSAAgentService.startHPSAAgentDeploy(adt, None, None, None)
</pre>

<p>Execution</p>

<pre>[root@dc1 HPSAAgentService]# ./deploy_agent.py
Deploy HP SA Agent (JobRef:114910001)</pre>

<p>Deploying an agent to Windows the following changes would be required.</p>

<pre>loginOpts.targetOSClass = HPSAAgentDeployLoginOptions.OS_CLASS_WINDOWS
loginOpts.username = 'Administrator'
loginOpts.protocols = ['auto']
advOpts.tmpDir = None
adt.installerOptions = "--force_full_hw_reg --force_sw_reg --withmsi --loglevel error"</pre>

<p>&nbsp;</p>

<h2>Agent deployment job results</h2>

<p>Agent deployment does not use the&nbsp;<strong>Way</strong>&nbsp;as the job engine it makes use of Work Load Management (WLM) system built into the&nbsp;<strong>Twist</strong>. These two separate job sub-systems are transparent to the user when viewing jobs in the GUI but when performing programmatic access you must be aware of this distinction as the way in which results and output are obtained changes.</p>

<p>The job output is not being printed but the code to fetch it has been included so you can see hows it's done. This code only works for single server agent deployment jobs. Multi-server deployments are more complex with regards to aligning the server with its output.</p>

<pre>#!/opt/opsware/bin/python
from pytwist import twistserver
from pytwist.com.opsware.job import JobRef, WlmJobResult, JobServerInfo
from pytwist.com.opsware.mgmtservice.job import HPSAAgentDeployTaskResult

# Make a dictionary of all the Static STATUS fields in JobServerInfo
jobServerState = {v: k.replace('_STATUS','')
                  for k,v in vars(JobServerInfo).items()
                  if not callable(v) and k.endswith('_STATUS')}

ts = twistserver.TwistServer()
ts.authenticate('user','password')
jobRef = JobRef(114910001)
jobResult = ts.job.JobService.getResult(jobRef)
if jobResult.jobInfo.type == 'mgmtservice.agent.deploy':
    results = [x.taskData
               for x in jobResult.elemResultInfo
               if isinstance(x, HPSAAgentDeployTaskResult)
               and x.taskData.sessionStarted]
    jobOutput = '\n'.join(x.defaultMsg for x in results[0].completedMessages)
    #print jobOutput
    jobServerInfo = jobResult.jobInfo.serverInfo[0]
    print "Agent install on %s was %s" % (jobServerInfo.server,
                                          jobServerState[jobServerInfo.status])
else:
    print "Not an agent installation job"
</pre>

<p>Execution</p>

<pre>[root@dc1 HPSAAgentService]# ./deploy_agent_results.py
Agent install on 0fb31db2c086 (ServerRef:90590001) was SUCCESS</pre>
