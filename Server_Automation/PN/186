<p>pytwist is a Python access layer to the Unified API (UAPI). Its called a unified API because the same API is accessible with Java, inside the OGFS as a virtual filesystem, as SOAP calls via the OCC, and exposed to the Python programming language via pytwist which is our focus.</p>

<p>The GUI Desktop Client calls the UAPI using Java. Anything you can do in the User Interface you can do with pytwist. This allows Server Automation to be used as an Automation Engine being driven from scripts and 3rd party integrations.</p>

<p>The Twist component is responsible for providing the UAPI and the Twist is written in Java. Subsequently the documentation for the UAPI is provided in its JavaDoc form.</p>

<p>This poses a problem if you are writing in Python using the pytwist interface. You need to translate from Java documentation to Python documentation on the fly as there is no python variant of the UAPI documentation. The translation is not difficult. Once you understand the few simple rules you'll realize that separate python API documentation isn't required.</p>

<p>A demonstration is the best way to introduce pytwist. Lets start with Server Automation's equivalent of a Hello World program.</p>

<pre>[root@dc1 demo]# /opt/opsware/bin/python
Python 2.7.10 (default, May 27 2019, 09:16:14)
[GCC 4.8.2 20140120 (Red Hat 4.8.2-16)] on linux-x86_64
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from pytwist import twistserver
&gt;&gt;&gt; ts = twistserver.TwistServer()
&gt;&gt;&gt; ts.authenticate('user','password')
&gt;&gt;&gt; ts.shared.TwistConsoleService.getAPIVersionLabel()
'SAS 10.60.000 Opsware API'
&gt;&gt;&gt;
</pre>

<p>The sections below will dissect and explain some of what just happened in this example.</p>

<p>&nbsp;</p>

<h2>Making a connection</h2>

<p>This will import the twistserver package into our namespace.</p>

<pre>from pytwist import twistserver
</pre>

<p>There are four kinds of authentication with pytwist.</p>

<ul>
	<li>
	<p><strong>No authentication</strong>. The only method that can be invoked without being authenticated is the method&nbsp;<tt>com.opsware.fido.AuthenticationService.authenticate</tt>. This is the twist-side method that will be called when you call pytwist's&nbsp;<tt>TwistServer.authenticate</tt>&nbsp;method. The result of this method is a twist token that pytwist will then store inside of your TwistService instance.</p>
	</li>
	<li>
	<p><strong>User authentication</strong>. If you have invoked the&nbsp;<tt>TwistServer.authenticate</tt>&nbsp;method and your TwistServer instance has a token then this token will be supplied for every API method that you invoke. This token will be used by the twist to determine if you have permission to invoke the given API method against the given arguments.</p>
	</li>
	<li>
	<p><strong>Agent authentication</strong>. This allows the client to only be able to execute API methods that impact that agent's device record. This is achieved using the agent's private key and certificate (agent.srv or agent.p12) from the crypto directory. When the Twist sees that there is no token it will check to see if a client certificate was supplied and if this client certificate is signed by "embryo" it will attempt to locate the single device record for this client agent certificate. If successful the twist will then construct a token for the internal user named "agentuser" that has opaque fields to specify the device ID which is being authenticated.</p>
	</li>
	<li>
	<p><strong>Core authentication</strong>. This allows the client to execute API methods as the internal user named "detuser". "detuser" is a highly privileged internal user that the Twist operates as. It doesn't have blanket access to everything in the system, think of it as more of an administrative user. It does have permission to all operations but it can lack access to things created by other users. (But it would have permission to give itself access if it wanted to.) This authentication is achieved by using either the crypto/waybot/waybot.srv[p12] or the crypto/spin/spin.srv[p12] certificates.</p>
	</li>
</ul>

<p>Get a handle to the Unified API server aka Twist.</p>

<pre>ts = twistserver.TwistServer()
</pre>

<p>By default,&nbsp;<tt>TwistServer</tt>&nbsp;will connect to a twister server at&nbsp;<a href="https://twist:1032/">https://twist:1032</a>&nbsp;with the Waybot certificate and perform&nbsp;<strong>Core/Agent authentication</strong>. This is a load balanced connection and it may connect to any of the slices running a twist. To connect to a specific twist the argument&nbsp;<tt>host</tt>&nbsp;may optionally be provided.</p>

<pre>ts = twistserver.TwistServer(host='localhost')
</pre>

<p>To authenticate as an User and leave Core authentication mode we would perform the following</p>

<pre>ts.authenticate('user','password')
</pre>

<p>The authenticate step is not required if making a pytwist connection from inside the OGFS. You will automatically be User Authenticated when you instantiate the TwistServer class..</p>

<p>Inside the OGFS the authentication token to communicate with the Twist will be read automatically if the file /opsw/.token exists.</p>

<pre>[root@dc1 demo]# ssh -p 2222 jyaya@localhost

  Opsware Global Shell

jyaya@opsware's password:
[jyaya@dc1 ~](498) $ cat /opsw/.token
YYB3FpwGAoM/5ZYpMuOHOTFi5SVgFI5P66evvM4wH3v0KQZ8xU/hpd6sPK5k8RH0o8UQtT8lhig29n5wdWVa0rN6yni5U8qoYUe0GS5cpp1NaZfhmQS9smSrMFklNHJj2qtISQ5uZmLjR358G6hD3RE6RuaogxgdBLUPtdXu49jpi/EtbEqYdOslklbiXXEzCxShSbquwTLZ0Ldu6RRRBakYfeC8IiXD6BwT6FU8gjXs6ft1iKoDsNX49j0dikw6
[jyaya@dc1 ~](499) $</pre>

<p>If executing pytwist outside of the OGFS after making an authenticate call the token is established.</p>

<pre>[root@dc1 demo]# /opt/opsware/bin/python
Python 2.7.10 (default, May 27 2019, 09:16:14)
[GCC 4.8.2 20140120 (Red Hat 4.8.2-16)] on linux-x86_64
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from pytwist import twistserver
&gt;&gt;&gt; ts = twistserver.TwistServer()
&gt;&gt;&gt; ts.authenticate('user','password')
&gt;&gt;&gt; ts.token
'YYB3FpwGAoM/5ZYpMuOHOTFi5SVgFI5P66evvM4wH3v0KQZ8xU/hpd6sPK5k8RH0o8UQtT8lhig29n5wdWVa0rN6yni5U8qoYUe0GS5cpp1NaZfhmQS9smSrMFklNHJjlLHH2ZSC8abE+5wWdzhMxWyEEJo5gO5p8ufjLufqgUnTsw2YyOTdZM9yeRdjOO0ARTaXPgM6J5HcN2lLJmQittd3mHWOKlpnU2Iq3oc0X3pETxTTdHty+IAfLNV3oxUw'
&gt;&gt;&gt;
</pre>

<p>Recap to make a User Authenticated pytwist connection:</p>

<pre>from pytwist import twistserver
ts = twistserver.TwistServer()
ts.authenticate('user','password')
</pre>

<p>&nbsp;</p>

<h2>Importing a class</h2>

<p>In Java the following line of code would import a Class.</p>

<pre>import com.opsware.script.ScriptJobArgs;
</pre>

<p>In Python using the pytwist library we would code</p>

<pre>from pytwist.com.opsware.script import ScriptJobArgs
</pre>

<p>&nbsp;</p>

<h2>Accessing class static variables</h2>

<p>Consider the Java code definition for this class:</p>

<pre>public abstract class ScriptJobArgs implements Serializable {
     public static final int NO_OUTPUT_SIZE = -1;
...
</pre>

<p>Once a class has been imported class static public variables and methods may be accessed using the DOT notation.</p>

<pre>from pytwist.com.opsware.script import ScriptJobArgs
noOutput = ScriptJobArgs.NO_OUTPUT_SIZE
</pre>

<p>&nbsp;</p>

<h2>get/set class methods</h2>

<p>If you examine the Java class ScriptJobArgs you'll see it has the following methods as seen in the Twister API documentation page.</p>

<pre> String setParameters()
 int getTailOutputSize()
 int getTimeOut()
 void setParameters(String parameters)
 void setTailOutputSize(int tailOutputSize)
 void setTimeOut(int timeOut)
</pre>

<p>In Java we code the following:</p>

<pre>  ScriptJobArgs args = new ScriptJobArgs();
  int oldTimer = args.getTimeout();
  args.setTimeOut(3600);
</pre>

<p>In Python the same logic would be coded as:</p>

<pre>args = ScriptJobArgs()
oldTimer = args.timeOut
args.timeOut = 3600
</pre>

<p>Rules:</p>

<ul>
	<li>
	<p>There is no&nbsp;<strong>new</strong>&nbsp;keyword in Python to instantiate a class. Calling the Class will create an instance.</p>
	</li>
	<li>
	<p>In the above example we wrote&nbsp;<strong>args.timeOut</strong>&nbsp;and not&nbsp;<strong>args.getTimeout()</strong>. To get/set attributes of a class instance you access them directly with the dot operator or assign them with equals. There is no need to use the Java style get/set accessor methods although they will still work its not considered pythonic. The case also changed subtlety in case you missed it; getTimeOut became timeOut</p>
	</li>
	<li>drop the getXYZ prefix and lowercase the X letter. This same rule applies to setXYZ, findXYZ, isXYZ and other methods, its a common pattern.</li>
</ul>

<p>&nbsp;</p>

<h2>Getting a handle to a service interface</h2>

<p>All interactions with the UAPI are by way of the Service interfaces.</p>

<p>In the Java documentation these are interfaces within a package context. Some packages may provide more than one Service.</p>

<pre>Package: com.opsware.search
Interface: SearchService</pre>

<p>To get a handle to this Service we use the TwistServer() context created early. We drop the 'com.opsware' component of the Java package path and construct the following</p>

<pre>&gt;&gt;&gt; ss = ts.search.SearchService
</pre>

<p>The "path" to the service is just the interface in the unified API minus the "com.opsware" portion. (e.g. job.JobService, search.SearchService)</p>

<p>Each API interface consists of a set of methods. These methods are categorized into getters, setters, creators, finders, and actions.</p>

<ul>
	<li>
	<p><em>Getters.</em>&nbsp;A getter's name will be&nbsp;<tt>getMemberName</tt>&nbsp;where&nbsp;<tt>MemberName</tt>&nbsp;translates to a data member named&nbsp;<tt>memberName</tt>. The prefix 'is' will be used instead of 'get' where the datatype is a boolean.</p>
	</li>
	<li>
	<p><em>Setters.</em>&nbsp;Setter methods are similar to JavaBean's setters. A setter's name will be&nbsp;<tt>setMemberName</tt>&nbsp;where&nbsp;<tt>MemberName</tt>&nbsp;translates to a data member named&nbsp;<tt>memberName</tt>. A setter will have only one parameter.</p>
	</li>
	<li>
	<p><em>Creators.</em>&nbsp;Creator methods are static methods that create an instance of an object. Its return type is the interface's identity VO (Value Object)</p>
	</li>
	<li>
	<p><em>Finders.</em>&nbsp;Finder methods start with 'find' and normally return one or more identity references. The standard Finder method takes a&nbsp;<tt>com.opsware.common.Filter</tt>&nbsp;object as a search criteria and returns an array of IdentityRef object refs.</p>
	</li>
	<li>
	<p><em>Actions.</em>&nbsp;Actions are&nbsp;<tt>other</tt>&nbsp;functions.</p>
	</li>
</ul>

<p>What are References and VO's ?</p>

<ul>
	<li>Object references or objRefs - are used to identify logical objects exposed thru the API. Its a pointer.</li>
	<li>Value Objects (VO) - are used to transfer associated members of an object. Its the Data and sometimes methods.</li>
</ul>

<p>A reference (objRef) is a composite pointer. It will consist of three values; the reference type, an id, and a name for the thing being pointed at. The name is often handy if you need a description of the thing being pointed at without having to invoke a VO lookup first.</p>

<pre>&gt;&gt;&gt; ref = ts.searchService.findObjRefs('','facility')[0]
&gt;&gt;&gt; vars(ref)
{'secureResourceTypeName': 'facility', 'idAsLong': 40001L, 'id': 40001L, 'name': 'OX4'}
&gt;&gt;&gt; ref.id
40001L
&gt;&gt;&gt; ref.name
'OX4'
&gt;&gt;&gt;
</pre>

<p>&nbsp;</p>

<h2>Other Quirks</h2>

<p>Some other quirks which deserve a section of their own.</p>

<ul>
	<li>On input java object arrays (i.e Object[]) will accept both python tuples and arrays but the server will always return object arrays as tuples.</li>
	<li>java.util.Date objects are passed back and forth as longs representing seconds since epoch.</li>
</ul>

<p>&nbsp;</p>

<h2>About the examples</h2>

<p>Throughout the document you will see examples where a hard coded object ID has been used. Such as this:</p>

<pre>ref = ServerRef(9190001)
</pre>

<p>This is not best practice and has only been done in the interest of keeping the examples concise when highlighting a new functional area so additional search logic does not bloat the code.</p>

<p>Why is it bad to hard code an Object ID ? If you migrate content from one mesh to another using CBT these ID's will change breaking your code. Using an ID number makes code brittle.</p>
