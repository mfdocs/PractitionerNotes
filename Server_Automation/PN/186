<p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">pytwist is a Python access layer to the Unified API (UAPI). Its called a unified API because the same API is accessible with Java, inside the OGFS as a virtual filesystem, as SOAP calls via the OCC, and exposed to the Python programming language via pytwist which is our focus.<span class="anchor" id="line-77"></span><span class="anchor" id="line-78"></span></p><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">The GUI Desktop Client calls the UAPI using Java. Anything you can do in the User Interface you can do with pytwist. This allows Server Automation to be used as an Automation Engine being driven from scripts and 3rd party integrations.<span class="anchor" id="line-79"></span><span class="anchor" id="line-80"></span></p><p class="line862" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">The Twist component is responsible for providing the UAPI and the Twist is written in Java. Subsequently the documentation for the UAPI is provided in its JavaDoc form.<span class="anchor" id="line-81"></span><span class="anchor" id="line-82"></span></p><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">This poses a problem if you are writing in Python using the pytwist interface. You need to translate from Java documentation to Python documentation on the fly as there is no python variant of the UAPI documentation. The translation is not difficult. Once you understand the few simple rules you'll realize that separate python API documentation isn't required.<span class="anchor" id="line-83"></span><span class="anchor" id="line-84"></span></p><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">A demonstration is the best way to introduce pytwist. Lets start with Server Automation's equivalent of a Hello World program.<span class="anchor" id="line-85"></span><span class="anchor" id="line-86"></span><span class="anchor" id="line-87"></span><span class="anchor" id="line-88"></span><span class="anchor" id="line-89"></span><span class="anchor" id="line-90"></span><span class="anchor" id="line-91"></span><span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span><span class="anchor" id="line-94"></span><span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span><span class="anchor" id="line-1-1"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-37677365988a02e953392237292c2728ca2c42d4" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line">[<span class="ID">root</span><span class="ID">@dc1</span> <span class="ID">demo</span>]<span class="Comment" style="color: rgb(0, 128, 0);"># /opt/opsware/bin/python</span></span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_2"></span><span class="anchor" id="line-2-1"></span><span class="ID">Python</span> <span class="Number" style="color: rgb(0, 128, 192);">2.7</span>.<span class="Number" style="color: rgb(0, 128, 192);">10</span> (<span class="ID">default</span>, <span class="ID">May</span> <span class="Number" style="color: rgb(0, 128, 192);">27</span> <span class="Number" style="color: rgb(0, 128, 192);">2019</span>, <span class="Number" style="color: rgb(0, 128, 192);">09</span>:<span class="Number" style="color: rgb(0, 128, 192);">16</span>:<span class="Number" style="color: rgb(0, 128, 192);">14</span>)</span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_3"></span><span class="anchor" id="line-3-1"></span>[<span class="ID">GCC</span> <span class="Number" style="color: rgb(0, 128, 192);">4.8</span>.<span class="Number" style="color: rgb(0, 128, 192);">2</span> <span class="Number" style="color: rgb(0, 128, 192);">20140120</span> (<span class="ID">Red</span> <span class="ID">Hat</span> <span class="Number" style="color: rgb(0, 128, 192);">4.8</span>.<span class="Number" style="color: rgb(0, 128, 192);">2</span>-<span class="Number" style="color: rgb(0, 128, 192);">16</span>)] <span class="ID">on</span> <span class="ID">linux</span>-<span class="ID">x86_64</span></span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_4"></span><span class="anchor" id="line-4-1"></span><span class="ID">Type</span> <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">help</span><span class="String" style="color: rgb(0, 64, 128);">"</span>, <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">copyright</span><span class="String" style="color: rgb(0, 64, 128);">"</span>, <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">credits</span><span class="String" style="color: rgb(0, 64, 128);">"</span> <span class="ResWord" style="color: rgb(160, 0, 0);">or</span> <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">license</span><span class="String" style="color: rgb(0, 64, 128);">"</span> <span class="ResWord" style="color: rgb(160, 0, 0);">for</span> <span class="ID">more</span> <span class="ID">information</span>.</span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_5"></span><span class="anchor" id="line-5-1"></span>&gt;&gt;&gt; <span class="ResWord" style="color: rgb(160, 0, 0);">from</span> <span class="ID">pytwist</span> <span class="ResWord" style="color: rgb(160, 0, 0);">import</span> <span class="ID">twistserver</span></span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_6"></span><span class="anchor" id="line-6-1"></span>&gt;&gt;&gt; <span class="ID">ts</span> = <span class="ID">twistserver</span>.<span class="ID">TwistServer</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_7"></span><span class="anchor" id="line-7-1"></span>&gt;&gt;&gt; <span class="ID">ts</span>.<span class="ID">authenticate</span>(<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">user</span><span class="String" style="color: rgb(0, 64, 128);">'</span>,<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">password</span><span class="String" style="color: rgb(0, 64, 128);">'</span>)</span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_8"></span><span class="anchor" id="line-8-1"></span>&gt;&gt;&gt; <span class="ID">ts</span>.<span class="ID">shared</span>.<span class="ID">TwistConsoleService</span>.<span class="ID">getAPIVersionLabel</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_9"></span><span class="anchor" id="line-9-1"></span><span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">SAS 10.60.000 Opsware API</span><span class="String" style="color: rgb(0, 64, 128);">'</span></span>
<span class="line"><span class="LineAnchor" id="CA-37677365988a02e953392237292c2728ca2c42d4_10"></span><span class="anchor" id="line-10-1"></span>&gt;&gt;&gt;</span>
</pre></div></div><span class="anchor" id="line-97" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">The sections below will dissect and explain some of what just happened in this example.<span class="anchor" id="line-98"></span><span class="anchor" id="line-99"></span></p><p class="line867" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;"></p><h2 id="Making_a_connection" style="color: rgb(0, 0, 0); letter-spacing: normal; text-transform: none; font-family: sans-serif;">Making a connection</h2><span class="anchor" id="line-100" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-101" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">This will import the twistserver package into our namespace.<span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span><span class="anchor" id="line-104"></span><span class="anchor" id="line-1-3"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-22cb965d34836d1182b5d5d54958480fb2f14a6a" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ResWord" style="color: rgb(160, 0, 0);">from</span> <span class="ID">pytwist</span> <span class="ResWord" style="color: rgb(160, 0, 0);">import</span> <span class="ID">twistserver</span></span>
</pre></div></div><span class="anchor" id="line-105" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-106" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">There are four kinds of authentication with pytwist.<span class="anchor" id="line-107"></span></p><ul style="color: rgb(0, 0, 0); font-family: sans-serif;"><li><p class="line891" style="margin: 0.25em 0px;"><strong>No authentication</strong>. The only method that can be invoked without being authenticated is the method&nbsp;<tt class="backtick"></tt><tt class="backtick">com.opsware.fido.AuthenticationService.authenticate</tt><tt class="backtick"></tt>. This is the twist-side method that will be called when you call pytwist's&nbsp;<tt class="backtick"></tt><tt class="backtick">TwistServer.authenticate</tt><tt class="backtick"></tt>&nbsp;method. The result of this method is a twist token that pytwist will then store inside of your TwistService instance.<span class="anchor" id="line-108"></span></p></li><li><p class="line891" style="margin: 0.25em 0px;"><strong>User authentication</strong>. If you have invoked the&nbsp;<tt class="backtick"></tt><tt class="backtick">TwistServer.authenticate</tt><tt class="backtick"></tt>&nbsp;method and your TwistServer instance has a token then this token will be supplied for every API method that you invoke. This token will be used by the twist to determine if you have permission to invoke the given API method against the given arguments.<span class="anchor" id="line-109"></span></p></li><li><p class="line891" style="margin: 0.25em 0px;"><strong>Agent authentication</strong>. This allows the client to only be able to execute API methods that impact that agent's device record. This is achieved using the agent's private key and certificate (agent.srv or agent.p12) from the crypto directory. When the Twist sees that there is no token it will check to see if a client certificate was supplied and if this client certificate is signed by "embryo" it will attempt to locate the single device record for this client agent certificate. If successful the twist will then construct a token for the internal user named "agentuser" that has opaque fields to specify the device ID which is being authenticated.<span class="anchor" id="line-110"></span></p></li><li><p class="line891" style="margin: 0.25em 0px;"><strong>Core authentication</strong>. This allows the client to execute API methods as the internal user named "detuser". "detuser" is a highly privileged internal user that the Twist operates as. It doesn't have blanket access to everything in the system, think of it as more of an administrative user. It does have permission to all operations but it can lack access to things created by other users. (But it would have permission to give itself access if it wanted to.) This authentication is achieved by using either the crypto/waybot/waybot.srv[p12] or the crypto/spin/spin.srv[p12] certificates.<span class="anchor" id="line-111"></span><span class="anchor" id="line-112"></span></p></li></ul><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Get a handle to the Unified API server aka Twist.<span class="anchor" id="line-113"></span><span class="anchor" id="line-114"></span><span class="anchor" id="line-115"></span><span class="anchor" id="line-1-5"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-9bd62f7c41d939d391dd08d9139924b1c6680a5e" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ID">ts</span> = <span class="ID">twistserver</span>.<span class="ID">TwistServer</span>()</span>
</pre></div></div><span class="anchor" id="line-116" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line862" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">By default,&nbsp;<tt class="backtick"></tt><tt class="backtick">TwistServer</tt><tt class="backtick"></tt>&nbsp;will connect to a twister server at&nbsp;<a class="https" href="https://twist:1032/" style="color: rgb(0, 68, 170); border: 0px;">https://twist:1032</a>&nbsp;with the Waybot certificate and perform&nbsp;<strong>Core/Agent authentication</strong>. This is a load balanced connection and it may connect to any of the slices running a twist. To connect to a specific twist the argument&nbsp;<tt class="backtick"></tt><tt class="backtick">host</tt><tt class="backtick"></tt>&nbsp;may optionally be provided.<span class="anchor" id="line-117"></span><span class="anchor" id="line-118"></span><span class="anchor" id="line-119"></span><span class="anchor" id="line-1-7"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-76a9bdd9b8b31d6fe74571b088148baaca05ef4b" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ID">ts</span> = <span class="ID">twistserver</span>.<span class="ID">TwistServer</span>(<span class="ID">host</span>=<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">localhost</span><span class="String" style="color: rgb(0, 64, 128);">'</span>)</span>
</pre></div></div><span class="anchor" id="line-120" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">To authenticate as an User and leave Core authentication mode we would perform the following<span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span><span class="anchor" id="line-123"></span><span class="anchor" id="line-1-9"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-72d9ae580e9bcea4e4f83b08e9c7d08b87aba7bd" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ID">ts</span>.<span class="ID">authenticate</span>(<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">user</span><span class="String" style="color: rgb(0, 64, 128);">'</span>,<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">password</span><span class="String" style="color: rgb(0, 64, 128);">'</span>)</span>
</pre></div></div><span class="anchor" id="line-124" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line862" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">The authenticate step is not required if making a pytwist connection from inside the OGFS. You will automatically be User Authenticated when you instantiate the TwistServer class..<span class="anchor" id="line-125"></span><span class="anchor" id="line-126"></span></p><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Inside the OGFS the authentication token to communicate with the Twist will be read automatically if the file /opsw/.token exists.<span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span><span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span><span class="anchor" id="line-131"></span><span class="anchor" id="line-132"></span><span class="anchor" id="line-133"></span><span class="anchor" id="line-134"></span><span class="anchor" id="line-135"></span><span class="anchor" id="line-136"></span></p><pre style="color: rgb(0, 0, 0); border-width: 1pt; border-style: solid; border-color: rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="anchor" id="line-1"></span>[root@dc1 demo]# ssh -p 2222 jyaya@localhost
<span class="anchor" id="line-2"></span>
<span class="anchor" id="line-3"></span>  Opsware Global Shell
<span class="anchor" id="line-4"></span>
<span class="anchor" id="line-5"></span>jyaya@opsware's password:
<span class="anchor" id="line-6"></span>[jyaya@dc1 ~](498) $ cat /opsw/.token
<span class="anchor" id="line-7"></span>YYB3FpwGAoM/5ZYpMuOHOTFi5SVgFI5P66evvM4wH3v0KQZ8xU/hpd6sPK5k8RH0o8UQtT8lhig29n5wdWVa0rN6yni5U8qoYUe0GS5cpp1NaZfhmQS9smSrMFklNHJj2qtISQ5uZmLjR358G6hD3RE6RuaogxgdBLUPtdXu49jpi/EtbEqYdOslklbiXXEzCxShSbquwTLZ0Ldu6RRRBakYfeC8IiXD6BwT6FU8gjXs6ft1iKoDsNX49j0dikw6
<span class="anchor" id="line-8"></span>[jyaya@dc1 ~](499) $</pre><span class="anchor" id="line-137" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">If executing pytwist outside of the OGFS after making an authenticate call the token is established.<span class="anchor" id="line-138"></span><span class="anchor" id="line-139"></span><span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span><span class="anchor" id="line-143"></span><span class="anchor" id="line-144"></span><span class="anchor" id="line-145"></span><span class="anchor" id="line-146"></span><span class="anchor" id="line-147"></span><span class="anchor" id="line-148"></span><span class="anchor" id="line-149"></span><span class="anchor" id="line-1-11"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line">[<span class="ID">root</span><span class="ID">@dc1</span> <span class="ID">demo</span>]<span class="Comment" style="color: rgb(0, 128, 0);"># /opt/opsware/bin/python</span></span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_2"></span><span class="anchor" id="line-2-2"></span><span class="ID">Python</span> <span class="Number" style="color: rgb(0, 128, 192);">2.7</span>.<span class="Number" style="color: rgb(0, 128, 192);">10</span> (<span class="ID">default</span>, <span class="ID">May</span> <span class="Number" style="color: rgb(0, 128, 192);">27</span> <span class="Number" style="color: rgb(0, 128, 192);">2019</span>, <span class="Number" style="color: rgb(0, 128, 192);">09</span>:<span class="Number" style="color: rgb(0, 128, 192);">16</span>:<span class="Number" style="color: rgb(0, 128, 192);">14</span>)</span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_3"></span><span class="anchor" id="line-3-2"></span>[<span class="ID">GCC</span> <span class="Number" style="color: rgb(0, 128, 192);">4.8</span>.<span class="Number" style="color: rgb(0, 128, 192);">2</span> <span class="Number" style="color: rgb(0, 128, 192);">20140120</span> (<span class="ID">Red</span> <span class="ID">Hat</span> <span class="Number" style="color: rgb(0, 128, 192);">4.8</span>.<span class="Number" style="color: rgb(0, 128, 192);">2</span>-<span class="Number" style="color: rgb(0, 128, 192);">16</span>)] <span class="ID">on</span> <span class="ID">linux</span>-<span class="ID">x86_64</span></span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_4"></span><span class="anchor" id="line-4-2"></span><span class="ID">Type</span> <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">help</span><span class="String" style="color: rgb(0, 64, 128);">"</span>, <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">copyright</span><span class="String" style="color: rgb(0, 64, 128);">"</span>, <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">credits</span><span class="String" style="color: rgb(0, 64, 128);">"</span> <span class="ResWord" style="color: rgb(160, 0, 0);">or</span> <span class="String" style="color: rgb(0, 64, 128);">"</span><span class="String" style="color: rgb(0, 64, 128);">license</span><span class="String" style="color: rgb(0, 64, 128);">"</span> <span class="ResWord" style="color: rgb(160, 0, 0);">for</span> <span class="ID">more</span> <span class="ID">information</span>.</span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_5"></span><span class="anchor" id="line-5-2"></span>&gt;&gt;&gt; <span class="ResWord" style="color: rgb(160, 0, 0);">from</span> <span class="ID">pytwist</span> <span class="ResWord" style="color: rgb(160, 0, 0);">import</span> <span class="ID">twistserver</span></span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_6"></span><span class="anchor" id="line-6-2"></span>&gt;&gt;&gt; <span class="ID">ts</span> = <span class="ID">twistserver</span>.<span class="ID">TwistServer</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_7"></span><span class="anchor" id="line-7-2"></span>&gt;&gt;&gt; <span class="ID">ts</span>.<span class="ID">authenticate</span>(<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">user</span><span class="String" style="color: rgb(0, 64, 128);">'</span>,<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">password</span><span class="String" style="color: rgb(0, 64, 128);">'</span>)</span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_8"></span><span class="anchor" id="line-8-2"></span>&gt;&gt;&gt; <span class="ID">ts</span>.<span class="ID">token</span></span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_9"></span><span class="anchor" id="line-9-2"></span><span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">YYB3FpwGAoM/5ZYpMuOHOTFi5SVgFI5P66evvM4wH3v0KQZ8xU/hpd6sPK5k8RH0o8UQtT8lhig29n5wdWVa0rN6yni5U8qoYUe0GS5cpp1NaZfhmQS9smSrMFklNHJjlLHH2ZSC8abE+5wWdzhMxWyEEJo5gO5p8ufjLufqgUnTsw2YyOTdZM9yeRdjOO0ARTaXPgM6J5HcN2lLJmQittd3mHWOKlpnU2Iq3oc0X3pETxTTdHty+IAfLNV3oxUw</span><span class="String" style="color: rgb(0, 64, 128);">'</span></span>
<span class="line"><span class="LineAnchor" id="CA-77c74b540bd137ab9cbce79805f8bbc8122fee6f_10"></span><span class="anchor" id="line-10-2"></span>&gt;&gt;&gt;</span>
</pre></div></div><span class="anchor" id="line-150" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Recap to make a User Authenticated pytwist connection:<span class="anchor" id="line-151"></span><span class="anchor" id="line-152"></span><span class="anchor" id="line-153"></span><span class="anchor" id="line-154"></span><span class="anchor" id="line-155"></span><span class="anchor" id="line-1-13"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-57474ac3d8607b3ebad94b691fab94af739f634a" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ResWord" style="color: rgb(160, 0, 0);">from</span> <span class="ID">pytwist</span> <span class="ResWord" style="color: rgb(160, 0, 0);">import</span> <span class="ID">twistserver</span></span>
<span class="line"><span class="LineAnchor" id="CA-57474ac3d8607b3ebad94b691fab94af739f634a_2"></span><span class="anchor" id="line-2-3"></span><span class="ID">ts</span> = <span class="ID">twistserver</span>.<span class="ID">TwistServer</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-57474ac3d8607b3ebad94b691fab94af739f634a_3"></span><span class="anchor" id="line-3-3"></span><span class="ID">ts</span>.<span class="ID">authenticate</span>(<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">user</span><span class="String" style="color: rgb(0, 64, 128);">'</span>,<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">password</span><span class="String" style="color: rgb(0, 64, 128);">'</span>)</span>
</pre></div></div><span class="anchor" id="line-156" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-157" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line867" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;"></p><h2 id="Importing_a_class" style="color: rgb(0, 0, 0); letter-spacing: normal; text-transform: none; font-family: sans-serif;">Importing a class</h2><span class="anchor" id="line-158" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-159" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">In Java the following line of code would import a Class.<span class="anchor" id="line-160"></span><span class="anchor" id="line-161"></span><span class="anchor" id="line-162"></span><span class="anchor" id="line-1-15"></span></p><div class="highlight java" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-628d99af140b457a3fec2d447f86a90ada4d3ded" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ResWord" style="color: rgb(160, 0, 0);">import</span> <span class="ID">com.opsware.script.ScriptJobArgs</span>;</span>
</pre></div></div><span class="anchor" id="line-163" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">In Python using the pytwist library we would code<span class="anchor" id="line-164"></span><span class="anchor" id="line-165"></span><span class="anchor" id="line-166"></span><span class="anchor" id="line-1-17"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-e2494ef96cde9f1ec33f8de196de0d0005f1e540" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ResWord" style="color: rgb(160, 0, 0);">from</span> <span class="ID">pytwist.com.opsware.script</span> <span class="ResWord" style="color: rgb(160, 0, 0);">import</span> <span class="ID">ScriptJobArgs</span></span>
</pre></div></div><span class="anchor" id="line-167" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-168" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line867" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;"></p><h2 id="Accessing_class_static_variables" style="color: rgb(0, 0, 0); letter-spacing: normal; text-transform: none; font-family: sans-serif;">Accessing class static variables</h2><span class="anchor" id="line-169" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-170" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Consider the Java code definition for this class:<span class="anchor" id="line-171"></span><span class="anchor" id="line-172"></span><span class="anchor" id="line-173"></span><span class="anchor" id="line-174"></span><span class="anchor" id="line-175"></span><span class="anchor" id="line-1-19"></span></p><div class="highlight java" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-2bf5c3e01a6e70fa95c08142ca4ad959cedd493f" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ResWord" style="color: rgb(160, 0, 0);">public</span> <span class="ResWord" style="color: rgb(160, 0, 0);">abstract</span> <span class="ResWord" style="color: rgb(160, 0, 0);">class</span> <span class="ID">ScriptJobArgs</span> <span class="ResWord" style="color: rgb(160, 0, 0);">implements</span> <span class="ID">Serializable</span> {</span>
<span class="line"><span class="LineAnchor" id="CA-2bf5c3e01a6e70fa95c08142ca4ad959cedd493f_2"></span><span class="anchor" id="line-2-4"></span>     <span class="ResWord" style="color: rgb(160, 0, 0);">public</span> <span class="ResWord" style="color: rgb(160, 0, 0);">static</span> <span class="ResWord" style="color: rgb(160, 0, 0);">final</span> <span class="ResWord" style="color: rgb(160, 0, 0);">int</span> <span class="ID">NO_OUTPUT_SIZE</span> = -<span class="Number" style="color: rgb(0, 128, 192);">1</span>;</span>
<span class="line"><span class="LineAnchor" id="CA-2bf5c3e01a6e70fa95c08142ca4ad959cedd493f_3"></span><span class="anchor" id="line-3-4"></span>...</span>
</pre></div></div><span class="anchor" id="line-176" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Once a class has been imported class static public variables and methods may be accessed using the DOT notation.<span class="anchor" id="line-177"></span><span class="anchor" id="line-178"></span><span class="anchor" id="line-179"></span><span class="anchor" id="line-180"></span><span class="anchor" id="line-1-21"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-7d735ea1b30372ba6bd11dff2a94c4a3106ab295" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ResWord" style="color: rgb(160, 0, 0);">from</span> <span class="ID">pytwist.com.opsware.script</span> <span class="ResWord" style="color: rgb(160, 0, 0);">import</span> <span class="ID">ScriptJobArgs</span></span>
<span class="line"><span class="LineAnchor" id="CA-7d735ea1b30372ba6bd11dff2a94c4a3106ab295_2"></span><span class="anchor" id="line-2-5"></span><span class="ID">noOutput</span> = <span class="ID">ScriptJobArgs</span>.<span class="ID">NO_OUTPUT_SIZE</span></span>
</pre></div></div><span class="anchor" id="line-181" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-182" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line867" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;"></p><h2 id="get.2Fset_class_methods" style="color: rgb(0, 0, 0); letter-spacing: normal; text-transform: none; font-family: sans-serif;">get/set class methods</h2><span class="anchor" id="line-183" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-184" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line862" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">If you examine the Java class ScriptJobArgs you'll see it has the following methods as seen in the Twister API documentation page.<span class="anchor" id="line-185"></span><span class="anchor" id="line-186"></span><span class="anchor" id="line-187"></span><span class="anchor" id="line-188"></span><span class="anchor" id="line-189"></span><span class="anchor" id="line-190"></span><span class="anchor" id="line-191"></span><span class="anchor" id="line-192"></span><span class="anchor" id="line-1-23"></span></p><div class="highlight java" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-ed3a20695788b1b671a2d3fb434c163bbe9e3082" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"> <span class="ID">String</span> <span class="ID">setParameters</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-ed3a20695788b1b671a2d3fb434c163bbe9e3082_2"></span><span class="anchor" id="line-2-6"></span> <span class="ResWord" style="color: rgb(160, 0, 0);">int</span> <span class="ID">getTailOutputSize</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-ed3a20695788b1b671a2d3fb434c163bbe9e3082_3"></span><span class="anchor" id="line-3-5"></span> <span class="ResWord" style="color: rgb(160, 0, 0);">int</span> <span class="ID">getTimeOut</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-ed3a20695788b1b671a2d3fb434c163bbe9e3082_4"></span><span class="anchor" id="line-4-3"></span> <span class="ResWord" style="color: rgb(160, 0, 0);">void</span> <span class="ID">setParameters</span>(<span class="ID">String</span> <span class="ID">parameters</span>)</span>
<span class="line"><span class="LineAnchor" id="CA-ed3a20695788b1b671a2d3fb434c163bbe9e3082_5"></span><span class="anchor" id="line-5-3"></span> <span class="ResWord" style="color: rgb(160, 0, 0);">void</span> <span class="ID">setTailOutputSize</span>(<span class="ResWord" style="color: rgb(160, 0, 0);">int</span> <span class="ID">tailOutputSize</span>)</span>
<span class="line"><span class="LineAnchor" id="CA-ed3a20695788b1b671a2d3fb434c163bbe9e3082_6"></span><span class="anchor" id="line-6-3"></span> <span class="ResWord" style="color: rgb(160, 0, 0);">void</span> <span class="ID">setTimeOut</span>(<span class="ResWord" style="color: rgb(160, 0, 0);">int</span> <span class="ID">timeOut</span>)</span>
</pre></div></div><span class="anchor" id="line-193" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">In Java we code the following:<span class="anchor" id="line-194"></span><span class="anchor" id="line-195"></span><span class="anchor" id="line-196"></span><span class="anchor" id="line-197"></span><span class="anchor" id="line-198"></span><span class="anchor" id="line-1-25"></span></p><div class="highlight java" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-32de20b2e730af70e1ed6cc2b39460cb94e207a7" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line">  <span class="ID">ScriptJobArgs</span> <span class="ID">args</span> = <span class="ResWord" style="color: rgb(160, 0, 0);">new</span> <span class="ID">ScriptJobArgs</span>();</span>
<span class="line"><span class="LineAnchor" id="CA-32de20b2e730af70e1ed6cc2b39460cb94e207a7_2"></span><span class="anchor" id="line-2-7"></span>  <span class="ResWord" style="color: rgb(160, 0, 0);">int</span> <span class="ID">oldTimer</span> = <span class="ID">args</span>.<span class="ID">getTimeout</span>();</span>
<span class="line"><span class="LineAnchor" id="CA-32de20b2e730af70e1ed6cc2b39460cb94e207a7_3"></span><span class="anchor" id="line-3-6"></span>  <span class="ID">args</span>.<span class="ID">setTimeOut</span>(<span class="Number" style="color: rgb(0, 128, 192);">3600</span>);</span>
</pre></div></div><span class="anchor" id="line-199" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">In Python the same logic would be coded as:<span class="anchor" id="line-200"></span><span class="anchor" id="line-201"></span><span class="anchor" id="line-202"></span><span class="anchor" id="line-203"></span><span class="anchor" id="line-204"></span><span class="anchor" id="line-1-27"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-9195933e6e1ffddc164df83b13bc567c66f05c6a" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ID">args</span> = <span class="ID">ScriptJobArgs</span>()</span>
<span class="line"><span class="LineAnchor" id="CA-9195933e6e1ffddc164df83b13bc567c66f05c6a_2"></span><span class="anchor" id="line-2-8"></span><span class="ID">oldTimer</span> = <span class="ID">args</span>.<span class="ID">timeOut</span></span>
<span class="line"><span class="LineAnchor" id="CA-9195933e6e1ffddc164df83b13bc567c66f05c6a_3"></span><span class="anchor" id="line-3-7"></span><span class="ID">args</span>.<span class="ID">timeOut</span> = <span class="Number" style="color: rgb(0, 128, 192);">3600</span></span>
</pre></div></div><span class="anchor" id="line-205" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Rules:<span class="anchor" id="line-206"></span></p><ul style="color: rgb(0, 0, 0); font-family: sans-serif;"><li><p class="line862" style="margin: 0.25em 0px;">There is no&nbsp;<strong>new</strong>&nbsp;keyword in Python to instantiate a class. Calling the Class will create an instance.<span class="anchor" id="line-207"></span></p></li><li><p class="line862" style="margin: 0.25em 0px;">In the above example we wrote&nbsp;<strong>args.timeOut</strong>&nbsp;and not&nbsp;<strong>args.getTimeout()</strong>. To get/set attributes of a class instance you access them directly with the dot operator or assign them with equals. There is no need to use the Java style get/set accessor methods although they will still work its not considered pythonic. The case also changed subtlety in case you missed it; getTimeOut became timeOut<span class="anchor" id="line-208"></span></p></li><li>drop the getXYZ prefix and lowercase the X letter. This same rule applies to setXYZ, findXYZ, isXYZ and other methods, its a common pattern.<span class="anchor" id="line-209"></span><span class="anchor" id="line-210"></span></li></ul><p class="line867" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;"></p><h2 id="Getting_a_handle_to_a_service_interface" style="color: rgb(0, 0, 0); letter-spacing: normal; text-transform: none; font-family: sans-serif;">Getting a handle to a service interface</h2><span class="anchor" id="line-211" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-212" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">All interactions with the UAPI are by way of the Service interfaces.<span class="anchor" id="line-213"></span><span class="anchor" id="line-214"></span></p><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">In the Java documentation these are interfaces within a package context. Some packages may provide more than one Service.<span class="anchor" id="line-215"></span><span class="anchor" id="line-216"></span><span class="anchor" id="line-217"></span><span class="anchor" id="line-218"></span></p><pre style="color: rgb(0, 0, 0); border-width: 1pt; border-style: solid; border-color: rgb(174, 189, 204); background-color: rgb(243, 245, 247); padding: 5pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="anchor" id="line-1-1"></span>Package: com.opsware.search
<span class="anchor" id="line-2-1"></span>Interface: SearchService</pre><span class="anchor" id="line-219" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line862" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">To get a handle to this Service we use the TwistServer() context created early. We drop the 'com.opsware' component of the Java package path and construct the following<span class="anchor" id="line-220"></span><span class="anchor" id="line-221"></span><span class="anchor" id="line-222"></span><span class="anchor" id="line-1-29"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-317fa2a0ec0a0cf9a85ce9a92376f652e74e72fa" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line">&gt;&gt;&gt; <span class="ID">ss</span> = <span class="ID">ts</span>.<span class="ID">search</span>.<span class="ID">SearchService</span></span>
</pre></div></div><span class="anchor" id="line-223" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line862" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">The "path" to the service is just the interface in the unified API minus the "com.opsware" portion. (e.g. job.JobService, search.SearchService)<span class="anchor" id="line-224"></span><span class="anchor" id="line-225"></span></p><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Each API interface consists of a set of methods. These methods are categorized into getters, setters, creators, finders, and actions.<span class="anchor" id="line-226"></span></p><ul style="color: rgb(0, 0, 0); font-family: sans-serif;"><li><p class="line891" style="margin: 0.25em 0px;"><em>Getters.</em>&nbsp;A getter's name will be&nbsp;<tt class="backtick">getMemberName</tt>&nbsp;where&nbsp;<tt class="backtick">MemberName</tt>&nbsp;translates to a data member named&nbsp;<tt class="backtick">memberName</tt>. The prefix 'is' will be used instead of 'get' where the datatype is a boolean.<span class="anchor" id="line-227"></span></p></li><li><p class="line891" style="margin: 0.25em 0px;"><em>Setters.</em>&nbsp;Setter methods are similar to JavaBean's setters. A setter's name will be&nbsp;<tt class="backtick">setMemberName</tt>&nbsp;where&nbsp;<tt class="backtick">MemberName</tt>&nbsp;translates to a data member named&nbsp;<tt class="backtick">memberName</tt>. A setter will have only one parameter.<span class="anchor" id="line-228"></span></p></li><li><p class="line891" style="margin: 0.25em 0px;"><em>Creators.</em>&nbsp;Creator methods are static methods that create an instance of an object. Its return type is the interface's identity VO (Value Object)<span class="anchor" id="line-229"></span></p></li><li><p class="line891" style="margin: 0.25em 0px;"><em>Finders.</em>&nbsp;Finder methods start with 'find' and normally return one or more identity references. The standard Finder method takes a&nbsp;<tt>com.opsware.common.Filter</tt>&nbsp;object as a search criteria and returns an array of IdentityRef object refs.<span class="anchor" id="line-230"></span></p></li><li><p class="line891" style="margin: 0.25em 0px;"><em>Actions.</em>&nbsp;Actions are&nbsp;<tt class="backtick">other</tt>&nbsp;functions.<span class="anchor" id="line-231"></span><span class="anchor" id="line-232"></span></p></li></ul><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">What are References and VO's ?<span class="anchor" id="line-233"></span></p><ul style="color: rgb(0, 0, 0); font-family: sans-serif;"><li>Object references or objRefs - are used to identify logical objects exposed thru the API. Its a pointer.<span class="anchor" id="line-234"></span></li><li>Value Objects (VO) - are used to transfer associated members of an object. Its the Data and sometimes methods.<span class="anchor" id="line-235"></span><span class="anchor" id="line-236"></span></li></ul><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">A reference (objRef) is a composite pointer. It will consist of three values; the reference type, an id, and a name for the thing being pointed at. The name is often handy if you need a description of the thing being pointed at without having to invoke a VO lookup first.<span class="anchor" id="line-237"></span><span class="anchor" id="line-238"></span><span class="anchor" id="line-239"></span><span class="anchor" id="line-240"></span><span class="anchor" id="line-241"></span><span class="anchor" id="line-242"></span><span class="anchor" id="line-243"></span><span class="anchor" id="line-244"></span><span class="anchor" id="line-245"></span><span class="anchor" id="line-246"></span><span class="anchor" id="line-1-31"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line">&gt;&gt;&gt; <span class="ID">ref</span> = <span class="ID">ts</span>.<span class="ID">searchService</span>.<span class="ID">findObjRefs</span>(<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">'</span>,<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">facility</span><span class="String" style="color: rgb(0, 64, 128);">'</span>)[<span class="Number" style="color: rgb(0, 128, 192);">0</span>]</span>
<span class="line"><span class="LineAnchor" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9_2"></span><span class="anchor" id="line-2-9"></span>&gt;&gt;&gt; <span class="ResWord" style="color: rgb(160, 0, 0);">vars</span>(<span class="ID">ref</span>)</span>
<span class="line"><span class="LineAnchor" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9_3"></span><span class="anchor" id="line-3-8"></span>{<span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">secureResourceTypeName</span><span class="String" style="color: rgb(0, 64, 128);">'</span>: <span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">facility</span><span class="String" style="color: rgb(0, 64, 128);">'</span>, <span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">idAsLong</span><span class="String" style="color: rgb(0, 64, 128);">'</span>: <span class="Number" style="color: rgb(0, 128, 192);">40001L</span>, <span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">id</span><span class="String" style="color: rgb(0, 64, 128);">'</span>: <span class="Number" style="color: rgb(0, 128, 192);">40001L</span>, <span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">name</span><span class="String" style="color: rgb(0, 64, 128);">'</span>: <span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">OX4</span><span class="String" style="color: rgb(0, 64, 128);">'</span>}</span>
<span class="line"><span class="LineAnchor" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9_4"></span><span class="anchor" id="line-4-4"></span>&gt;&gt;&gt; <span class="ID">ref</span>.<span class="ID">id</span></span>
<span class="line"><span class="LineAnchor" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9_5"></span><span class="anchor" id="line-5-4"></span><span class="Number" style="color: rgb(0, 128, 192);">40001L</span></span>
<span class="line"><span class="LineAnchor" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9_6"></span><span class="anchor" id="line-6-4"></span>&gt;&gt;&gt; <span class="ID">ref</span>.<span class="ID">name</span></span>
<span class="line"><span class="LineAnchor" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9_7"></span><span class="anchor" id="line-7-3"></span><span class="String" style="color: rgb(0, 64, 128);">'</span><span class="String" style="color: rgb(0, 64, 128);">OX4</span><span class="String" style="color: rgb(0, 64, 128);">'</span></span>
<span class="line"><span class="LineAnchor" id="CA-4e63e811bf1d63157b01c538236706a877fe85a9_8"></span><span class="anchor" id="line-8-3"></span>&gt;&gt;&gt;</span>
</pre></div></div><span class="anchor" id="line-247" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-248" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line867" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;"></p><h2 id="Other_Quirks" style="color: rgb(0, 0, 0); letter-spacing: normal; text-transform: none; font-family: sans-serif;">Other Quirks</h2><span class="anchor" id="line-249" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-250" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Some other quirks which deserve a section of their own.<span class="anchor" id="line-251"></span></p><ul style="color: rgb(0, 0, 0); font-family: sans-serif;"><li>On input java object arrays (i.e Object[]) will accept both python tuples and arrays but the server will always return object arrays as tuples.<span class="anchor" id="line-252"></span></li><li>java.util.Date objects are passed back and forth as longs representing seconds since epoch.<span class="anchor" id="line-253"></span><span class="anchor" id="line-254"></span></li></ul><p class="line867" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;"></p><h2 id="About_the_examples" style="color: rgb(0, 0, 0); letter-spacing: normal; text-transform: none; font-family: sans-serif;">About the examples</h2><span class="anchor" id="line-255" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><span class="anchor" id="line-256" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Throughout the document you will see examples where a hard coded object ID has been used. Such as this:<span class="anchor" id="line-257"></span><span class="anchor" id="line-258"></span><span class="anchor" id="line-259"></span><span class="anchor" id="line-1-33"></span></p><div class="highlight python" style="color: rgb(0, 0, 0); font-family: sans-serif;"><div class="codearea" dir="ltr" lang="en" style="margin: 0.5em 0px; padding: 0px; border: 1pt solid rgb(174, 189, 204); background-color: rgb(243, 245, 247);"><pre dir="ltr" id="CA-bf5a1e23cd57243fd14f209686885e734da1e7f1" lang="en" style="border-width: initial; border-style: none; background-color: rgb(243, 245, 247); padding: 10pt; font-family: courier, monospace; white-space: pre-wrap; overflow-wrap: break-word;"><span class="line"><span class="ID">ref</span> = <span class="ID">ServerRef</span>(<span class="Number" style="color: rgb(0, 128, 192);">9190001</span>)</span>
</pre></div></div><span class="anchor" id="line-260" style="color: rgb(0, 0, 0); font-family: sans-serif;"></span><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">This is not best practice and has only been done in the interest of keeping the examples concise when highlighting a new functional area so additional search logic does not bloat the code.<span class="anchor" id="line-261"></span><span class="anchor" id="line-262"></span></p><p class="line874" style="color: rgb(0, 0, 0); letter-spacing: normal; font-family: sans-serif; font-size: 16px;">Why is it bad to hard code an Object ID ? If you migrate content from one mesh to another using CBT these ID's will change breaking your code. Using an ID number makes code brittle.</p>