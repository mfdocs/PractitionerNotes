<html><h2>Abstract</h2>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">This practitioner note provides a solution that uses Micro Focus Hybrid Cloud Management X (HCMX) to provision an ad-hoc test environment to test code changes and to deprovision the test environment after testing is complete in Development and Operations (DevOps) Continuous Integration (CI) and Continuous Delivery or Continuous Deployment (CD) process.</span></span></span></p>

<h2>Overview</h2>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">CICD stands for continuous integration (CI) and continuous delivery or continuous deployment (CD). With continuous integration, developers frequently commit to a shared repository using a version control system such as Git. Prior to each commit, developers may choose to run local unit tests on their code as an extra verification layer before integrating. A continuous integration service automatically builds and runs unit tests on the new code changes to immediately surface any errors. The key goals of continuous integration are to find and address bugs quicker, improve software quality, and reduce the time it takes to validate and release new software updates.&nbsp; </span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">With continuous delivery, code changes are automatically built, tested, and prepared for a release to the production environment. Continuous delivery expands upon continuous integration by deploying all code changes to a testing environment after the build stage. If testing is successful, code changes are released to the production environment only after approval.</span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Continuous deployment expands upon continuous delivery by deploying code changes to the production environment without human intervention.</span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In continuous delivery and continuous deployment phase, a testing environment is required to test the new build. This testing environment can be one of the following:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Always-on testing environment</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Ad-hoc testing environment</span></span></span></li>
</ol>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">An always-on testing environment is an environment in which there are dedicated resources running all the time in either the public cloud or private cloud provider. This type of an environment tends to consume resources and increase cloud spending. In this type of an environment, there can be only one CICD pipeline running at the same time as there is only a single always-on test environment.</span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">An ad-hoc testing environment is an environment in which resources are provisioned as needed during testing cycle of continuous delivery and continuous deployment phase. After testing is complete, these resources are deprovisioned thereby reducing cloud expenses. An ad-hoc testing environment also helps in running parallel CICD pipelines initiated by multiple developers at the same time. </span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Micro Focus Hybrid Cloud Management X (HCMX) assists in provisioning and deprovisioning of resources in an ad-hoc testing environment. HCMX enables customers to create service designs,&nbsp;service offerings, and&nbsp;automate the provisioning and management of hybrid and multi-cloud resources through exposed offerings. Some of the examples of service offerings exposed to end users are:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">A Microsoft Azure marketplace image such as ElasticSearch</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">An Amazon Web Services (AWS) marketplace image such as Wordpress</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">A virtual machine on Google Cloud</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">A database on VMware vCenter</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">A WebServer on OpenStack, etc.&nbsp; </span></span></span></li>
</ol>

<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">An ad-hoc test environment can be built by provisioning any of the exposed cloud service offerings in HCMX.</span></span></span></p>

<p><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">This practitioner note describes a solution that uses HCMX to provision&nbsp;ad-hoc test environment to test code changes and to deprovision the test environment after testing is complete in DevOps CICD process. The solution uses Jenkins to facilitate CICD process and integrates Jenkins with HCMX to provision and deprovision ad-hoc test environment. Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software. Concepts presented in this practitioner note can be extended to integrate HCMX with other applications that facilitate CICD process. Some of the examples of other applications that facilitate CICD process are Microsoft Azure DevOps, CircleCI, etc.&nbsp;</span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The solution works as follows:</span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/c/c2/HCI-SolutionHighlight.PNG" height="419" hspace="0" src="/mediawiki/images/pn_images/pn_image_60a54f25248276.53449147.png" style="width: 800px; height: 419px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Developer commits a code change to the Github repository.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Jenkins periodically polls for code changes in Github and triggers the Jenkins pipeline if there are code changes. The definition of a Jenkins Pipeline is stored in the pipeline script called Jenkinsfile.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The first stage of Jenkins pipeline is the <b>Checkout SCM (Source control management)</b> stage. In the <b>Checkout SCM</b> stage, the project code and Jenkinsfile is checked out from the source control repository.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The second stage of Jenkins pipeline is the <b>Build</b> stage. In the <b>Build</b> stage, code is compiled, dependencies are installed, unit and integration tests are performed. In the solution described in this practitioner note, for illustration purposes, a simple HelloWorld.sh script is built. The build stage can be a maven build, ant build, etc depending on your project requirements.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The third stage of Jenkins pipeline is the <b>Test (Staging)&nbsp;</b>stage. In the <b>Test</b> stage, an ad-hoc test environment is built by deploying necessary virtual machine(s) (VM) on the fly using HCMX. Build is copied to the virtual machines in ad-hoc test environment for testing. Testing is performed on the virtual machines in ad-hoc test environment. After testing is completed, ad-hoc test environment is deprovisioned and resources are freed up on the cloud provider. In the solution described in this practitioner note, the HelloWorld.sh script is copied to the deployed virtual machines in ad-hoc test environment and tested.</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The fourth and final stage of Jenkins pipeline is the <b>Deploy (Production)</b> stage. In the <b>Deploy</b> stage, new build is pushed to the production environment if <b>Test</b> stage was successful. In the solution described in this practitioner note, the deploy stage is not used.</span></span></span></li>
</ol>

<p><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The following are the advantages of this solution:</span></span></span></p>

<ol>
	<li style="margin-left:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Provision multiple identical virtual machines in a single Representational State Transfer (REST) Application Programming Interface (API) call to HCMX. Multiple virtual machines may be needed in a test environment to test distributed architecture, client server architecture, etc.</span></span></span></li>
	<li style="margin-left:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Setup a hybrid cloud test environment with one part of the application in private cloud and another part of application in public cloud.</span></span></span></li>
	<li style="margin-left:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Setup a multi cloud test environment with Tomcat on AWS and MySQL on Azure for example.</span></span></span></li>
	<li style="margin-left:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Deprovision test environment after testing of code changes, thereby reducing cloud spend.</span></span></span></li>
	<li style="margin-left:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Use consistent REST API calls to provision and deprovision resources regardless of target cloud providers such AWS, Azure, Google Cloud, VMWare vCenter, Openstack, etc.</span></span></span></li>
	<li style="margin-left:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Model your application architecture with HCMX service designs and provision entire application architecture to build ad-hoc test environment.</span></span></span></li>
	<li style="margin-left:11px; margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Provided solution builds ad-hoc test environment in the test stage. But concepts can be used to build an ad-hoc test environment in the build stage to conduct unit and integration tests.</span></span></span></li>
</ol>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">This solution has the following pre-requisites:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">HCMX</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Jenkins running on a Linux system (Or any other application that facilitates CICD process). Jenkins can be running on a Windows system, but appropriate changes must be made in the Jenkinsfile pipeline script.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Jenkins plugins such as Pipeline, Credentials and default set of plugins that get&nbsp;installed during Jenkins installation.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Git client</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Github repository (Or any other version control system)</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">VMWare vCenter (Or any cloud provider)</span></span></span></li>
</ol>

<p><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">This practitioner note includes the following code as part of the sample solution:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><b>HelloWorld.sh</b></span></span></span></li>
</ol>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">HelloWorld.sh is a simple shell script and it prints <b>Hello World</b>. This script is the entire project that gets built and tested in Jenkins. The <b>HelloWorld.sh</b> script is available for download in the <b>Appendix</b> section.</span></span></span></p>

<ol start="2">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><b>Jenkinsfile</b></span></span></span></li>
</ol>

<p style="margin-bottom:11px; margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile is the pipeline script and contains code necessary to automate the entire software development workflow that includes build, test and deploy to production stages. The Jenkinsfile included in this article contains code required to build HelloWorld.sh application, provision ad-hoc test environment in VMWare vCenter using <b>vCenter Compute – Deploy VM from template </b>service offering in HCMX, copy and test HelloWorld.sh script on the newly provisioned test environment, deprovision ad-hoc test environment through HCMX after testing is complete. The <b>Jenkinsfile</b> pipeline script is available for download in the <b>Appendix</b> section.</span></span></span></p>

<ol>
</ol>

<h2>Implement solution</h2>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">To implement this solution to use HCMX to provision and deprovision an ad-hoc testing environment in the CICD process, follow the steps below:</span></span></span></p>

<h3>Prepare VM template to be used to create VMs in ad-hoc test environment</h3>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Create a VM with all required software dependencies, network and hardware configuration, etc that are required to test your project and/or application.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to the Linux virtual machine running Jenkins server.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Switch user to the account under which Jenkins server is running. Usually, this is <b>jenkins</b> user account.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Run the following command to generate SSH key-pair: <b>ssh-keygen -t rsa</b></span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The command generates a private key in the file named ~/.ssh/id_rsa and a public key in the file named ~/.ssh/id_rsa.pub</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to the VM created in step 1 with an operating system (OS) user account that would be used to run application tests in CICD pipeline. </span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Add contents of the public key that was created in step 4 to the ~/.ssh/authorized_keys file in the OS user account that would be used to run tests.</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Convert virtual machine to a template. Name the VM template with your project name for easier identification</span></span></span></li>
</ol>

<h3>Create a user in HCMX</h3>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will create a new user with appropriate roles in HCMX. This new user’s credentials are used by Jenkins to provision and deprovision ad-hoc test environment in HCMX.</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to the HCMX suite administration portal as user suite-admin.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Create a new user such that the user is associated with an <b>Account</b> that has a tenant with Design and Deploy (DND) capability enabled. In the <b>role </b>field, select <b>Account user</b> instead of an <b>integration user</b>. An integration user does not have privileges to login to the HCMX employee self-service (ESS) portal. Using an <b>Account user</b> helps in troubleshooting integration issues as it has access to the HCMX ESS portal.</span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/b/b2/HCI-BOUserCreation-1.PNG" height="800" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094aae8988661.53331112.png" style="width: 678.027px; height: 800px; margin: 0px; border: 0px solid black;" vspace="0" width="678.0269058295964"></p>

<ol start="3">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log out of the HCMX suite administration portal.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">A user account activation email is sent by HCMX to the email address specified in the <b>Integ_Jenkins_HCMX</b> user record. Click on the user activation link in that email. User activation web page is launched in a web browser. Type in a new password and confirm the new password in the user activation web page. Note that the <b>SUBMIT</b> button does not show up until entered passwords match and they satisfy password complexity policy as defined in the IDM portal. Click <b>SUBMIT</b> button.</span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/d/d3/HCI-UserAccountActivation.PNG" height="763" hspace="0" src="https://docs.microfocus.com/mediawiki/images/d/d3/HCI-UserAccountActivation.PNG" style="width:709px;height:763px;margin-top:0px;margin-bottom:0px;margin-left:0px;margin-right:0px;border:0px solid black;" vspace="0" width="709"></p>

<ol start="5">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to the HCMX tenant agent interface as a user with tenant administration privileges.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">From the <b>mega menu (Three horizontal lines icon)</b>, navigate to <b>Administration</b> -&gt; <b>Master Data</b> -&gt; <b>People</b></span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/d/db/HCI-MegaMenuPeople.PNG" height="350" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094aae90ae687.23783097.png" style="width: 800px; height: 350px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="7">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Click <b>Sync </b>to sync the newly created user to the tenant. The user <b>Integ_Jenkins_HCMX</b> appears in the list of people records in the tenant.</span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/3/3d/HCI-TenantUserSync-1.PNG" height="272" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094aae97a4e80.99633188.png" style="width: 800px; height: 272px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="8">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Assign <b>CMP Agent </b>and <b>Self-Service portal user</b> roles to the <b>Integ_Jenkins_HCMX</b> user.</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Assign other appropriate roles to the <b>Integ_Jenkins_HCMX</b> user such that all HCMX cloud service offerings are visible to the <b>Integ_Jenkins_HCMX</b> user in HCMX ESS portal.</span></span></span></li>
</ol>

<h3>Configure offering's request deployment and closure without human intervention</h3>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will configure&nbsp;the HCMX offering such that its request deployment and closure happens without human intervention. The deployment of an offering's request pauses in the log phase if either the <strong>Owner</strong> field or the S<strong>ervice desk group</strong> field is not set a default value on the offering. The closure of an offering's deployed request pauses in the validation phase if <strong>Skip end user acceptance</strong> is not enabled on the offering. To configure offering's request deployment and closure without human intervention, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to the HCMX tenant agent interface&nbsp;as&nbsp;a<b>&nbsp;</b>user with catalog administration privileges.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Navigate to the list of offerings.&nbsp;Open the offering that you would like to use to deploy an ad-hoc test environment from Jenkins.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In the offering details window, navigate to the <strong>Default values</strong> page.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Set value for the <strong>Service desk group</strong> field.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Enable <strong>Skip end user acceptance</strong> checkbox.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Ensure that there are no approvals are set on the offering.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Click <strong>Save</strong>.</span></span></span></li>
</ol>

<p style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/2/2a/BO-OfferingDefaultValues.PNG" height="370" hspace="0" src="/mediawiki/images/pn_images/pn_image_609c974b9aac90.54896472.png" style="width: 800px; height: 370px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></span></span></span></p>

<h3>Get CreateRequest payload for the offering from HCMX</h3>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will get <b>CreateRequest</b> payload for the HCMX offering that you would like to deploy to create an ad-hoc test environment using CICD process. The CreateRequest REST API is used to create a new request from one of the exposed HCMX offerings.</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to the HCMX ESS portal as <b>Integ_Jenkins_HCMX</b> user.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Navigate to the list of offerings. An offering in HCMX may allow deployment of virtual machines in a vCenter, Amazon Web Services (AWS), Microsoft Azure, etc. </span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/a/a0/HCI-Offering.PNG" height="496" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094aaea2ec7f3.74839854.png" style="width: 800px; height: 496px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="3">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Click <b>REQUEST SERVICE</b> for the offering that you would like to use to deploy an ad-hoc test environment from the Jenkins CICD process. Corresponding offering submission page appears.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><b>Change default values in the offering submission page</b>. <b>Enter values for all the fields</b>. <b>Do not leave any field blank.</b></span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Enable <b>Developers tools</b> in your browser to capture the CreateRequest API request payload.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Click <b>Submit </b>in the offering submission page.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Copy the entire <b>Request Payload</b> source for the <b>CreateRequest</b> REST API call. Paste it into a notepad and save the file as <b>HCMXOffering-RequestPayload.txt</b>. Contents of this file will be used in later sections.</span></span></span></li>
</ol>

<p style="margin-bottom:11px; margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/8/80/HCI-REST-CreateRequest-3.PNG" height="506" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094aaeac1a124.36449108.png" style="width: 800px; height: 506px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol>
</ol>

<h3>Configure Jenkinsfile</h3>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will configure the provided Jenkinsfile to suit your project requirements, environment, build requirements, test requirements and deployment requirements. The Jenkinsfile included in this article contains code required to build HelloWorld.sh application, provision ad-hoc test environment in VMWare vCenter using <b>vCenter Compute – Deploy VM from template</b> service offering in HCMX, copy and test HelloWorld.sh script on the newly provisioned test environment, deprovision ad-hoc test environment through HCMX after testing is complete. The Jenkinsfile pipeline script is available for download in the Appendix section. This Jenkinsfile can be further enhanced to perform additional checks required for your environment, to improve performance, to use as a reference to develop it in other CICD applications, etc. Note that this Jenkinsfile is community contributed and not officially supported by Micro Focus. </span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">To configure the Jenkinsfile, follow the steps below:</span></span></span></p>

<h4>Create base Jenkinsfile</h4>

<ol>
	<li style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Copy contents of the Jenkinsfile from the <b>Appendix</b> section of this practitioner notes to a file.&nbsp; Save the file as Jenkinsfile.</span></span></span></li>
</ol>

<h4>Update global environment variable values</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will update the Jenkinsfile with global environment variable values that are applicable in your environment.</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Observe that the <b>environment</b> section in the Jenkinsfile has the following two sub-sections: Global environment variables and HCMX offering specific environment variables. In the <b>Global environment</b> <b>variables</b> section, update the following variable values and save the Jenkinsfile. </span></span></span></li>
</ol>

<table class="MsoTableGrid" style="margin-left:48px; border-collapse:collapse; border:none">
	<tbody>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Environment Variable Name</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Value</b></span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_EXT_ACCESS_HOSTNAME</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter your environment’s HCMX external access hostname. The HCMX external access hostname is the fully qualified domain name portion of the HCMX tenant self-service portal URL. If HCMX tenant self-service URL is <a href="https://server.xyz.com/saw?TENANTID=616409711" style="color:#0563c1; text-decoration:underline">https://server.xyz.com/saw?TENANTID=616409711</a>, then HCMX external access hostname is server.xyz.com. The HCMX_EXT_ACCESS_HOSTNAME variable is a mandatory variable and must contain a value.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_TENANT_ID</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter your environment’s HCMX tenant ID that has DND capability deployed in it. DND capability is required in a tenant to provision and manage VMs. HCMX DND capability will be used to provision VMs for creating an ad-hoc test environment and in which testing of the new build will be performed. After testing is complete, provisioned VMs are deleted so that resource usage on cloud provider is reduced, thereby reducing cloud expenses.&nbsp; If HCMX tenant ESS URL is <a href="https://server.xyz.com/saw?TENANTID=616409711" style="color:#0563c1; text-decoration:underline">https://server.xyz.com/saw?TENANTID=616409711</a>, then HCMX tenant ID is 616409711. The HCMX_TENANT_ID variable is a mandatory variable and must contain a value.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">USE_PROXY</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">If Jenkins needs a web proxy to reach HCMX, then set the USE_PROXY variable value to YES. The USE_PROXY variable is a mandatory variable and must contain a value. Possible values are YES and NO.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">PROXY_HOST</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter fully qualified domain name of web proxy server. If USE_PROXY variable is set to YES, then PROXY_HOST variable is a mandatory variable and must contain a value.</span></span></span></p>

			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">If USE_PROXY variable is set to NO, then PROXY_HOST variable is optional.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">PROXY_PORT</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter web proxy port number. If USE_PROXY variable is set to YES, then PROXY_PORT variable is a mandatory variable and must contain a value. If USE_PROXY variable is set to NO, then PROXY_PORT variable is optional.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">PROXY_PROTOCOL</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter web proxy protocol. If USE_PROXY variable is set to YES, then PROXY_PROTOCOL variable is a mandatory variable and must contain a value. </span></span></span></p>

			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">If USE_PROXY variable is set to NO, then PROXY_PROTOCOL variable is optional. Possible values are http and https.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">PROXY_REQUIRES_CREDENTIALS</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter YES if web proxy requires credentials, otherwise enter NO. If USE_PROXY variable is set to YES, then PROXY_REQUIRES_CREDENTIALS variable is a mandatory variable and must contain a value. If USE_PROXY variable is set to NO, then PROXY_REQUIRES_CREDENTIALS variable is optional. Possible values are YES and NO. </span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter interval in seconds to check status of HCMX offering (VM or VM with software) deployment request in HCMX. After submission of a new request to deploy an HCMX offering, that offering's deployment may take longer than 5 minutes depending on cloud provider, networking and other constraints. Setting HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS</span></span></span></p>

			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">variable value to a very low value causes Jenkins to check status of offering deployment very frequently. Setting HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS</span></span></span></p>

			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">variable value to a high value causes Jenkins to check status of offering deployment very infrequently and hence longer time to complete the CICD pipeline. &nbsp;Default value is 30 seconds.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_SUB_CANCEL_DELAY_SECONDS</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter time in seconds to wait before canceling the subscription after testing of build is complete. Once a subscription is canceled, the ad-hoc test environment’s virtual machines are deleted, and resources are released on the cloud provider.&nbsp; Set HCMX_SUB_CANCEL_DELAY_SECONDS variable to zero seconds if you are using it in production Jenkins environment. Set HCMX_SUB_CANCEL_DELAY_SECONDS variable to at-least 180 seconds if you are using it in a POC or demo environment so that the &nbsp;deployed ad-hoc test environment VMs are still available to show to the audience.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_REQ_DEPLOY_TIMEOUT_SECONDS</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter time in seconds to wait for HCMX and its target cloud provider to provision the ad-hoc test environment.&nbsp; If HCMX and its target cloud provider takes longer than the timeout specified in HCMX_REQ_DEPLOY_TIMEOUT_SECONDS variable, exit the build.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_REQ_TITLE</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter request title to use for the ad-hoc test environment deployment request in HCMX.</span></span></span></p>

			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_REQ_TITLE variable is a mandatory variable and must contain a value.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_REQ_DESCRIPTION</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter request description to use for the ad-hoc test environment deployment request in HCMX. HCMX_REQ_DESCRIPTION variable is a mandatory variable and must contain a value.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_SUB_NAME</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter subscription name to be used for the ad-hoc test environment deployment request in HCMX. A subscription associates’ user and their deployed services and/or assets. A subscription also has a start and end date.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:276px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_SUB_DESCRIPTION</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:300px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter subscription description to be used for the ad-hoc test environment deployment request in HCMX. </span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<p style="margin-bottom:11px"></p>

<h4>Update HCMX offering specific environment variables</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will </span></span></span></p>

<ul>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Identify values from the <b>CreateRequest</b> payload that can be parameterized. </span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Create variables in Jenkinsfile for those offering specific values that can be parameterized and generalized.</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Set default values for those HCMX offering specific variables in Jenkinsfile.</span></span></span></li>
</ul>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">To create HCMX offering specific environment variables and set their default values in Jenkinsfile, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Refer to the section, <b>Get CreateRequest payload for the offering from HCMX</b>, to derive create request payload for the offering that you would like to deploy to setup ad-hoc test environment. The CreateRequest API is used to submit a new offering deployment request in HCMX. A sample CreateRequest request payload for the <b>vCenter-Deploy VM from template</b> offering is as shown below. This request payload is color coded to group values and attributes based on their characteristic:</span></span></span></li>
</ol>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">{</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp; "entities": [</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp; {</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "entity_type": "Request",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "properties": {</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<span style="background:yellow">RequestedForPerson</span>": "10015",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<span style="background:yellow">StartDate</span>": 1620068620741,</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "RequestsOffering": "10096",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "CreationSource": "CreationSourceEss",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<span style="background:yellow">RequestedByPerson</span>": "10015",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "DataDomains": [</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Public"</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ],</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "UserOptions": "{\"complexTypeProperties\":[{\"properties\":{\"OptionSet0c6eb101a1a178c3c49c3badbc481f05_c\":{\"Option34c8d8d8403ac43361b8b8083004ef4a_c\":true},</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"OptionSet2ee4a8f73fcd1606c1337172e8411e2a_c\":{\"Option19cd6cd22067142e0977622ed71ced7d_c\":true},\"OptionSet473C6F2BE6F45DB8381664FC9097BE37_c\":{\"Option2E8493EA9AC2821929DA64FC90978A98_c\":true},\"changedUserOptionsForSimulation\":\"PropertyvmCpuCount19cd6cd22067142e0977622ed71ced7d_c&amp;\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertyserverCount34c8d8d8403ac43361b8b8083004ef4a_c\":\"<span style="background:fuchsia">2</span>\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertyproviderId2E8493EA9AC2821929DA64FC90978A98_c\":\"2c908fac77eefca5017822299d726af6\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertydatacenterName2E8493EA9AC2821929DA64FC90978A98_c\":\"<span style="background:fuchsia">CAT</span>\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertyvirtualMachine2E8493EA9AC2821929DA64FC90978A98_c\":\"<span style="background:fuchsia">catvmlmdep_t***CentOS 4/5 or later (64-bit)</span>\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertycustomizationTemplateName2E8493EA9AC2821929DA64FC90978A98_c\":\"<span style="background:fuchsia">(Ts)catvmLinuxDHCP</span>\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertyvmNamePrefix2E8493EA9AC2821929DA64FC90978A98_c\":\"<span style="background:fuchsia">HelloWorld</span>\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"Option19cd6cd22067142e0977622ed71ced7d_c\":true,</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"Optionad52a8efe1465faa8c389ae92bf90d0c_c\":false,</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertyvmMemorySize19cd6cd22067142e0977622ed71ced7d_c\":\"<span style="background:fuchsia">2048</span>\",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">\"PropertyvmCpuCount19cd6cd22067142e0977622ed71ced7d_c\":\"<span style="background:fuchsia">2</span>\"}}]}",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<span style="background:lime">Description</span>": "&lt;p&gt;CICD Process - VMs for building ad-hoc test environment&lt;/p&gt;",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<span style="background:lime">RelatedSubscriptionName</span>": "HelloWorld Application",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<span style="background:lime">RelatedSubscriptionDescription</span>": "&lt;p&gt;HelloWorld Application VMs&lt;/p&gt;",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "RequestAttachments": "{\"complexTypeProperties\":[]}",</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<span style="background:lime">DisplayLabel</span>": "Request: vCenter Compute - Deploy VM from Template"</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;&nbsp;&nbsp; }</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp; ],</span></span></span></p>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp; "operation": "CREATE"</span></span></span></p>

<p style="margin-bottom:11px; margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">}</span></span></span></p>

<p style="margin-left:48px"></p>

<ol start="2">
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The attribute names that are highlighted in <span style="background:yellow">yellow</span> color remain the same for all HCMX offerings. These attribute names have been already parameterized with variables in the Jenkinsfile. The table below shows the mapping of request payload attribute name and their corresponding variable names.</span></span></span></li>
</ol>

<table class="MsoTableGrid" style="margin-left:48px; border-collapse:collapse; border:none">
	<tbody>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Request payload attribute name</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Variable name</b></span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><span style="background:yellow">RequestedForPerson</span></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_PERSON_ID</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><span style="background:yellow">StartDate</span></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">epochMilliSeconds</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><span style="background:yellow">RequestedByPerson</span></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_PERSON_ID</span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<p style="margin-left:48px"></p>

<ol start="3">
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The values that are highlighted in <span style="background:fuchsia">pink</span> color are the offering specific values in the sample payload shown above. Identify the offering specific values that can be parameterized in your request payload. Create environment variables for those offering specific values that can be parameterized. Set meaningful default values for the HCMX offering specific environment variables. Note that the supplied Jenkinsfile has environment variables specific to the <b>vCenter – Deploy VM from template</b> HCMX offering. If you are using a different HCMX offering to setup ad-hoc test environment, remove these environment variables and replace with the variables that are specific to your HCMX offering request deployment payload values. The offering specific values are parameterized in the supplied Jenkinsfile with the following variables.</span></span></span></li>
</ol>

<table class="MsoTableGrid" style="margin-left:48px; border-collapse:collapse; border:none">
	<tbody>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Environment Variable Name</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Value</b></span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_VCENTER_DATACENTER</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter VMWare vCenter data center name in which VM must be deployed.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_VCENTER_VM_TEMPLATE</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter VMWare vCenter template name to be used for the deployment of VM. Use the VM template that was prepared in earlier steps.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_VCENTER_VM_CUSTOMSPEC</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter VMWare vCenter custom specification name to be used for the deployment of VM.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_VCENTER_VMNAME_PREFIX</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter VM name prefix to be used for the deployment of VM.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_VCENTER_VM_MEMORY_SIZE_MB</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter memory size in MB to be used for the deployment of VM.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_VCENTER_VM_NUM_CPU</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter number of CPUs to be used for the deployment of VM.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_VCENTER_VM_NUM</span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Enter number of identical virtual machines to be deployed for the ad-hoc test environment.</span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<ol start="4">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The attribute names that are highlighted in <span style="background:lime">green</span> color remain the same for all HCMX offerings. These attributes have been already parameterized in the global environment variables section of the Jenkinsfile. The attributes highlighted in green color are mapped to the global environment variables as follows:</span></span></span></li>
</ol>

<table class="MsoTableGrid" style="margin-left:48px; border-collapse:collapse; border:none">
	<tbody>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Request payload attribute name</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Global environment variable name</b></span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><span style="background:lime">DisplayLabel</span></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_REQ_TITLE</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><span style="background:lime">Description</span></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_REQ_DESCRIPTION</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><span style="background:lime">RelatedSubscriptionName</span></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_SUB_NAME</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><span style="background:lime">RelatedSubscriptionDescription</span></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:288px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX_SUB_DESCRIPTION</span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<ol start="5">
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The attributes and values that are not highlighted in any color have a constant value or they do not need to be parameterized.</span></span></span></li>
</ol>

<h4>Update HCMX offering specific environment variable initialization and validation</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile included in this practitioner note includes code to initialize and validate environment variables that are specific to the HCMX&nbsp;<strong>vCenter Compute - Deploy VM from template</strong> offering.&nbsp;If you are using a different offering to deploy ad-hoc test environment, you must change code to validate environment variables that are specific to your offering.&nbsp;To change Jenkinsfile to initialize and validate that are specific to your HCMX offering, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Open the Jenkinsfile in a text editor of your choice.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile has code to initialize and validate HCMX offering specific environment variables below the following commented text&nbsp;HCMX_OFFERING_SPECIFIC_ENV_VARIABLE_INIT_VALIDATION_SECTION_START</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Search for the following text:&nbsp;HCMX_OFFERING_SPECIFIC_ENV_VARIABLE_INIT_VALIDATION_SECTION_START</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In the code block below it, understand sample code to initialize and validate environment variables that are specific to the HCMX&nbsp;<strong>vCenter Compute - Deploy VM from template</strong> offering.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">If you are using an&nbsp;offering other than the&nbsp;<strong>vCenter Compute - Deploy VM from template</strong> offering to provision ad-hoc test environment, refer to the <strong>Update HCMX offering specific environment variables</strong> section to identify the offering specific environment variables.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Remove the existing code to&nbsp;initialize and validate environment variables that are specific to the <strong>vCenter Compute - Deploy VM from template</strong> offering.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Insert the code&nbsp;to&nbsp;initialize and validate environment variables that are specific to your HCMX offering.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Save Jenkinsfile.</span></span></span></li>
</ol>

<h4>Update build stage</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, update Jenkinsfile to compile your code, install dependencies, perform unit test and integration tests. You may use maven, ant, etc to build your project. In the supplied Jenkinsfile, a simple HelloWorld.sh script is built. This HelloWorld.sh script prints "Hello World" and it is available for download in the <b>Appendix</b> section of this practitioner note. Replace the build stage code with the code specific to your build requirements. For example, you may need to use ant or maven to build your code.</span></span></span></p>

<h4>Update test stage</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, update Jenkinsfile to perform user acceptance testing in an ad-hoc test environment. In the supplied Jenkinsfile, code necessary to provision and deprovision an ad-hoc test environment is included. The Jenkinsfile also includes code required to copy the HelloWorld.sh script to the ad-hoc test environment VMs and test the HelloWorld.sh script on the test environment VMs. Update test stage section of the Jenkinsfile with the following code changes:</span></span></span></p>

<ul>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Change HCMX offering deployment request payload.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Update IP address property name.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Update <b>Copy build to ad-hoc test environment</b> section to suite your project’s requirements.</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Update <b>Test build in ad-hoc test environment</b> section to suite your project’s requirements.</span></span></span></li>
</ul>

<h5>Change HCMX offering deployment request API payload</h5>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The HCMX offering deployment request API payload varies from one offering to another offering. The HCMX offering deployment request API payload also varies from one HCMX environment to another HCMX environment for the same offering. The Jenkinsfile included in this practitioner note has the deployment request API payload for the <b>vCenter compute – Deploy VM from template</b> HCMX offering. This request payload must be changed to reflect your environment and/or your HCMX offering. To change the HCMX offering deployment request payload, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Open the Jenkinsfile in a text editor of your choice.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile has code to deploy ad-hoc test environment below the following commented text DEPLOY_ADHOC_TEST_ENVIRONMENT_REQUEST_USING_HCMX_OFFERING</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Search for the following text: DEPLOY_ADHOC_TEST_ENVIRONMENT_REQUEST_USING_HCMX_OFFERING</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Understand various variables used and structure of the existing deployment request API call in the <b>if</b> block and <b>else</b> block. Note that backspaces are used to escape backspace character in the <b>UserOptions</b> attribute. Refer to the <b>Get CreateRequest payload for the offering from HCMX</b> section to get request payload specific to your offering. Refer to the <b>Global environment variables </b>and <b>HCMX offering specific environment variables </b>sections on how to identify, parameterize and create variables. </span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Replace existing offering deployment request API call with your offering deployment request signature in the <b>if</b> block and <b>else</b> block. Change the <strong>RequestsOffering</strong> attribute's number with the one relevant to your offering based on the request API payload. Replace contents in the <strong>UserOptions</strong> attribute using the request API payload specific to your offering. Also use appropriate variables for the values that have been parameterized. Use backspace to escape backspaces that are used in the API signature where necessary.&nbsp; </span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Save Jenkinsfile.</span></span></span></li>
</ol>

<h5>Update IP address property name</h5>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile included in this practitioner note uses HCMX deployed offering's server component property,&nbsp;<strong>primary_ip_address</strong>&nbsp;, to get IP address of deployed vritual machines. If your offering's server component property contains IP address in a property other than <strong>primary_ip_address</strong> property, then update Jenkinsfile to use a different property name to retrieve IP address. To change Jenkinsfile to query a non-default server component's IP address property name, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Open the Jenkinsfile in a text editor of your choice.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile has code to query for the IP address property below the following commented text&nbsp;HCMX_QUERY_VM_IP_PROPERTY</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Search for the following text: HCMX_QUERY_VM_IP_PROPERTY</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In the if statement below it, change the default <strong>primary_ip_address</strong> to the new property name that has IP address on the server component in HCMX. </span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Save Jenkinsfile.</span></span></span></li>
</ol>

<h5>Update “Copy build to ad-hoc test environment” section</h5>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile included in this practitioner note copies the <b>build</b> directory to /tmp directory on the newly deployed VMs in the ad-hoc test environment. To change what is copied from the Jenkins server, the target directory on the VMs in ad-hoc test environment, and to setup additional dependencies on target VMs, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Open the Jenkinsfile in a text editor of your choice.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile has code to copy build to the ad-hoc test environment below the following commented text COPY_BUILD_TO_ADHOC_TEST_ENVIRONMENT</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Search for the following text: COPY_BUILD_TO_ADHOC_TEST_ENVIRONMENT</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Modify existing code to suite your requirements to copy build to the VMs in ad-hoc test environment. You can also include additional code to setup further dependencies in the target test environment. </span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Save Jenkinsfile.</span></span></span></li>
</ol>

<h5>Update “Test build in ad-hoc test environment” section</h5>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile included in this practitioner note tests the HelloWorld.sh script on the newly deployed VM(s) in ad-hoc test environment. To change how testing of your build is done on the deployed VMs in ad-hoc test environment, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Open the Jenkinsfile in a text editor of your choice.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Jenkinsfile has the code to test build in the ad-hoc test environment below the following commented text TEST_BUILD_IN_ADHOC_TEST_ENVIRONMENT</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Search for the following text: TEST_BUILD_IN_ADHOC_TEST_ENVIRONMENT</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Modify existing code to suite your testing requirements in the ad-hoc test environment. </span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Save Jenkinsfile.</span></span></span></li>
</ol>

<h4>Update deploy stage</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will update Jenkinsfile to deploy tested build to the production environment. The Jenkinsfile included in this practitioner note does not have code to deploy build to the production environment. Use of this deploy stage is optional. If your project has a requirement to deploy code changes without approval to the production environment after code has been built and test, write code that takes the tested build and deploys it into production environment.</span></span></span></p>

<ol>
</ol>

<h3>Setup Git repository</h3>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Create a new Git repository or use an existing Git repository.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Upload the following files to the root of Git repository:</span></span></span></li>
</ol>

<ul>
	<li style="margin-left:56px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">HelloWorld.sh (Included as a sample code in this practitioner note. Replace it with your project’s directory structure and code)</span></span></span></li>
	<li style="margin-left:56px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Updated Jenkinsfile from earlier sections</span></span></span></li>
</ul>

<ol start="3">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The Git repository for the sample Hello World application use case described in this practitioner note is as shown below:</span></span></span></li>
</ol>

<p style="margin-bottom:11px; margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/2/29/HCI-GitHubRepository.PNG" height="475" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acdb089199.95381437.png" style="width: 800px; height: 475px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<h3>Setup Jenkins</h3>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In this section, you will configure credentials in Jenkins to provide access to Github repository, HCMX and web-proxy, create a pipeline project to run CICD process and approve script/signatures used in the Jenkinsfile.</span></span></span></p>

<h4>Add credentials in Jenkins to access Git repository</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The following methods are commonly used to access Git repository from Jenkins:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Username and password: In this method, Git username and password are stored as credentials in Jenkins.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">SSH username and its keys: In this method, SSH key pair is generated. Public key is stored on the Git server. Private key is stored as credentials in Jenkins.</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Personal access token: In this method, a personal access token is generated in Git. This personal access token is then stored as a credential in Jenkins.</span></span></span></li>
</ol>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Based on your organization requirements, select any one of the above methods and create credentials in Jenkins to access Git repository.</span></span></span></p>

<h4>Configure path to Git executable</h4>

<p style="margin-bottom:11px"><font face="Calibri, sans-serif"><span style="font-size:14.6667px">From the Jenkins dashboard, navigate to <strong>Manage </strong><strong>Jenkins&nbsp;</strong>-&gt; <strong>System Configuration</strong> -&gt; <strong>Global Tool Configuration&nbsp;</strong>-&gt;<strong> Git</strong>.&nbsp;Configure path to Git executable.</span></font></p>

<p style="margin-bottom:11px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/e/e7/HCI-GitExecutablePath.PNG" height="268" hspace="0" src="/mediawiki/images/pn_images/pn_image_609ca37ec537c8.63052109.png" style="width: 800px; height: 268px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<h4>Configure Git plugin user name and email</h4>

<p style="margin-bottom:11px"><font face="Calibri, sans-serif"><span style="font-size: 14.6667px;">From the Jenkins dashboard, navigate to <strong>Manage </strong><strong>Jenkins&nbsp;</strong>-&gt; <strong>System Configuration</strong> -&gt; <strong>Configure System </strong>-&gt;<strong> Git Plugin</strong>.&nbsp;Configure Git plugin user name and email. Use the email address specified in your Git repository account.</span></font></p>

<p style="margin-bottom:11px"><font face="Calibri, sans-serif"><span style="font-size: 14.6667px;"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/0/05/HCI-GitPluginGlobalConfig.PNG" height="310" hspace="0" src="/mediawiki/images/pn_images/pn_image_609c9ece15bbd6.36271189.png" style="width: 800px; height: 310px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></span></font></p>

<p style="margin-bottom:11px"></p>

<h4>Add credentials in Jenkins to access HCMX</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Add credentials in Jenkins with the following details:</span></span></span></p>

<table class="MsoTableGrid" style="border-collapse:collapse; border:none">
	<tbody>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Credential ID</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMXUser</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Scope</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Global (Jenkins, nodes, items, all child items, etc)</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Credential Type</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Username with password</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Username</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Integ_Jenkins_HCMX (Or other username that you have created in HCMX for integration with Jenkins)</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Password</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Password of <b>Integ_Jenkins_HCMX</b> user.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Description</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">HCMX User</span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<p style="margin-bottom:11px"></p>

<h4>Add credentials in Jenkins to access web proxy</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Add credentials in Jenkins with the following details:</span></span></span></p>

<table class="MsoTableGrid" style="border-collapse:collapse; border:none">
	<tbody>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Credential ID</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:1px solid black; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">ProxyCred</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Scope</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Global (Jenkins, nodes, items, all child items, etc)</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Credential Type</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Username with password</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Username</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">If credentials are required to access web proxy, then type in proxy user name. If credentials are not required to access web proxy, then type <b>anonymous</b>. </span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Password</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">If credentials are required to access web proxy, then type in proxy user password. If credentials are not required to access web proxy, then leave it blank.</span></span></span></p>
			</td>
		</tr>
		<tr>
			<td style="border-bottom:1px solid black; width:126px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:1px solid black" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif"><b>Description</b></span></span></span></p>
			</td>
			<td style="border-bottom:1px solid black; width:498px; padding:0in 7px 0in 7px; border-top:none; border-right:1px solid black; border-left:none" valign="top">
			<p><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Proxy credentials</span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<p style="margin-bottom:11px"></p>

<h4>Create or update pipeline project</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Create a new pipeline project or modify existing pipeline project to point to the updated Jenkinsfile. You can define pipeline script (Jenkinsfile) right within Jenkins or get pipeline script from SCM for every new build. If you source pipeline script from SCM, select SCM type, provide credentials to access SCM and project repository, and provide path to the Jenkinsfile on the repository. You can configure the pipeline project to periodically poll SCM for any changes and start a new build OR associate a webhook in Git repository to initiate a new build in Jenkins OR manually start a build in Jenkins.</span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">For the sample Hello World application use case described in this practitioner note, screenshot for the pipeline project configuration in Jenkins is as shown below:</span></span></span></p>

<p style="margin-bottom:11px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/e/e8/HCI-Jenkins-Project-HelloWorld-1.PNG" height="515" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acdb51dbe7.09742822.png" style="width: 800px; height: 515px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<p style="margin-bottom:11px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/8/86/HCI-Jenkins-Project-HelloWorld-2.PNG" height="378" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acdbc011b5.11432246.png" style="width: 800px; height: 378px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<p style="margin-bottom:11px"></p>

<h4>Run build</h4>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">After the new project has been created or existing project has been updated, run build to test the entire CICD process. Update Jenkinsfile to fix any issues you might experience. Once all issues have been fixed, allow developers to use the Jenkins pipeline to build code, provision ad-hoc test environment, test, de-provision ad-hoc test environment and deploy code to production. </span></span></span></p>

<h5>Script approvals</h5>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">When a new build is run, the build will fail until the following scripts/signatures are approved:</span></span></span></p>

<ul>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">method groovy.json.JsonSlurperClassic parseText java.lang.String</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">new groovy.json.JsonSlurperClassic</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">new java.util.ArrayList</span></span></span></li>
</ul>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">After the above signatures are approved, build will not fail pending script approvals.</span></span></span></p>

<h2>Use solution</h2>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">This practitioner note includes HelloWorld.sh script and the pipeline script, Jenkinsfile. The Jenkinsfile builds HelloWorld application, provisions an ad-hoc test environment in HCMX, tests HelloWorld application in the newly provisioned ad-hoc test environment and deprovisions the ad-hoc test environment. Prior to using this solution, follow steps described in earlier sections to implement and configure this solution. To use this solution, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to Jenkins Application.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">For this use case, update the following environment variable values in Jenkinsfile.</span></span></span></li>
</ol>

<ul>
	<li style="margin-left:56px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Set HCMX_VCENTER_VM_NUM environment variable value to 2 in Jenkinsfile. This variable directs HCMX to create 2 identical VMs in ad-hoc test environment. </span></span></span></li>
	<li style="margin-left:56px; margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Set HCMX_SUB_CANCEL_DELAY_SECONDS to 240 so that there is time to take screenshots of provisioned VMs in ad-hoc test environment. Otherwise, ad-hoc test environment is deprovisioned as soon as testing is complete.</span></span></span></li>
</ul>

<p style="text-indent:.5in; margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Commit Jenkinsfile to Git repository.</span></span></span></p>

<ol start="3">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Click <b>Build Now</b> in the pipeline project. &nbsp;Note that clicking <strong>Build Now&nbsp;</strong>is a manual approach to trigger build in Jenkins. Other popular options to trigger a build in Jenkins are the following methods: &nbsp;A code change in Git repository can be configured to trigger a build in Jenkins OR Jenkins can be configured to periodically poll SCM for code changes and trigger a build.</span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/c/ce/HCI-Jenkins-Project-HelloWorld-BuildNow.PNG" height="416" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acdc2dfd93.15776127.png" style="width: 800px; height: 416px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="4">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Jenkins retrieves project code including Jenkinsfile from the Git repository. Builds the project. In the test stage, provisions an ad-hoc test environment in vCenter using HCMX to test the code changes.</span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/9/9e/HCI-Jenkins-Project-StageTest.PNG" height="227" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acdc958d99.96037417.png" style="width: 800px; height: 227px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="5">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Once ad-hoc test environment in vCenter is built, the following VMs appear in vCenter. Note that 2 identical VMs have been provisioned in ad-hoc test environment. The number of identical VMs needed for an ad-hoc test environment is configurable. Refer to the <b>Update HCMX offering specific environment variables</b> section for more details.</span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/2/2f/HCI-vCenter-HelloWorld.PNG" height="538" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acdceb3179.88770666.png" style="width: 800px; height: 538px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="6">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The HCMX ESS portal also displays the 2 new virtual machines that were provisioned for the ad-hoc test environment.</span></span></span></li>
</ol>

<p style="margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/b/b6/HCI-HCMX-TestVMs.PNG" height="487" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acdd7653f7.28587348.png" style="width: 800px; height: 487px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="7">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">After the ad-hoc test environment is built, Jenkins copies the build to the VMs in ad-hoc test environment. The screenshots below show the HelloWorld build copied to the two virtual machines. Note that the last number in version number matches with the build number.</span></span></span></li>
</ol>

<p style="margin-left:48px"><strong>Screenshot from 1st VM</strong>:</p>

<p style="margin-bottom:11px; margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/2/2e/HCI-BuildCopied-1.PNG" height="245" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acddd20fe4.14161175.png" style="width: 800px; height: 245px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<p style="margin-bottom:11px; margin-left:48px"><strong>Screenshot from 2nd VM:</strong></p>

<p style="margin-bottom:11px;margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/d/d4/HCI-BuildCopied-2-Use.PNG" height="222" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acde2c9bc3.42436585.png" style="width: 800px; height: 222px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<ol start="8">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Tests are performed in the ad-hoc test environment. After testing is complete, the ad-hoc test environment is de-provisioned using HCMX and the resources are released to the cloud provider. If testing is successful, pipeline moves to the <b>Deploy </b>stage.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">In the <b>Deploy</b> stage, the supplied Jenkinsfile does not deploy code changes to the production environment. Instead, code in the supplied Jenkinsfile in deploy stage simply exits the deploy stage and completes execution of pipeline code. In the screenshot below, the build number 125 took 4 minutes 10 seconds longer in test stage when compared to build number 124. This is due to higher delay seconds set for build number 125 in Jenkinsfile in the following variable: HCMX_SUB_CANCEL_DELAY_SECONDS. A higher delay seconds was set so that screenshots of ad-hoc test environment could be taken for development of this practitioner note before auto deprovisioning of the ad-hoc test environment.</span></span></span></li>
</ol>

<p style="margin-left:48px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">&nbsp;</span></span></span></p>

<p style="margin-bottom:11px; margin-left:48px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/e/e9/HCI-Jenkins-Project-StageTest-Complete.PNG" height="289" hspace="0" src="/mediawiki/images/pn_images/pn_image_6094acde821567.91993248.png" style="width: 800px; height: 289px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<h2>References</h2>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><a href="https://aws.amazon.com/devops/what-is-devops/" style="color:#0563c1; text-decoration:underline">https://aws.amazon.com/devops/what-is-devops/</a></span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><a href="https://jenkins.io" style="color:#0563c1; text-decoration:underline">https://jenkins.io</a></span></span></span></li>
</ol>

<h2>Appendix</h2>

<h3>HelloWorld.sh</h3>

<pre><code class="language-bash">#!/usr/bin/bash
echo "Hello World"</code></pre>

<h3>Jenkinsfile</h3>

<pre><code>pipeline 
{
    agent any
    environment 
	{
        /*************************************************************************************************************************************************/
		/***************************************** GLOBAL environment variables applicable to all HCMX offerings *****************************************/
		/*************************************************************************************************************************************************/
		
		// Enter your environment’s HCMX external access hostname.
		// The HCMX external access hostname is the fully qualified domain name portion of the HCMX tenant self-service portal URL. 
		// If HCMX tenant self-service URL is https://server.xyz.com/saw?TENANTID=616409711, then HCMX external access hostname is server.xyz.com
		// HCMX_EXT_ACCESS_HOSTNAME is a mandatory variable and must contain a value.
		
		HCMX_EXT_ACCESS_HOSTNAME = "server.xyz.com"
        
		// Enter your environment’s HCMX tenant ID that has DND capability deployed in it. 
		// DND capability is required in a tenant to provision and manage VMs. 
		// HCMX will be used to provision VMs for creating a test environment and in which testing of the new build will be performed. 
		// After testing is complete, provisioned VMs are deleted so that resource usage on cloud provider is reduced, thereby reducing cloud expenses.
		// If HCMX tenant self-service URL is https://server.xyz.com/saw?TENANTID=616409711, then HCMX tenant ID is 616409711. 
		// HCMX_TENANT_ID is a mandatory variable and must contain a value.
		
		HCMX_TENANT_ID = "616409711"

		// If Jenkins needs a web proxy to reach HCMX, set USE_PROXY variable to YES. 
		// USE_PROXY is a mandatory variable and must contain a value. Possible values are YES and NO.
		
		USE_PROXY = "NO"
		
		// Enter fully qualified domain name of web proxy. If USE_PROXY variable is set to YES, then PROXY_HOST variable is mandatory. 
		// If USE_PROXY variable is set to NO, then PROXY_HOST variable is optional.
		
		PROXY_HOST = "proxy.xyz.com"
		
		// Enter web proxy port number. If USE_PROXY variable is set to YES, then PROXY_PORT variable is mandatory. 
		// If USE_PROXY variable is set to NO, then PROXY_PORT variable is optional.
		
		PROXY_PORT = "8080"
		
		// Enter web proxy protocol. If USE_PROXY variable is set to YES, then PROXY_PROTOCOL variable is mandatory. 
		// If USE_PROXY variable is set to NO, then PROXY_PROTOCOL variable is optional. Possible values are http and https.
		
		PROXY_PROTOCOL = "http"
		
		// Enter YES if web proxy requires credentials, otherwise enter NO. 
		// If USE_PROXY variable is set to YES, then PROXY_REQUIRES_CREDENTIALS variable is mandatory. 
		// If USE_PROXY variable is set to NO, then PROXY_REQUIRES_CREDENTIALS variable is optional. Possible values are YES and NO.
		// If your web proxy requires credentials, create a new credential in Jenkins global scope with web proxy user ID 
		// and password authentication information and save the credential as ProxyCred.		
		
		PROXY_REQUIRES_CREDENTIALS = "NO"
		
		// Enter interval in seconds to check status of HCMX offering (VM or VM with software) deployment request in HCMX
		// After submission of a new request to deploy an HCMX offering, that offering's deployment may take longer  
		// than 5 minutes depending on cloud provider, networking and other constraints. Setting HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS
		// variable value to a very low value causes Jenkins to check status of offering deployment very frequently. 
		// Default value is 30 seconds.
		
		HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS = "30"
		
		// Enter time in seconds to wait before canceling the subscription after testing of build is complete. 
		// Once a subscription is canceled, the ad-hoc test environment’s virtual machines are deleted, and 
		// resources are released on the cloud provider.  Set HCMX_SUB_CANCEL_DELAY_SECONDS variable to zero seconds 
		// if you are using it in productions Jenkins environment and you do not need to preserve the test environment. 
		// Set HCMX_SUB_CANCEL_DELAY_SECONDS variable to at-least 180 seconds if you are using it in a POC or demo 
		// environment so that deployed ad-hoc test environment VMs are still available to show to the audience.
		
		HCMX_SUB_CANCEL_DELAY_SECONDS = "0"
		
		// Enter time in seconds to wait for HCMX and its target cloud provider to provision the ad-hoc test environment.  
		// If HCMX and its target cloud provider takes longer than the timeout specified in HCMX_REQ_DEPLOY_TIMEOUT_SECONDS
		// variable, exit the build.
		
		HCMX_REQ_DEPLOY_TIMEOUT_SECONDS = "600"		
				
		// Enter request title to use for the ad-hoc test environment deployment request in HCMX.
		// HCMX_REQ_TITLE variable is a mandatory variable and must contain a value.
		
		HCMX_REQ_TITLE = "Request to deploy a new VM to test Hello World App"
		
		// Enter request description to use for the ad-hoc test environment deployment request in HCMX.
		// HCMX_REQ_DESCRIPTION variable is a mandatory variable and must contain a value.
		
		HCMX_REQ_DESCRIPTION = "Request to deploy a new VM to test Hello World App"
		
		// Enter subscription name to be used for the ad-hoc test environment deployment request in HCMX.
		// A subscription associates user and their deployed services and/or assets. A subscription also has a start and end date.
		
		HCMX_SUB_NAME = "Hello World Test VM"
		
		// Enter subscription description to be used for the ad-hoc test environment deployment request in HCMX.
		// A subscription associates user and their deployed services and/or assets. A subscription also has a start and end date.
		
		HCMX_SUB_DESCRIPTION = "Hello World Test VM"	
		
		/*************************************************************************************************************************************************/
		/********** HCMX Offering specific environment variables. In this example, this section is for HCMX offering to deploy VMs on vCenter ************/
		/*************************************************************************************************************************************************/
		
		// Enter VMWare vCenter data center name in which VM must be deployed
		
		HCMX_VCENTER_DATACENTER = "VMWarevCenterDatacenterName"
		
		// Enter VMWare vCenter template name to be used for deployment of VM
		
		HCMX_VCENTER_VM_TEMPLATE = "VMWarevCenterVMTemplateName"
		
		// Enter VMWare vCenter custom specification to be used for deployment of VM
		
		HCMX_VCENTER_VM_CUSTOMSPEC = "VMWarevCenterCustomSpecName"
		
		// Enter VM name prefix to be used during deployment of VM
		
		HCMX_VCENTER_VMNAME_PREFIX = "HelloWorld"
		
		// Enter memory size in MB to be used for the deployment of VM
		
		HCMX_VCENTER_VM_MEMORY_SIZE_MB = "1024"
		
		// Enter number of CPUs to be used for the deployment of VM
		
		HCMX_VCENTER_VM_NUM_CPU = "1"

		// Enter number of Virtual Machines to be deployed for the ad-hoc test environment.
		// Enter greater than one if your test environment requires testing of multiple components in 
		// a distributed architecture.
		
		HCMX_VCENTER_VM_NUM = "1"		
    }

    stages 
	{
        stage('Build') 
		{
            steps 
			{
                /*****
				In this section, compile your code, install dependencies, perform unit test and integration tests. 
				You may use maven, ant, etc to build your project. In the supplied Jenkinsfile, a simple HelloWorld.sh script is built. 
				This HelloWorld.sh script prints "Hello World". Replace the build stage code with the code specific to your build requirements. 
				For example, you may need to use ant or maven to build your code.
				*****/
				
				echo '***************************************** BUILDING *****************************************'
				sh 'mkdir build'
				sh 'cp HelloWorld.sh build/HelloWorld.sh'
				sh 'chmod 555 build/HelloWorld.sh'
				sh "echo version = 1.0.${env.BUILD_ID} &gt;&gt; build/version.txt"				
            }
        }
        stage('Test') 
		{
            steps 
			{
                /*  Test your project in this section.
					Perform UAT testing on the test server.
					In this use case example, a new VM is provisioned using HCMX. 
					Build is transferred to the new VM. Testing of build is conducted on the new VM.
					After testing is complete, the new VM is deleted through HCMX to release resource usage on the cloud provider.
				*/
				
				echo '***************************************** PROVISIONING VM(s) THROUGH HCMX FOR TESTING THE BUILD  *****************************************'				
				
				script 
				{
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'HCMXUser', usernameVariable: 'HCMX_USER', passwordVariable: 'HCMX_USER_PSW']]) 
					{
						withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ProxyCred', usernameVariable: 'PROXY_USER', passwordVariable: 'PROXY_USER_PSW']]) 
						{	    
							/****** HCMX_GLOBAL_ENV_VARIABLE_INIT_VALIDATION_SECTION_START *******/
							
							final int PROXY_PORT_NUM_MIN = 0
							final int PROXY_PORT_NUM_MAX = 65535							
							
							String HCMX_EXT_ACCESS_HOSTNAME
							String HCMX_TENANT_ID
							int HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS = 30
							int HCMX_SUB_CANCEL_DELAY_SECONDS = 0						
							int HCMX_REQ_DEPLOY_TIMEOUT_SECONDS = 600
							String USE_PROXY
							String PROXY_HOST
							int PROXY_PORT
							String PROXY_PROTOCOL
							String PROXY_REQUIRES_CREDENTIALS							
							String HCMX_REQ_TITLE
							String HCMX_REQ_DESCRIPTION
							String HCMX_SUB_NAME
							String HCMX_SUB_DESCRIPTION
							
							String curlCMD = "curl"
							
							if(env.HCMX_EXT_ACCESS_HOSTNAME)
							{
								HCMX_EXT_ACCESS_HOSTNAME = env.HCMX_EXT_ACCESS_HOSTNAME
							}
							else
							{
								error "HCMX_EXT_ACCESS_HOSTNAME cannot be NULL or empty"
							}
							
							if(env.HCMX_TENANT_ID)
							{
								HCMX_TENANT_ID = env.HCMX_TENANT_ID
							}
							else
							{
								error "HCMX_TENANT_ID cannot be NULL or empty"
							}
																			
							if (env.HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS &amp;&amp; env.HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS.toString().isNumber())
							{
								HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS = env.HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS as int
							}
							else
							{
								error "HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS must be an integer"
							}
							
							if (env.HCMX_SUB_CANCEL_DELAY_SECONDS &amp;&amp; env.HCMX_SUB_CANCEL_DELAY_SECONDS.toString().isNumber())
							{
								HCMX_SUB_CANCEL_DELAY_SECONDS = env.HCMX_SUB_CANCEL_DELAY_SECONDS as int
							}
							else
							{
								error "HCMX_SUB_CANCEL_DELAY_SECONDS must be an integer"
							}
							
							if (env.HCMX_REQ_DEPLOY_TIMEOUT_SECONDS &amp;&amp; env.HCMX_REQ_DEPLOY_TIMEOUT_SECONDS.toString().isNumber())
							{
								HCMX_REQ_DEPLOY_TIMEOUT_SECONDS = env.HCMX_REQ_DEPLOY_TIMEOUT_SECONDS as int
							}
							else
							{
								error "HCMX_REQ_DEPLOY_TIMEOUT_SECONDS must be an integer"
							}
							
							if(env.USE_PROXY)
							{
								USE_PROXY = env.USE_PROXY
								if (USE_PROXY &amp;&amp; (!(USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; !(USE_PROXY.equalsIgnoreCase("NO"))))
								{
									error "USE_PROXY must be set to either YES or NO"
								}
							}
							else
							{
								error "USE_PROXY cannot be NULL or empty"
							}
							
							if (USE_PROXY &amp;&amp; USE_PROXY.equalsIgnoreCase("YES"))
							{
								if(env.PROXY_HOST)
								{
									PROXY_HOST = env.PROXY_HOST
								}
								else
								{
									error "PROXY_HOST cannot be NULL or empty when USE_PROXY is set to yes"
								}
							
								if(env.PROXY_PORT &amp;&amp; env.PROXY_PORT.toString().isNumber())
								{
									PROXY_PORT = env.PROXY_PORT as int
									if (PROXY_PORT &lt; PROXY_PORT_NUM_MIN || PROXY_PORT &gt; PROXY_PORT_NUM_MAX)
									{
										error "PROXY_PORT must be &gt;= $PROXY_PORT_NUM_MIN and &lt;= $PROXY_PORT_NUM_MAX"
									}
								}
								else
								{
									error "PROXY_PORT cannot be NULL or empty when USE_PROXY is set to yes"
								}
							
								if(env.PROXY_PROTOCOL)
								{
									PROXY_PROTOCOL = env.PROXY_PROTOCOL
									if (PROXY_PROTOCOL &amp;&amp; (!(PROXY_PROTOCOL.equalsIgnoreCase("HTTP")) &amp;&amp; !(PROXY_PROTOCOL.equalsIgnoreCase("HTTPS"))))
									{
										error "PROXY_PROTOCOL must be set to either http or https"
									}
								}
								else
								{
									error "PROXY_PROTOCOL cannot be NULL or empty when USE_PROXY is set to yes"
								}						
								if(env.PROXY_REQUIRES_CREDENTIALS)
								{
									PROXY_REQUIRES_CREDENTIALS = env.PROXY_REQUIRES_CREDENTIALS
									if (PROXY_REQUIRES_CREDENTIALS &amp;&amp; (!(PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("YES")) &amp;&amp; !(PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
									{
										error "PROXY_REQUIRES_CREDENTIALS must be set to either YES or NO"
									}
								}
								else
								{
									error "PROXY_REQUIRES_CREDENTIALS cannot be NULL or empty when USE_PROXY is set to yes"
								}
								curlCMD = "curl --proxy \""+ PROXY_PROTOCOL + "://" + PROXY_HOST + ":" + PROXY_PORT +"\""								
							}
							else
							{
								curlCMD = "curl"
							}
							
							if(env.HCMX_REQ_TITLE)
							{
								HCMX_REQ_TITLE = env.HCMX_REQ_TITLE
							}
							else
							{
								error "HCMX_REQ_TITLE cannot be NULL or empty"
							}
							
							if(env.HCMX_REQ_DESCRIPTION)
							{
								HCMX_REQ_DESCRIPTION = env.HCMX_REQ_DESCRIPTION
							}
							else
							{
								error "HCMX_REQ_DESCRIPTION cannot be NULL or empty"
							}
							
							if(env.HCMX_SUB_NAME)
							{
								HCMX_SUB_NAME = env.HCMX_SUB_NAME
							}
							else
							{
								error "HCMX_SUB_NAME cannot be NULL or empty"
							}
							
							if(env.HCMX_SUB_DESCRIPTION)
							{
								HCMX_SUB_DESCRIPTION = env.HCMX_SUB_DESCRIPTION
							}
							else
							{
								error "HCMX_SUB_DESCRIPTION cannot be NULL or empty"
							}				
							
							if (HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS &gt;= HCMX_REQ_DEPLOY_TIMEOUT_SECONDS)
							{
								error "HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS must be less than HCMX_REQ_DEPLOY_TIMEOUT_SECONDS."
							}
							/****** HCMX_GLOBAL_ENV_VARIABLE_INIT_VALIDATION_SECTION_END *******/
							
							/****** HCMX_OFFERING_SPECIFIC_ENV_VARIABLE_INIT_VALIDATION_SECTION_START *******/
							
							// Minimum memory size in MB that must be specified to deploy VMs
							final int HCMX_VCENTER_VM_MIN_MEMORY_SIZE = 4
			
							// Maximum memory size in MB that can be specified to deploy VMs
							final int HCMX_VCENTER_VM_MAX_MEMORY_SIZE = 6275072
							
							// Minimum number of CPUs that must be specified to deploy VM
							final int HCMX_VCENTER_VM_MIN_NUM_CPU = 1
														
							// Maximum number of CPUs that can be specified to deploy VM
							final int HCMX_VCENTER_VM_MAX_NUM_CPU = 32	
							
							// Minimum number of VMs that must be specified to deploy VM
							final int HCMX_VCENTER_VM_MIN_NUM = 1
							
							String HCMX_VCENTER_DATACENTER
							String HCMX_VCENTER_VM_TEMPLATE
							String HCMX_VCENTER_VM_CUSTOMSPEC
							String HCMX_VCENTER_VMNAME_PREFIX						
							long HCMX_VCENTER_VM_MEMORY_SIZE_MB = 1024
							int HCMX_VCENTER_VM_NUM_CPU = 1
							int HCMX_VCENTER_VM_NUM = 1
							
							if(env.HCMX_VCENTER_DATACENTER)
							{
								HCMX_VCENTER_DATACENTER = env.HCMX_VCENTER_DATACENTER
							}
							else
							{
								error "HCMX_VCENTER_DATACENTER cannot be NULL or empty"
							}											
							
							if(env.HCMX_VCENTER_VM_TEMPLATE)
							{
								HCMX_VCENTER_VM_TEMPLATE = env.HCMX_VCENTER_VM_TEMPLATE
							}
							else
							{
								error "HCMX_VCENTER_VM_TEMPLATE cannot be NULL or empty"
							}
							
							if(env.HCMX_VCENTER_VM_CUSTOMSPEC)
							{
								HCMX_VCENTER_VM_CUSTOMSPEC = env.HCMX_VCENTER_VM_CUSTOMSPEC
							}
							else
							{
								error "HCMX_VCENTER_VM_CUSTOMSPEC cannot be NULL or empty"
							}
							
							if(env.HCMX_VCENTER_VMNAME_PREFIX)
							{
								HCMX_VCENTER_VMNAME_PREFIX = env.HCMX_VCENTER_VMNAME_PREFIX
							}
							else
							{
								error "HCMX_VCENTER_VMNAME_PREFIX cannot be NULL or empty"
							}
							
							if (env.HCMX_VCENTER_VM_MEMORY_SIZE_MB &amp;&amp; env.HCMX_VCENTER_VM_MEMORY_SIZE_MB.toString().isNumber())
							{
								HCMX_VCENTER_VM_MEMORY_SIZE_MB = env.HCMX_VCENTER_VM_MEMORY_SIZE_MB as long
								if (HCMX_VCENTER_VM_MEMORY_SIZE_MB &lt; HCMX_VCENTER_VM_MIN_MEMORY_SIZE || HCMX_VCENTER_VM_MEMORY_SIZE_MB &gt; HCMX_VCENTER_VM_MAX_MEMORY_SIZE )
								{
									error "HCMX_VCENTER_VM_MEMORY_SIZE_MB in MB must be &gt;= $HCMX_VCENTER_VM_MIN_MEMORY_SIZE and HCMX_VCENTER_VM_MEMORY_SIZE_MB in MB must be &lt;= $HCMX_VCENTER_VM_MAX_MEMORY_SIZE"
								}							
							}
							else
							{
								error "HCMX_VCENTER_VM_MEMORY_SIZE_MB must be an integer"
							}
							
							if (env.HCMX_VCENTER_VM_NUM_CPU &amp;&amp; env.HCMX_VCENTER_VM_NUM_CPU.toString().isNumber())
							{
								HCMX_VCENTER_VM_NUM_CPU = env.HCMX_VCENTER_VM_NUM_CPU as int
								if (HCMX_VCENTER_VM_NUM_CPU &lt; HCMX_VCENTER_VM_MIN_NUM_CPU || HCMX_VCENTER_VM_NUM_CPU &gt; HCMX_VCENTER_VM_MAX_NUM_CPU )
								{
									error "HCMX_VCENTER_VM_NUM_CPU must be &gt;= $HCMX_VCENTER_VM_MIN_NUM_CPU and HCMX_VCENTER_VM_NUM_CPU must be &lt;= $HCMX_VCENTER_VM_MAX_NUM_CPU"
								}		
							}
							else
							{
								error "HCMX_VCENTER_VM_NUM_CPU must be an integer"
							}
							
							if (env.HCMX_VCENTER_VM_NUM &amp;&amp; env.HCMX_VCENTER_VM_NUM.toString().isNumber())
							{
								HCMX_VCENTER_VM_NUM = env.HCMX_VCENTER_VM_NUM as int
								if (HCMX_VCENTER_VM_NUM &lt; HCMX_VCENTER_VM_MIN_NUM)
								{
									error "HCMX_VCENTER_VM_NUM must be &gt;= $HCMX_VCENTER_VM_MIN_NUM"
								}		
							}
							else
							{
								error "HCMX_VCENTER_VM_NUM must be an integer"
							}						
							
							/****** HCMX_OFFERING_SPECIFIC_ENV_VARIABLE_INIT_VALIDATION_SECTION_END *******/
							
							echo "HCMX: Get SMAX Auth Token"
							// HCMX REST APIs require SMAX AUTH TOKEN and TENANT ID to perform any POST, PUT and GET operations.
							// Build HCMX Authentication Token URL
							final String HCMX_AUTH_URL = "https://" + HCMX_EXT_ACCESS_HOSTNAME + "/auth/authentication-endpoint/authenticate/token?TENANTID=" + HCMX_TENANT_ID
							String SMAX_AUTH_TOKEN
							int getTokenResCode
							
							// Submit a REST API call to HCMX to get SMAX_AUTH_TOKEN
							if (USE_PROXY.equalsIgnoreCase("NO") || ((USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; (PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
							{
								(SMAX_AUTH_TOKEN, getTokenResCode) = sh(script: '''set +x;''' + curlCMD + ''' -s -w \'\\n%{response_code}\' -X POST ''' + HCMX_AUTH_URL + ''' -k -H "Content-Type: application/json" -d \'{"login":"\'"$HCMX_USER"\'","password":"\'"$HCMX_USER_PSW"\'"}\' ''', returnStdout: true).trim().tokenize("\n")
							}
							else
							{
								(SMAX_AUTH_TOKEN, getTokenResCode) = sh(script: '''set +x;''' + curlCMD + ''' --proxy-user $PROXY_USER:$PROXY_USER_PSW   -s -w \'\\n%{response_code}\' -X POST ''' + HCMX_AUTH_URL + ''' -k -H "Content-Type: application/json" -d \'{"login":"\'"$HCMX_USER"\'","password":"\'"$HCMX_USER_PSW"\'"}\' ''', returnStdout: true).trim().tokenize("\n")
							}
							
							if (getTokenResCode == 200 &amp;&amp; SMAX_AUTH_TOKEN &amp;&amp; SMAX_AUTH_TOKEN.trim())
							{											
								echo "HCMX: Get person ID"
								// Build HCMX Get Person ID URL								
								final String HCMX_GET_PERSON_ID_URL_1 = "https://" + HCMX_EXT_ACCESS_HOSTNAME + "/rest/" + HCMX_TENANT_ID + "/ems/Person?filter=(Upn=%27"
								final String HCMX_GET_PERSON_ID_URL_2 = "%27)&amp;layout=Id"
								String personIDResponse
								int personIDResCode
								
								// Submit a REST API call to HCMX to get Person ID
								if (USE_PROXY.equalsIgnoreCase("NO") || ((USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; (PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
								{
									(personIDResponse, personIDResCode)  = sh(script: '''set +x;''' + curlCMD + ''' -s -w '\\n%{response_code}' "''' + HCMX_GET_PERSON_ID_URL_1 + HCMX_USER + HCMX_GET_PERSON_ID_URL_2 + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
								}
								else
								{
									(personIDResponse, personIDResCode)  = sh(script: '''set +x;''' + curlCMD + ''' --proxy-user $PROXY_USER:$PROXY_USER_PSW -s -w '\\n%{response_code}' "''' + HCMX_GET_PERSON_ID_URL_1 + HCMX_USER + HCMX_GET_PERSON_ID_URL_2 + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
								}
								
								if (personIDResCode == 200 &amp;&amp; personIDResponse &amp;&amp; personIDResponse.trim()) 
								{
									def personIDResponseJSON = new groovy.json.JsonSlurperClassic().parseText(personIDResponse)							
									def HCMX_PERSON_ID = personIDResponseJSON.entities[0].properties.Id
									echo "HCMX Requested for person ID is $HCMX_PERSON_ID"
								
									echo "HCMX: Submit request for a new VM for testing"
									// Build HCMX create request URL
									final String HCMX_CREATE_REQUEST_URL = "https://" + HCMX_EXT_ACCESS_HOSTNAME + "/rest/" + HCMX_TENANT_ID + "/ess/request/createRequest"
									
									Date curDate = new Date()
									long epochMilliSeconds = curDate.getTime()
									String depVMResponse
									int depVMResponseCode
									
									// Create unique subscription name for each of the build triggers.
									String HCMX_SUB_NAME_UNIQUE = HCMX_SUB_NAME + "_" + HCMX_PERSON_ID + "_" + epochMilliSeconds
									
									// DEPLOY_ADHOC_TEST_ENVIRONMENT_REQUEST_USING_HCMX_OFFERING
									// Submit a REST API call to HCMX to deploy a new ad-hoc test environment
									// Replace API body and environment variables in both if and else clause
									if (USE_PROXY.equalsIgnoreCase("NO") || ((USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; (PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
									{
										(depVMResponse, depVMResponseCode) = sh(script: '''set +x;''' + curlCMD + ''' -s -w '\\n%{response_code}' -X POST "''' + HCMX_CREATE_REQUEST_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" -d '{"entities":[{"entity_type":"Request","properties":{"RequestedForPerson":"''' + HCMX_PERSON_ID + '''","StartDate":''' + epochMilliSeconds + ''',"RequestsOffering":"10096","CreationSource":"CreationSourceEss","RequestedByPerson":"''' + HCMX_PERSON_ID + '''","DataDomains":["Public"],"CreateTime":''' + epochMilliSeconds + ''',"UserOptions":"{\\"complexTypeProperties\\":[{\\"properties\\":{\\"OptionSet0c6eb101a1a178c3c49c3badbc481f05_c\\":{\\"Option34c8d8d8403ac43361b8b8083004ef4a_c\\":true},\\"OptionSet2ee4a8f73fcd1606c1337172e8411e2a_c\\":{\\"Option19cd6cd22067142e0977622ed71ced7d_c\\":true},\\"OptionSet473C6F2BE6F45DB8381664FC9097BE37_c\\":{\\"Option2E8493EA9AC2821929DA64FC90978A98_c\\":true},\\"changedUserOptionsForSimulation\\":\\"PropertyvmCpuCount19cd6cd22067142e0977622ed71ced7d_c&amp;\\",\\"PropertyserverCount34c8d8d8403ac43361b8b8083004ef4a_c\\":\\"''' + HCMX_VCENTER_VM_NUM + '''\\",\\"PropertyproviderId2E8493EA9AC2821929DA64FC90978A98_c\\":\\"2c908fac77eefca5017822299d726af6\\",\\"PropertydatacenterName2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_DATACENTER + '''\\",\\"PropertyvirtualMachine2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_VM_TEMPLATE + '''\\",\\"PropertycustomizationTemplateName2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_VM_CUSTOMSPEC + '''\\",\\"PropertyvmNamePrefix2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_VMNAME_PREFIX + '''\\",\\"Option19cd6cd22067142e0977622ed71ced7d_c\\":true,\\"Optionad52a8efe1465faa8c389ae92bf90d0c_c\\":false,\\"PropertyvmMemorySize19cd6cd22067142e0977622ed71ced7d_c\\":\\"''' + HCMX_VCENTER_VM_MEMORY_SIZE_MB + '''\\",\\"PropertyvmCpuCount19cd6cd22067142e0977622ed71ced7d_c\\":\\"''' + HCMX_VCENTER_VM_NUM_CPU + '''\\"}}]}","Description":"&lt;p&gt;''' + HCMX_REQ_DESCRIPTION + '''&lt;/p&gt;","RelatedSubscriptionName":"''' + HCMX_SUB_NAME_UNIQUE + '''","RelatedSubscriptionDescription":"&lt;p&gt;''' + HCMX_SUB_DESCRIPTION + '''&lt;/p&gt;","RequestAttachments":"{\\"complexTypeProperties\\":[]}","DisplayLabel":"''' + HCMX_REQ_TITLE + '''"}}],"operation":"CREATE"}' ''', returnStdout: true).trim().tokenize("\n")	
									}
									else
									{
										(depVMResponse, depVMResponseCode) = sh(script: '''set +x;''' + curlCMD + ''' --proxy-user $PROXY_USER:$PROXY_USER_PSW -s -w '\\n%{response_code}' -X POST "''' + HCMX_CREATE_REQUEST_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" -d '{"entities":[{"entity_type":"Request","properties":{"RequestedForPerson":"''' + HCMX_PERSON_ID + '''","StartDate":''' + epochMilliSeconds + ''',"RequestsOffering":"10096","CreationSource":"CreationSourceEss","RequestedByPerson":"''' + HCMX_PERSON_ID + '''","DataDomains":["Public"],"CreateTime":''' + epochMilliSeconds + ''',"UserOptions":"{\\"complexTypeProperties\\":[{\\"properties\\":{\\"OptionSet0c6eb101a1a178c3c49c3badbc481f05_c\\":{\\"Option34c8d8d8403ac43361b8b8083004ef4a_c\\":true},\\"OptionSet2ee4a8f73fcd1606c1337172e8411e2a_c\\":{\\"Option19cd6cd22067142e0977622ed71ced7d_c\\":true},\\"OptionSet473C6F2BE6F45DB8381664FC9097BE37_c\\":{\\"Option2E8493EA9AC2821929DA64FC90978A98_c\\":true},\\"changedUserOptionsForSimulation\\":\\"PropertyvmCpuCount19cd6cd22067142e0977622ed71ced7d_c&amp;\\",\\"PropertyserverCount34c8d8d8403ac43361b8b8083004ef4a_c\\":\\"''' + HCMX_VCENTER_VM_NUM + '''\\",\\"PropertyproviderId2E8493EA9AC2821929DA64FC90978A98_c\\":\\"2c908fac77eefca5017822299d726af6\\",\\"PropertydatacenterName2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_DATACENTER + '''\\",\\"PropertyvirtualMachine2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_VM_TEMPLATE + '''\\",\\"PropertycustomizationTemplateName2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_VM_CUSTOMSPEC + '''\\",\\"PropertyvmNamePrefix2E8493EA9AC2821929DA64FC90978A98_c\\":\\"''' + HCMX_VCENTER_VMNAME_PREFIX + '''\\",\\"Option19cd6cd22067142e0977622ed71ced7d_c\\":true,\\"Optionad52a8efe1465faa8c389ae92bf90d0c_c\\":false,\\"PropertyvmMemorySize19cd6cd22067142e0977622ed71ced7d_c\\":\\"''' + HCMX_VCENTER_VM_MEMORY_SIZE_MB + '''\\",\\"PropertyvmCpuCount19cd6cd22067142e0977622ed71ced7d_c\\":\\"''' + HCMX_VCENTER_VM_NUM_CPU + '''\\"}}]}","Description":"&lt;p&gt;''' + HCMX_REQ_DESCRIPTION + '''&lt;/p&gt;","RelatedSubscriptionName":"''' + HCMX_SUB_NAME_UNIQUE + '''","RelatedSubscriptionDescription":"&lt;p&gt;''' + HCMX_SUB_DESCRIPTION + '''&lt;/p&gt;","RequestAttachments":"{\\"complexTypeProperties\\":[]}","DisplayLabel":"''' + HCMX_REQ_TITLE + '''"}}],"operation":"CREATE"}' ''', returnStdout: true).trim().tokenize("\n")																		
									}
																	
													
									if (depVMResponseCode == 200 &amp;&amp; depVMResponse &amp;&amp; depVMResponse.trim()) 
									{
										def depVMResponseJSON = new groovy.json.JsonSlurperClassic().parseText(depVMResponse)								
										def HCMX_REQUEST_ID = depVMResponseJSON.entity_result_list.entity[0].properties.Id
										echo "HCMX Request ID to deploy a new test server VM is $HCMX_REQUEST_ID"
										
										// Build HCMX Get request status URL
										final String HCMX_GET_REQUEST_STATUS_URL = "https://" + HCMX_EXT_ACCESS_HOSTNAME + "/rest/" + HCMX_TENANT_ID + "/ems/Request?filter=(Id=%27" + HCMX_REQUEST_ID + "%27)&amp;layout=PhaseId"
										String reqStatus = "Log"
										int reqCode = 0
										int timeSpent = 0
										String reqResponse = ""
										
										// Loop until Request status changes to Close. Once it is in closed status VM is deployed and ready for testing.
										while (reqStatus != 'Close')
										{
											if (timeSpent &gt; HCMX_REQ_DEPLOY_TIMEOUT_SECONDS)
											{
												error "Failed to provision VM deployment within the timeout period of $HCMX_REQ_DEPLOY_TIMEOUT_SECONDS seconds"										
											}
											// Submit a REST API call to HCMX to get status of VM deployment request
											echo "HCMX: Get request status until it is Closed"
											
											if (USE_PROXY.equalsIgnoreCase("NO") || ((USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; (PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
											{
												(reqResponse, reqCode) = sh(script: '''set +x;''' + curlCMD + ''' -s -w '\\n%{response_code}' "''' + HCMX_GET_REQUEST_STATUS_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
											}
											else
											{
												(reqResponse, reqCode) = sh(script: '''set +x;''' + curlCMD + ''' --proxy-user $PROXY_USER:$PROXY_USER_PSW -s -w '\\n%{response_code}' "''' + HCMX_GET_REQUEST_STATUS_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
											}
											
											if (reqCode == 200 &amp;&amp; reqResponse &amp;&amp; reqResponse.trim()) 
											{
												def reqResponseJSON = new groovy.json.JsonSlurperClassic().parseText(reqResponse)
												reqStatus = reqResponseJSON.entities[0].properties.PhaseId
												echo "HCMX REQUEST status is $reqStatus"
												if (reqStatus &amp;&amp; reqStatus.equalsIgnoreCase("Close"))
												{
													// If request for VM deployment has moved to Close phase, then VM has been deployed successfully.
													break;
												}
												else
												{
													echo "sleep for $HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS seconds before checking request status again"
													sleep(HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS)
													timeSpent = timeSpent + HCMX_REQ_STATUS_CHK_INTERVAL_SECONDS
												}                                        
											}
											else
											{
												error "Failed to get request status for VM deployment from HCMX"
											}
										}
										
										echo "HCMX: Get subscription ID"
										// Build HCMX Get subscription URL using the request ID that was obtained in earlier steps.
										final String HCMX_GET_SUBSCRIPTION_URL = "https://" + HCMX_EXT_ACCESS_HOSTNAME + "/rest/" + HCMX_TENANT_ID + "/ems/Subscription?filter=(InitiatedByRequest=%27" + HCMX_REQUEST_ID + "%27%20and%20Status=%27Active%27)&amp;layout=Id"
										
										String subResponse
										int subResCode
										// Submit a REST API call to HCMX to get subscription ID
										if (USE_PROXY.equalsIgnoreCase("NO") || ((USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; (PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
										{
											(subResponse, subResCode)  = sh(script: '''set +x;''' + curlCMD + ''' -s -w '\\n%{response_code}' "''' + HCMX_GET_SUBSCRIPTION_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
										}
										else
										{
											(subResponse, subResCode)  = sh(script: '''set +x;''' + curlCMD + ''' --proxy-user $PROXY_USER:$PROXY_USER_PSW -s -w '\\n%{response_code}' "''' + HCMX_GET_SUBSCRIPTION_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
										}
										
										if (subResCode == 200 &amp;&amp; subResponse &amp;&amp; subResponse.trim()) 
										{
											def subResponseJSON = new groovy.json.JsonSlurperClassic().parseText(subResponse)									
											subID = subResponseJSON.entities[0].properties.Id
											echo "HCMX Subscription ID is $subID" 
											
											echo "HCMX: Get service instances"
											// Prepare HCMX Get service instance URL using the subscription ID that was obtained in earlier steps.
											final String HCMX_GET_SVCINSTANCE_URL = "https://" + HCMX_EXT_ACCESS_HOSTNAME + "/rest/" + HCMX_TENANT_ID + "/cloud-service/getServiceInstance/" + subID
											
											String svcInstResponse
											int svcInstResCode
											// Submit a REST API call to HCMX to get a list of service instances associated with the subscription
											if (USE_PROXY.equalsIgnoreCase("NO") || ((USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; (PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
											{	
												(svcInstResponse, svcInstResCode)  = sh(script: '''set +x;''' + curlCMD + ''' -s -w '\\n%{response_code}' "''' + HCMX_GET_SVCINSTANCE_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
											}
											else
											{
												(svcInstResponse, svcInstResCode)  = sh(script: '''set +x;''' + curlCMD + ''' --proxy-user $PROXY_USER:$PROXY_USER_PSW -s -w '\\n%{response_code}' "''' + HCMX_GET_SVCINSTANCE_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")											
											}
											
											if (svcInstResCode == 200 &amp;&amp; svcInstResponse &amp;&amp; svcInstResponse.trim()) 
											{
												def svcInstResponseJSON = new groovy.json.JsonSlurperClassic().parseText(svcInstResponse)
												def svcInstTopologyArray = svcInstResponseJSON.topology												
												List&lt;String&gt; testVMIPList = new ArrayList&lt;String&gt;();
												
												echo "HCMX: Looping through service instances to find IP address of deployed VM"
												// Loop through service instances. Retrieve IP address property value for the service instance with type = CI_TYPE_SERVER
												for(def member : svcInstTopologyArray) 
												{
													if(member.type.name &amp;&amp; member.type.name.equalsIgnoreCase("CI_TYPE_SERVER")) 
													{
														def svcInstPropertyArray = member.properties
														for(def propMember : svcInstPropertyArray) 
														{
															// HCMX_QUERY_VM_IP_PROPERTY
															if(propMember.name &amp;&amp; propMember.name.equalsIgnoreCase("primary_ip_address"))
															{
																testVMIPList.add(propMember.propertyValue)																										 
																break
															}
														}														
													}
												}
												if (testVMIPList.size() == 0)
												{
													echo "Deployed VM's IP address is empty. Cannot copy build to test on newly deployed VMs"
													CancelSubscription(HCMX_SUB_CANCEL_DELAY_SECONDS, HCMX_EXT_ACCESS_HOSTNAME, HCMX_TENANT_ID, HCMX_PERSON_ID, subID, SMAX_AUTH_TOKEN, curlCMD, USE_PROXY, PROXY_REQUIRES_CREDENTIALS)
													error "Deployed VM's IP address is empty. Cannot copy build to test on the newly deployed VM. Exiting"											
												}
												for (String ipAddress : testVMIPList) 
												{											
													if(ipAddress &amp;&amp; ipAddress.trim())
													{
														// COPY_BUILD_TO_ADHOC_TEST_ENVIRONMENT
														//Copy build to the deployed virtual machines for testing.
														echo '***************************************** COPYING BUILD TO THE DEPLOYED VM(s) FOR TESTING  *****************************************'
														echo "HCMX: Copying build to the virtual machine with IP address: $ipAddress"
														final String scpCMDOutput = sh(script: "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -rp ./build root@$ipAddress:/tmp/", returnStdout: true).trim()
													
													}
													else
													{
														echo "Deployed VM's IP address is empty. Cannot copy build to test VM"
														CancelSubscription(HCMX_SUB_CANCEL_DELAY_SECONDS, HCMX_EXT_ACCESS_HOSTNAME, HCMX_TENANT_ID, HCMX_PERSON_ID, subID, SMAX_AUTH_TOKEN, curlCMD, USE_PROXY, PROXY_REQUIRES_CREDENTIALS)
														error "Deployed VM's IP address is empty. Cannot copy build to test on the newly deployed VM. Exiting"
													}
												}
												
												for (String ipAddress : testVMIPList) 
												{											
																											
													// TEST_BUILD_IN_ADHOC_TEST_ENVIRONMENT
													// Test build on the deployed virtual machine.
													echo '***************************************** TESTING BUILD ON THE DEPLOYED/TEST VM(s) *****************************************'
													echo "HCMX: Testing build on the virtual machine with IP address: $ipAddress"
													final String remoteCMDOutput = sh(script: "ssh -o StrictHostKeyChecking=no root@$ipAddress /tmp/build/HelloWorld.sh", returnStdout: true).trim()
													
													// Validate test results from build execution results on remotely deployed virtual machine
													if(remoteCMDOutput &amp;&amp; remoteCMDOutput.equals("Hello World"))
													{
														echo "Testing of new build was succesful.."															
													}
													else
													{
														echo "Testing of new build has failed... "
														CancelSubscription(HCMX_SUB_CANCEL_DELAY_SECONDS, HCMX_EXT_ACCESS_HOSTNAME, HCMX_TENANT_ID, HCMX_PERSON_ID, subID, SMAX_AUTH_TOKEN, curlCMD, USE_PROXY, PROXY_REQUIRES_CREDENTIALS)
														error "Testing of new build has failed..."
													}																										
												}
												echo "Deleting deployed VMs and then Proceeding to deploy stage."
												CancelSubscription(HCMX_SUB_CANCEL_DELAY_SECONDS, HCMX_EXT_ACCESS_HOSTNAME, HCMX_TENANT_ID, HCMX_PERSON_ID, subID, SMAX_AUTH_TOKEN, curlCMD, USE_PROXY, PROXY_REQUIRES_CREDENTIALS)
											}
											else
											{
												echo "Failed to get service instances from HCMX"
												CancelSubscription(HCMX_SUB_CANCEL_DELAY_SECONDS, HCMX_EXT_ACCESS_HOSTNAME, HCMX_TENANT_ID, HCMX_PERSON_ID, subID, SMAX_AUTH_TOKEN, curlCMD, USE_PROXY, PROXY_REQUIRES_CREDENTIALS)
												error "Failed to get service instances from HCMX"
											}
										} 
										else
										{
											echo "Failed to get subscription ID from HCMX"
											error "Failed to get subscription ID from HCMX"
										}
									}
									else
									{
										echo "Request to deploy new virtual machines has failed"
										error "Request to deploy new virtual machines has failed"
									}
								}
								else
								{
									echo "Unable to get user ID for the HCMX user to submit REST API calls to HCMX... "
									error "Unable to get user ID for the HCMX user to submit REST API calls to HCMX... "
								}
							}
							else
							{
								echo "Failed to get SMAX_AUTH_TOKEN"
								error "Failed to get SMAX_AUTH_TOKEN"
							}
						}
					}
                }
            }
        }
        stage('Deploy') 
		{
            steps 
			{
				/*  Deploy your new build to production environment.
					In this use case example, we do not deploy build to the production environment.
					This use case's main purpose is to demonstrate usage of HCMX to provision new test VMs, test new build on those test VMs and 
					delete those test VMs after testing is complete.
				*/
                
				echo '***************************************** DEPLOYING *****************************************'
            }
        }
    }
}

def CancelSubscription(int HCMX_SUB_CANCEL_DELAY_SECONDS, String HCMX_EXT_ACCESS_HOSTNAME, String HCMX_TENANT_ID, String HCMX_PERSON_ID, String subID, String SMAX_AUTH_TOKEN, String curlCMD, String USE_PROXY, String   PROXY_REQUIRES_CREDENTIALS)
{
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ProxyCred', usernameVariable: 'PROXY_USER', passwordVariable: 'PROXY_USER_PSW']]) 
	{	
		// For demo and testing only. Comment out this line in production environment.
		echo "sleep for $HCMX_SUB_CANCEL_DELAY_SECONDS seconds before canceling subscription to delete deployed VM for testing."
		sleep(HCMX_SUB_CANCEL_DELAY_SECONDS)
		
		echo "HCMX: Canceling subscription"
		// Cancel subscription to delete deployed virtual machines. This frees up resources on cloud provider and reduces cloud spend.
		// Prepare HCMX cancel subscription URL using the subscription ID and the person ID that were obtained in earlier steps.
		final String HCMX_CANCEL_SUBSCRIPTION_URL = "https://" + HCMX_EXT_ACCESS_HOSTNAME + "/rest/" + HCMX_TENANT_ID + "/ess/subscription/cancelSubscription/" + HCMX_PERSON_ID + "/" + subID
		
		String subCancelResponse
		int subCancelResCode
		
		// Submit a REST API call to HCMX to cancel subscription, thereby delete deployed VM
		if (USE_PROXY.equalsIgnoreCase("NO") || ((USE_PROXY.equalsIgnoreCase("YES")) &amp;&amp; (PROXY_REQUIRES_CREDENTIALS.equalsIgnoreCase("NO"))))
		{	
			(subCancelResponse, subCancelResCode)  = sh(script: '''set +x;''' + curlCMD + ''' -s -w '\\n%{response_code}' -X PUT "''' + HCMX_CANCEL_SUBSCRIPTION_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
		}
		else
		{
			(subCancelResponse, subCancelResCode)  = sh(script: '''set +x;''' + curlCMD + ''' --proxy-user $PROXY_USER:$PROXY_USER_PSW -s -w '\\n%{response_code}' -X PUT "''' + HCMX_CANCEL_SUBSCRIPTION_URL + '''" -k -H "Content-Type: application/json" -H "Accept: application/json" -H "Accept: text/plain" --cookie "TENANTID=$HCMX_TENANT_ID;SMAX_AUTH_TOKEN="''' + SMAX_AUTH_TOKEN + '''"" ''', returnStdout: true).trim().tokenize("\n")
		}
			
		if (subCancelResCode == 200) 
		{
			echo "HCMX Subscription canceled successfully"
		}
		else
		{
			echo "HCMX subscription cancellation failed. Removal of deployed VM has failed."
			echo "HCMX Subscription cancellation response: $subCancelResponse"
		}
	}
}</code></pre>

<p></p>
</html>