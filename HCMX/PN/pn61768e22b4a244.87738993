<html><p>The HCMX DND capability enables customers to create service designs, offerings, and automate the provisioning and management of hybrid and multi-cloud resources. The HCMX DND service designs provide the way to describe the deployment blueprint, and there will be multiple user inputs required in order to fulfill the service design. The user input is defined as options in the "Configuration Options" tab on the service design. The user input property types supported by HCMX are Boolean, Integer, String, and List. With the List input type, there can be a static list that you can define in the option itself or there can be a dynamic list that gets populated by executing the JavaScript in DND.</p>

<h2>Creating Dynamic List property</h2>

<p>To create the dynamic list property on a service design, follow the below steps;</p>

<ol>
	<li>On the service design, go to "Configuration Options".</li>
	<li>Select the Option Set on which want to create the Dynamic List user input, if there are none then create a new option set.</li>
	<li>Click on "Add Property" to add a new user inputs option
	<ol type="a">
		<li>Select the Property Type as List</li>
		<li>Enter the name and display name for the property</li>
		<li>Click on "Switch to Dynamic Entry" to change the property from static to dynamic</li>
		<li>Select the existing JS script from the list again the List Items, or create a new one as described in the section "Creating a new Dynamic JS script".</li>
		<li>Click Done and Save</li>
	</ol>
	</li>
	<li>Now this property will list the items by executing the Dynamic JS which you have selected</li>
</ol>

<p><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/b/b3/addProperty.png" height="500" hspace="0" src="/mediawiki/images/pn_images/pn_image_6176921335f3a6.64769126.png" style="width: 686.834px; height: 800px; margin: 0px; border: 0px solid black;" vspace="0" width="486.8335146898803"></p>

<h2>Sample Content of Dynamic JS Script</h2>

<p>To load a Dynamic list of key-value pairs like (key1, name1) or (key2, name2) into the option property, the script needs to wrap the key-value pairs in XML as shown below. The script must write this XML to its standard output (body of HTTP response).</p>

<pre>// Dynamic list response.
// You can start with typing help.

availableValues = [{
	'value' : 'value 1',
	'displayName' : 'Item 1',
	'description' : 'JavaScript generated value',
	'initialPrice' : '1',
	'recurringPrice' : '2'
},
{
	'value' : 'value 2',
	'displayName' : 'Item 2',
	'description' : 'JavaScript generated value',
	'initialPrice' : '2',
	'recurringPrice' : '3'
}];
</pre>

<div class="Admonition_Note"><b>Note</b>&nbsp; &nbsp; The initialPrice and recurringPrice properties in the XML are not yet supported in HCMX.</div>

<p>The script creates a variable availableValues with a value containing an array of objects where each object contains some of these keys: value, displayName, description, initialPrice, recurringPrice with strings as values. Each availableValues tag describes one item in the list of the dynamic list property. The tags value, displayName and description describe how the value is processed and displayed.</p>

<h2>Creating a new Dynamic JS script</h2>

<p>To create new Dynamic JS script follow the below steps;</p>

<ol>
	<li>Edit the property for which you want to create the JS script for,</li>
</ol>

<h2>Server tokens</h2>

<p>DND supports passing artifact IDs/token IDs as HTTP request parameters into the JavaScript. The value of each parameter takes the form of [CLIENT:&lt;token_name&gt;], [TOKEN:&lt;token_name&gt;], or [PORTAL:&lt;token_name&gt;]. To choose a supported token, click the Select Token button to the right of the parameter to open the list of supported tokens, and select the token you want.</p>

<h2>Testing the Dynamic JS script</h2>

<p>Execute the JavaScript in Service Designerâ€™s JavaScript editor. To execute the JavaScript in JavaScript editor, click the refresh button in the JavaScript editor. In the sample screenshot below, the js-example-debug.js script has been modified to include debug functions. For details on debugging the Dynamic JS Script, refer to the document <a href="https://docs.microfocus.com/itom/HCMX:2021.08/PN/pn60c8a98ecba9c7.92975234">here</a></p>

<h2>Cascading Options</h2>

<p>Consider an offering for an infrastructure service where the choices for Server Edition are different for each of the choices for the Operating System (OS). For example, for this scenario, the OS choices are Windows and RHEL. You will offer the choices of Standard or Enterprise for Windows, and Server or Desktop for RHEL.<br>
The Server Edition list should be filtered based on the OS selected.<br>
The following table summarizes the subscriber options to be displayed:</p>

<p>Here you need to change the script and the subscriber option properties. To change the subscriber option to serve these different choices, you must modify the osProperties.js script and the properties. You can create a new version of the design for the modifications, or you can edit the existing design. However, for this scenario, these values will be updated as described below.</p>

<div class="Admonition_Note"><b>Note</b>&nbsp; &nbsp;The option values can be passed from the parent to the child list within an option set. You cannot pass option values across option sets.</div>

<h2>Secure access to various resources using ResourceAlias</h2>

<p>The dynamic list property can be populated by capturing data from an external source like a file or a database. The list property is associated with a JavaScript (JS) file which embeds the logic to capture data from an external source and wraps the data as XML. DND provides a framework to execute JavaScript returns XML as an HTTP response Object ResourceAlias: used to refer to entries in resource-alias.xml, which holds various configurations for resources such as database connection, filesystem access, credentials. A Sample Resource entry in resource-alias.xml may look like below</p>

<pre>&lt;entry name='myuser for servername'&gt;
&nbsp; &nbsp;&lt;username&gt;myuser&lt;/username&gt;
&nbsp; &nbsp;&lt;requiredProtocol&gt;https&lt;/requiredProtocol&gt;
&nbsp; &nbsp;&lt;requiredURLPrefix&gt;https://servername/somepath/&lt;/requiredURLPrefix&gt;
&nbsp; &nbsp;&lt;password&gt;ENC(3oKr9eADA7bE53Zk2t9wIA==)&lt;/password&gt;
&lt;/entry&gt;
</pre>

<p>Resource alias is consumed by HTTP/S client, JDBC database access, Filesystem access functions.</p>

<p>All the tags inside the entry are optional. In this case, an entry is specified (using requiredProtocol tag) to be usable with only https (to specify both http and https, the requiredProtocol tag may be duplicated with other values). Tag requiredURLPrefix specifies any URL with which it is used has to start with this prefix. If multiple tag requiredURLPrefix are specified the actual URL must match it prefix with at least one of them. Prefix matching does not allow the actual URL to use path components like ".." to go outside of the prefix. As an alternative, the URL may be restricted using the tag requiredURL. In that case, exact equality is required. Multiple tags requiredURL are possible. Username and password in the HTTP/S client are interpreted as HTTP Basic authentication credentials. Passwords allow encryption (same encryption as the passwords in the csa.properties file). They can also use syntax ${property.name} to refer to properties in csa.properties file. Tag baseURL (not visible in the example above) allows administrator to specify URL that is validated in the same way as a single occurrence of tag requiredURLPrefix, but changes the meaning of actual URL parameter passed to client libraries so that it is only relative to this baseURL (useful to avoid repeating hostname in the configuration and in the script).</p>

<p>Other protocols that are recognized:</p>

<ul>
	<li>jdbc - when used with SQLClient.</li>
	<li>file - when used with FileStorage.</li>
</ul>

<h2>SQL Client</h2>

<p>SQL client is accessible through object SQLClient which provides a single function named "call". Initialization of SQL client has one parameter. This parameter represents the ResourceAlias instance. This alias is located at the resource-alias.xml file in the same directory as a dynamic property javascript file. This alias instance must be JDBC type and should contain the username (mandatory), base URL (mandatory), and password (optional). Resource Alias example:</p>

<pre>&lt;entry name='postgres database'&gt;
&nbsp; &nbsp;&lt;username&gt;csa&lt;/username&gt;
&nbsp; &nbsp;&lt;requiredProtocol&gt;jdbc&lt;/requiredProtocol&gt;
&nbsp; &nbsp;&lt;baseURL&gt;jdbc:postgresql://localhost:5432/csa&lt;/baseURL&gt;
&nbsp; &nbsp;&lt;password&gt;ENC(3oKr9eADA7bE53Zk2t9wIA==)&lt;/password&gt;
&lt;/entry&gt;
</pre>

<p>SQL initialization example: <code>var client = new SQLClient (new ResourceAlias(' postgres database'));</code></p>

<p>The 'call' function can execute only select query. If the query parameter contains insert or update query, the method throws an error. The function has two parameters. The first parameter is SQL query in JDBC PreparedStatement format (values of query parameters should be replaced by a question mark). The second parameter is an array of parameter values in order that should be placed to the query. These values will be placed into the query before execution. If you need to use Date, Time, or Timestamp objects, you have to use SQLDate, SQLTime or SQLTimestamp object instead.</p>

<p>Query execution example:</p>
<code>var response = client.call('SELECT * FROM csa_action where artifact_id = ? and consumer_visible = ? and version_number = ? and updated_on &gt; ?', [ '8fe9ce204ffeb8b4014ffebc521d09f6', true, 1, new SQLTimestamp('2015-09-24 11:00:00.000') ]);</code>

<p>Executing query returns a response object. This object contains objects metadata, rows (number of returned rows), and data. Metadata is a HashMap object containing column name as key and column type as value. Rows contain returned rows count. Data is an array with the size of return rows count and contains HashMap objects. Every map contains column name as key and column value as value.</p>

<h3>Dynamic JS script with Postgresql (non-ssl)</h3>
Use the following SQL Client entry in the resource_alias.xml

<pre>&lt;entry name='dnddb'&gt;
&nbsp; &nbsp;&lt;username&gt;postgres&lt;/username&gt;
&nbsp; &nbsp;&lt;requiredProtocol&gt;jdbc&lt;/requiredProtocol&gt;
&nbsp; &nbsp;&lt;baseURL&gt;jdbc:postgresql://[hostname]:5432/[databasename]&lt;/baseURL&gt;
&nbsp; &nbsp;&lt;password&gt;password&lt;/password&gt;
&lt;/entry&gt;
</pre>

<h3>Dynamic JS script with Postgresql (ssl)</h3>

<pre>&lt;entry name='dnddb'&gt;
&nbsp; &nbsp;&lt;username&gt;postgres&lt;/username&gt;
&nbsp; &nbsp;&lt;requiredProtocol&gt;jdbc&lt;/requiredProtocol&gt;
&nbsp; &nbsp;&lt;baseURL&gt;jdbc:postgresql://[hostname]:5432/[databasename]?ssl=true&amp;amp;sslmode=require&amp;amp;sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory&lt;/baseURL&gt;
&nbsp; &nbsp;&lt;password&gt;password&lt;/password&gt;
&lt;/entry&gt;
</pre>

<h3>Dynamic JS script with MSSQL</h3>

<pre>&lt;entry name='dnddb'&gt;
&nbsp; &nbsp;&lt;username&gt;sa&lt;/username&gt;
&nbsp; &nbsp;&lt;requiredProtocol&gt;jdbc&lt;/requiredProtocol&gt;
&nbsp; &nbsp;&lt;baseURL&gt;jdbc:jtds:sqlserver://[hostname]:1433/[databasename]&lt;/baseURL&gt;
&nbsp; &nbsp;&lt;password&gt;password&lt;/password&gt;
&lt;/entry&gt;
</pre>

<h3>JS Script for using the SQL Client connection</h3>
Create a new script to use the postgres SQL Client connection, an example JS script to read the provider types from the DND database;

<pre>var client = new SQLClient (new ResourceAlias('dnddb'));
var response = client.call('select uuid, display_name from dnd_996484741.csa_category where discriminator like ?', ['%PROVIDER%']);

var availableValues = [];

for(var row in response.data) {

    appName = response.data[row].get('display_name');
    appValue = response.data[row].get('uuid');

    var availableRow = {
        'value' : appValue,
        'displayName' : appName
    };

    availableValues.push(availableRow);
}
</pre>
</html>