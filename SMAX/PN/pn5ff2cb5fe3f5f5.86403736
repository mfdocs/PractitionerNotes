<html><p>This topic describes how you can use Velero,&nbsp;an open-source tool, to back up and restore Kubernetes cluster resources and persistent volumes in an on-premises environment. This is helpful when you destroyed some Kubernetes resources for whatever reason, for example, when you delete the suite namespace accidentally.&nbsp;</p>

<div class="Admonition_Important"><span class="autonumber">Note</span> This tool does not back up database data and NFS data.&nbsp;</div>

<h2>Export an NFS directory</h2>

<p>On your&nbsp;NFS server, export one NFS directory.</p>

<ol>
	<li>Create one directory under the base directory. For example, if your existing NFS directories share the base directory /var/vols/itom, run the following command:
	<pre><code>mkdir -p  /var/vols/itom/minio</code></pre>

	<p></p>
	</li>
	<li>Change the permission of the directory:
	<pre><code>chmod -R 755 /var/vols/itom/minio</code></pre>

	<p></p>
	</li>
	<li>Change the ownership of the directory (change 1999:1999 to your own UID:GID if you use custom values):
	<pre><code>chown -R 1999:1999 /var/vols/itom/minio</code></pre>

	<p></p>
	</li>
	<li><span style="font-size:12.0pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">In the /etc/exports file, export the NFS directory by adding one line&nbsp;</span></span>(change 1999 to your own UID or GID if you use a custom value for them):&nbsp;
	<pre><code>/var/vols/itom/minio *(rw,sync,anonuid=1999,anongid=1999,root_squash)</code></pre>

	<p></p>
	</li>
	<li>Run the following command:
	<pre><code>exportfs -ra</code></pre>

	<p></p>
	</li>
	<li>Run the following command to check that the directory is exported:
	<pre><code>showmount -e | grep minio</code></pre>

	<p></p>
	</li>
</ol>

<h2>Download the minio&nbsp;images</h2>

<p>If your control plane nodes (formerly known as "master nodes") have Internet access, download the image from a control plane&nbsp;node; otherwise, download the image from another Linux machine that has Internet access and then transfer the image to the control plane node.</p>

<ol>
	<li>On the download machine, navigate to a directory where you want to download the images, and then run the following commands&nbsp;:
	<pre><code>docker pull minio/minio:latest&nbsp;
ocker pull  minio/mc:latest</code></pre>
	</li>
	<li lang="en-US">If the control plane node has no Internet access, transfer&nbsp;the images to the control plane node.&nbsp;</li>
	<li lang="en-US">Obtain the image IDs.
	<ol start="1" style="list-style-type: lower-alpha;">
		<li>Run the following command:&nbsp;
		<pre><code>docker images |grep minio</code></pre>
		</li>
		<li>In the output, find the&nbsp;IDs of the&nbsp;images. In the following example, it's&nbsp;8dbf9ff992d5.
		<pre><code>docker.io/minio/minio latest 8dbf9ff992d5 30 hours ago 183 MB</code></pre>
		</li>
	</ol>
	</li>
	<li lang="en-US">Run the following command to tag one&nbsp;image:
	<pre><code>docker tag &lt;image ID&gt; &lt;image registry URL&gt;/&lt;organization name&gt;/minio:&lt;tag&gt;</code></pre>

	<p>The following are two examples:</p>

	<pre><code>docker tag 8dbf9ff992d5 myregistry.azurecr.io/sandbox/minio:test
docker tag 8dbf9ff992d5 localhost:5000/hpeswitom/minio:test</code></pre>

	<ul>
		<li>
		<p>&lt;image ID&gt;: the image ID you obtained in the previous step.</p>
		</li>
		<li>
		<p>&lt;image registry URL&gt;/&lt;organizaition name&gt;: your image registry URL/organization name. If using the local registry, it's localhost:5000/hpeswitom; if using an external registry, ask your registry administrator for it.</p>
		</li>
		<li>&lt;tag&gt;: specify any value you like.&nbsp;</li>
	</ul>
	</li>
	<li lang="en-US">Repeat the step above&nbsp;to tag the other image (minio/mc:latest) into your image registry.&nbsp;</li>
	<li lang="en-US">Push the images into your image registry:
	<pre><code>docker push &lt;image registry URL&gt;/&lt;organization name&gt;/minio:&lt;tag&gt;
docker push &lt;image registry URL&gt;/&lt;organization name&gt;/mc:&lt;tag&gt;</code></pre>

	<p>Example 1:</p>

	<pre><code>docker push myregistry.azurecr.io/sandbox/minio:test
docker push myregistry.azurecr.io/sandbox/mc:test

</code></pre>

	<p>Example 2:</p>

	<pre><code>docker push localhost:5000/hpeswitom/minio:test
docker push localhost:5000/hpeswitom/mc:test</code></pre>
	</li>
</ol>

<h2>Install Velero on a control plane node</h2>

<p>Perform the following steps to install Velero on the control plane node (formerly known as a "master node").</p>

<ol>
	<li>Download the tarball of the latest Velero release to a temporary directory on the control plane node. The download URL is&nbsp;https://github.com/vmware-tanzu/velero/releases/.</li>
	<li>Extract the package:
	<pre><code>tar -xvf &lt;release-tarball-name&gt;.tar.gz</code></pre>

	<p>The directory you extracted is called the “Velero directory” in subsequent steps.&nbsp;</p>
	</li>
	<li>Move the Velero binary from the Velero directory to somewhere in your&nbsp;PATH. For example:
	<pre><code>cp velero /usr/local/bin/</code></pre>

	<p></p>
	</li>
	<li>Create a Velero-specific credentials file in your local directory. For example, in the Velero directory:
	<pre><code>cat &lt;&lt;ENDFILE &gt; ./credentials-velero
[default]
aws_access_key_id = minio
aws_secret_access_key = minio123
ENDFILE
</code></pre>

	<p></p>
	</li>
	<li>Navigate to the Velero directory, and create a backup copy of the&nbsp;examples/minio/00-minio-deployment.yaml file. This is because in the next steps, you will need to edit this file.&nbsp;</li>
	<li>Add PVs/PVCs to the 00-minio-deployment.yaml file by appending the following code lines to the end of the file:
	<pre><code>apiVersion: v1
kind: PersistentVolume
metadata:
  name: minio-pv-claim
  namespace: velero
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /var/vols/itom/itsma/minio
    serv</code></pre>
	</li>
</ol>
</html>