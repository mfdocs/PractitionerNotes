<div class="PNbanner"><div style="margin: auto 1% auto 0;"><i style="color:#0073e7;cursor:pointer;padding: 5%;" class="material-icons tooltip">info <span class="tooltiptext">The content has not been reviewed or tested by Micro Focus.</span></i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div>This page was added by an ITOM practitioner. Join the practitioner group, contribute, and build a stronger knowledge network.</div></div><h1 style="margin-bottom:0px;">Security</h1><div class="f14 metric" style="color:#656668;display:flex;"><img src="/assets/images/calendar.png" style="height:12px;margin-top:auto;margin-bottom:auto;"><span class="updateDate">&nbsp; Updated on Nov 8, 2019</span> &nbsp;&nbsp;&nbsp;&nbsp; | &nbsp;&nbsp;&nbsp;&nbsp; <img src="/assets/images/updated.png" style="height:12px;margin-top:auto;margin-bottom:auto;"><span class="readTime">&nbsp; 19 minutes to read</span>&nbsp;&nbsp;&nbsp;&nbsp; | &nbsp;&nbsp;&nbsp;&nbsp;<div>Rated 5&nbsp;<img src="/assets/images/star.png" style="height:12px;margin-top:auto;margin-bottom:auto;"></div> </div><br><div class="mw-parser-output"><p><br>
The CDF and Suite installation leverage and/or employ various techniques for tight security control:
</p>
<ul><li>Host firewall</li>
<li>SE Linux on the cluster node</li>
<li>Linux kernel process isolation features</li>
<li>Container users and privileges</li>
<li>Host directory / file permissions</li>
<li>Docker configuration</li>
<li>Kubernetes configuration</li>
<li>Certificate-secured communication</li>
<li>Dedicated secure configuration store and certificate generation: Hashicorp Vault</li>
<li>CDF user management</li></ul>
<div id="toc" class="toc"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none"><div class="toctitle" lang="en" dir="ltr"><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Host_firewall"><span class="tocnumber">1</span> <span class="toctext">Host firewall</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#SELinux"><span class="tocnumber">2</span> <span class="toctext">SELinux</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Host-level"><span class="tocnumber">2.1</span> <span class="toctext">Host-level</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Docker-level"><span class="tocnumber">2.2</span> <span class="toctext">Docker-level</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Linux_kernel_process_isolation_features"><span class="tocnumber">3</span> <span class="toctext">Linux kernel process isolation features</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Container_users_and_privileges"><span class="tocnumber">4</span> <span class="toctext">Container users and privileges</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Users"><span class="tocnumber">4.1</span> <span class="toctext">Users</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Privileged_containers"><span class="tocnumber">4.2</span> <span class="toctext">Privileged containers</span></a>
<ul>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Docker"><span class="tocnumber">4.2.1</span> <span class="toctext">Docker</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Kubernetes"><span class="tocnumber">4.2.2</span> <span class="toctext">Kubernetes</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#User_and_privileged_summary"><span class="tocnumber">4.3</span> <span class="toctext">User and privileged summary</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Docker_configuration"><span class="tocnumber">5</span> <span class="toctext">Docker configuration</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Certificates_and_secure_communication"><span class="tocnumber">6</span> <span class="toctext">Certificates and secure communication</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Installation"><span class="tocnumber">6.1</span> <span class="toctext">Installation</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Certificate_deployment_configurations"><span class="tocnumber">6.2</span> <span class="toctext">Certificate deployment configurations</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Certificate_zones"><span class="tocnumber">6.3</span> <span class="toctext">Certificate zones</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Certificate_and_Vault_token_generation"><span class="tocnumber">6.4</span> <span class="toctext">Certificate and Vault token generation</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Generating_tokens_and_certificates_for_containers"><span class="tocnumber">6.5</span> <span class="toctext">Generating tokens and certificates for containers</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Use_of_customer_certificates"><span class="tocnumber">6.6</span> <span class="toctext">Use of customer certificates</span></a>
<ul>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#For_CDF_Ingress_controller"><span class="tocnumber">6.6.1</span> <span class="toctext">For CDF Ingress controller</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#For_Suite_Ingress_controller"><span class="tocnumber">6.6.2</span> <span class="toctext">For Suite Ingress controller</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Secure_configuration_store_and_cluster-internal_certificate_issuing"><span class="tocnumber">6.7</span> <span class="toctext">Secure configuration store and cluster-internal certificate issuing</span></a>
<ul>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Vault_and_Kubernetes-vault"><span class="tocnumber">6.7.1</span> <span class="toctext">Vault and Kubernetes-vault</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Kubernetes_2"><span class="tocnumber">7</span> <span class="toctext">Kubernetes</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Security_context_for_containers"><span class="tocnumber">7.1</span> <span class="toctext">Security context for containers</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Cluster-level_role-based_access_control"><span class="tocnumber">7.2</span> <span class="toctext">Cluster-level role-based access control</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Storage_security"><span class="tocnumber">8</span> <span class="toctext">Storage security</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Node_local_directory.2Ffile_access_policies"><span class="tocnumber">8.1</span> <span class="toctext">Node local directory/file access policies</span></a>
<ul>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#CDF_installation"><span class="tocnumber">8.1.1</span> <span class="toctext">CDF installation</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Node_local_storage_access_by_CDF_containers"><span class="tocnumber">8.2</span> <span class="toctext">Node local storage access by CDF containers</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#External_NFS_volume_security"><span class="tocnumber">8.3</span> <span class="toctext">External NFS volume security</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Image_security"><span class="tocnumber">9</span> <span class="toctext">Image security</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Image_scanning"><span class="tocnumber">9.1</span> <span class="toctext">Image scanning</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Image_signing"><span class="tocnumber">9.2</span> <span class="toctext">Image signing</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#Image_signature_checking"><span class="tocnumber">9.3</span> <span class="toctext">Image signature checking</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/CDFwpSecurity#CDF_user_management"><span class="tocnumber">10</span> <span class="toctext">CDF user management</span></a></li>
</ul>
</div>

<h2 class="mw-headline" id="Host_firewall">Host firewall</h2>
<p>The host firewall can be up and running during and after the CDF is installed.
</p><p>A Suite can be installed with the host firewall running.
</p><p>Security limitations in Kubernetes 1.13.x require additional host firewall configuration. Consult the installation/administration guide on how to configure the host firewall to restrict access to the Kubernetes cluster nodes from external systems for particular services and ports.
</p>
<h2 class="mw-headline" id="SELinux">SELinux</h2>
<h3 class="mw-headline" id="Host-level">Host-level</h3>
<p>Host-level SELinux can be in either “disabled”, “permissive” or “enforcing” mode for installation and runtime of the CDF.
</p><p>CDF installs an SE Linux policy module to allow CDF components to work when SE Linux is running in "enforcing" mode.
</p><p>It is possible that on certain customer configurations, security exceptions will be caught, thereby possibly causing one or more components not to work properly. In such case, a support ticket can be opened so Micro Focus can address the limitation through an updated policy module.
</p>
<h3 class="mw-headline" id="Docker-level">Docker-level</h3>
<p>The CDF does not support reconfiguring the Docker daemon to enable SELinux support using the --selinux-enabled flag.
</p>
<h2 class="mw-headline" id="Linux_kernel_process_isolation_features">Linux kernel process isolation features</h2>
<p>The basis of container security is provided by several Linux kernel isolation features:
</p>
<ul><li>namespaces: <a target="1" rel="nofollow" class="external free" href="http://man7.org/linux/man-pages/man7/namespaces.7.html">http://man7.org/linux/man-pages/man7/namespaces.7.html</a></li>
<li>cgroups: <a target="1" rel="nofollow" class="external free" href="http://man7.org/linux/man-pages/man7/cgroups.7.html">http://man7.org/linux/man-pages/man7/cgroups.7.html</a></li>
<li>chroots: <a target="1" rel="nofollow" class="external free" href="http://man7.org/linux/man-pages/man2/chroot.2.html">http://man7.org/linux/man-pages/man2/chroot.2.html</a></li></ul>
<p>Docker uses the above Linux kernel features to provide secure and isolated execution of application processes inside Docker: <b>containers</b>.
</p><p>For details see: <a target="1" rel="nofollow" class="external free" href="https://www.docker.com/sites/default/files/WP_IntrotoContainerSecurity_08.19.2016.pdf">https://www.docker.com/sites/default/files/WP_IntrotoContainerSecurity_08.19.2016.pdf</a>
</p><p>The remainder of this chapter focuses on the specific CDF security configuration.
</p>
<h2 class="mw-headline" id="Container_users_and_privileges">Container users and privileges</h2>
<h3 class="mw-headline" id="Users">Users</h3>
<p><b>Suite containers</b> <i>typically</i> do not use the root user inside the container.
</p><p>They use a regular user account and group inside the container, defined when the container image is built.
</p><p>This non-privileged user is then used to start all the processes inside the container.
</p><p>Below example shows a typical suite container, showing output of the ‘id’ command and running processes:
</p>
<pre class="syntaxhighlighter-pre">sh-4.3$ id
uid=495(bvd) gid=493(bvd) groups=493(bvd)
sh-4.3$ ps -ef
UID PID PPID C STIME TTY TIME CMD
bvd 1 0 0 Apr12&nbsp;? 00:03:15 /bin/node /bvd/server.js control
bvd 180 0 0 11:42&nbsp;? 00:00:00 sh
bvd 197 180 0 11:45&nbsp;? 00:00:00 ps -ef
</pre>
<p><b>CDF containers</b> use the root user where technically required. If not technically required, CDF containers use a regular user.
</p><p>“Technically required” explained:
</p>
<ul><li>Micro Focus uses off the shelf open source images and the container user is set as root and cannot be changed</li>
<li>Containers need access to the host to change the host configuration (requires also privileged container)</li></ul>
<p>The “root” user inside the container has much less privileges than a regular “root” user, except in the case of a privileged container. See Privileged containers.
</p>
<h3 class="mw-headline" id="Privileged_containers">Privileged containers</h3>
<p>In CDF 2019.11 only Flannel and the CDF API server run with the privileged flag set to true in their YAML.
</p>
<h5 class="mw-headline" id="Docker">Docker<span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;veaction=edit&amp;section=T-9" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;action=edit&amp;section=T-9" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h5>
<p>Docker containers can run in privileged mode to support Docker in Docker and/or to have access to the host devices and processes.
</p><p>This is separate from the running processes inside the containers’ use of root user.
</p><p>Any CDF containers run directly on Docker can use either the -privileged or the -cap-add flags. For details see <a target="1" rel="nofollow" class="external free" href="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities">https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities</a>.
</p>
<h5 class="mw-headline" id="Kubernetes">Kubernetes<span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;veaction=edit&amp;section=T-10" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;action=edit&amp;section=T-10" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h5>
<p>To allow Kubernetes to start containers in privileged mode via the Pod specification, the Kubelet needs to be configured to allow this. 
</p><p>Pod specifications cannot use the “privileged:true” flag in the securityContext configuration to allow a Pod to start its containers in privileged mode.
</p>
<h3 class="mw-headline" id="User_and_privileged_summary">User and privileged summary</h3>
<p>The Suite security guide may detail any exceptions.
</p><p>The following Kubernetes processes run non-containerized:
</p>
<a class="buttonfullscr" onclick="javascript:loadingTableButton(this);"><button class="flscrbtn"><i class="material-icons flscricn">open_in_new</i><div style="margin: auto 5px;">View Fullscreen</div></button></a><table>
<tbody><tr>
<th><b>Process</b>
</th>
<th><b>Run as user</b>
</th></tr>
<tr>
<td>Kubernetes Kubelet
</td>
<td>root
</td></tr>
<tr>
<td>Kubernetes Kube-proxy
</td>
<td>root
</td></tr>
<tr>
<td>Docker daemon
</td>
<td>root
</td></tr></tbody></table>
<h2 class="mw-headline" id="Docker_configuration">Docker configuration</h2>
<p>The Docker daemon only listens on localhost. No outside access is possible.
</p><p>Micro Focus does not require any special modifications of the host system or its kernel. We may require more recent kernel versions depending on the host OS version. Review the compatibility matrix for details.
</p><p>Micro Focus is reducing the use of the “root” user as much as possible. The runtime use of privileged containers is limited. See Privileged containers.
</p><p>Providing access to additional capabilities for containers is restricted as much as possible. The following components get additional capabilities:
</p><p>Micro Focus has verified SELinux in the following modes: disabled, permissive, enforcing. See also chapter “SELinux”.
</p><p>Micro Focus is not using the “User Namespaces” Docker feature.
</p>
<h2 class="mw-headline" id="Certificates_and_secure_communication">Certificates and secure communication</h2>
<h3 class="mw-headline" id="Installation">Installation</h3>
<p>At CDF and Suite installation time, CAs are created to generate and sign certificates issued for:
</p>
<ul><li>the CDF internal services (RIC)</li>
<li>the CDF and suite externally facing Nginx controllers (RE)</li>
<li>the suite internal services (RID)</li></ul>
<p>The Suite may decide not to use the internal certificate generation feature and instead ask for customer-issued certificates. These can be loaded on the NGINX controllers for CDF and suite.
</p>
<h3 class="mw-headline" id="Certificate_deployment_configurations">Certificate deployment configurations</h3>
<p>The following table describes the possible certificate configurations:
</p>
<a class="buttonfullscr" onclick="javascript:loadingTableButton(this);"><button class="flscrbtn"><i class="material-icons flscricn">open_in_new</i><div style="margin: auto 5px;">View Fullscreen</div></button></a><table class="wikitable">
<tbody><tr>
<td>
</td>
<td><b>Case &gt;</b>
</td>
<td>&nbsp;
</td>
<td>&nbsp;
</td>
<td>&nbsp;
</td></tr>
<tr>
<td><b>Component</b>
<p><b>v</b>
</p>
</td>
<td>All internal  PKI
</td>
<td>Ingress uses  customer PKI issued certificate
</td>
<td>Using ROOTCA/ROOTCAKEY  from customer PKI
</td>
<td>all certificates  generated by external customer PKI
</td></tr>
<tr>
<td>Docker
</td>
<td>N/A
</td>
<td>N/A
</td>
<td>N/A
</td>
<td>N/A
</td></tr>
<tr>
<td>Etcd
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  using ROOTCA/ROOTCAKEY from customer PKI
</td>
<td>Customer  PKI issued certificate manually loaded
</td></tr>
<tr>
<td>Vault
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  using ROOTCA/ROOTCAKEY from customer PKI
</td>
<td>Customer  PKI issued certificate manually loaded
</td></tr>
<tr>
<td>Kubelet
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  using ROOTCA/ROOTCAKEY from customer PKI
</td>
<td>Customer  PKI issued certificate manually loaded
</td></tr>
<tr>
<td>K8S API server
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  from internal CA RIC
</td>
<td>OpenSSL  using ROOTCA/ROOTCAKEY from customer PKI
</td>
<td>Customer  PKI issued certificate manually loaded
</td></tr>
<tr>
<td>Containers
</td>
<td>Vault  (from imported internal CA RIC)
</td>
<td>Vault  (from imported internal CA RIC)
</td>
<td>Vault  (from imported ROOTCA/ROOTCAKEY from customer PKI)
</td>
<td>Vault  CA not in use&nbsp;; customer provides certificate for every container instance
</td></tr>
<tr>
<td>Ingress
</td>
<td>Vault  (from imported internal CA RE)
</td>
<td>Customer  PKI issued certificate manually loaded
</td>
<td>Customer  PKI issued certificate manually loaded
</td>
<td>Customer  PKI issued certificate manually loaded
</td></tr>
<tr>
<td>
</td>
<td>
</td>
<td>
</td>
<td>
</td>
<td>
</td></tr>
<tr>
<td>Comments
</td>
<td>Default  installation case
</td>
<td>Recommended for production
</td>
<td>Not  likely customers will supply root CA  and key
</td>
<td>Not even realistic in a dynamic  container-based system.
</td></tr></tbody></table>
<p>The internal certificates are issued from (options are mutually exclusive):
</p>
<ul><li>a self-generated root CA</li>
<li>a customer provided root CA or better intermediate root CA (not recommended)</li></ul>
<p>It is recommended to load the Ingress controller with a customer-generated certificate. The CDF does not generate that certificate. The customer needs to use their PKI to generate and sign a certificate for the externally facing Nginx services: CDF and suite. See “Use of customer certificates”.
</p>
<h3 class="mw-headline" id="Certificate_zones">Certificate zones</h3>
<p>The following diagram shows the certificates zones in an out-of-the-box CDF installation:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pic27.png" src="/mediawiki/images/thumb/e/e6/pic27.png/900px-pic27.png" width="900" height="359" srcset="/mediawiki/images/thumb/e/e6/pic27.png/1350px-pic27.png 1.5x, /mediawiki/images/e/e6/pic27.png 2x" data-file-width="1754" data-file-height="700"></a>
</p><p>The following diagram shows the certificate zones when customer PKI issued certificates are loaded on the externally facing Nginx controllers:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pic28.png" src="/mediawiki/images/thumb/e/e0/pic28.png/900px-pic28.png" width="900" height="357" srcset="/mediawiki/images/thumb/e/e0/pic28.png/1350px-pic28.png 1.5x, /mediawiki/images/e/e0/pic28.png 2x" data-file-width="1742" data-file-height="691"></a>
</p>
<h3 class="mw-headline" id="Certificate_and_Vault_token_generation">Certificate and Vault token generation</h3>
<p>Note: the 2019.08 release deprecated the Kubernetes-Vault component. It is provided for backward compatibility with pre-2018.08 suite installations. The authentication method used to obtain Vault tokens in CDF 2019.11 is kubernetes-auth. All CDF public interfaces and APIs are 100% backward compatible.
</p><p>The below diagram shows:
</p>
<ul><li>Creation of self-generated root CA (uses openssl). The validity period is 10 years.</li>
<li>Creation of cluster communication certificates for base Kubernetes components (uses openssl). The validity period is 1 year.</li>
<li>Import of root CAs into the Vault pki backend</li>
<li>Generation of Vault access tokens for secure configuration data access for remaining CDF and Suite containers (uses Vault). The validity is 30 minutes for an access token; inside the Pod the certificate is renewed automatically to prevent expiry. See also sidecar container and Kubernetes-vault chapters.</li>
<li>Generation of server certificates for server processes inside remaining CDF and Suite containers (uses Vault). The validity period is 1 year.</li></ul>
<p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pic29.png" src="/mediawiki/images/thumb/4/48/pic29.png/900px-pic29.png" width="900" height="450" srcset="/mediawiki/images/thumb/4/48/pic29.png/1350px-pic29.png 1.5x, /mediawiki/images/thumb/4/48/pic29.png/1800px-pic29.png 2x" data-file-width="1836" data-file-height="917"></a>
</p><p>Figure - Token and certificate components diagram
</p>
<h3 class="mw-headline" id="Generating_tokens_and_certificates_for_containers">Generating tokens and certificates for containers</h3>
<p><a onclick="javascript:loadingImage(this);" class="image"><img alt="cdferwp201801 fig20d.png" src="/mediawiki/images/2/27/cdferwp201801_fig20d.png" width="800" height="884" data-file-width="456" data-file-height="504"></a>
</p><p>When containers are being started, they may need access to:
</p>
<ul><li>Securely stored configuration data</li>
<li>A server certificate to use for server processes</li></ul>
<p>Tokens and certificates are generated dynamically and on demand. The token and certificates are renewed periodically.
</p><p>The Pod specification for CDF and Suite containers contains annotations to get Vault tokens and server certificates. The patterns used for this are init (get token and certificate) and sidecar (renew certificate) containers.
</p><p>When a Pod starts, the init container is infused with a Vault access token. Then the init container requests a server certificate from Vault.
</p><p>While the Pod is running, a sidecar container continuously renews the short-lived Vault token and the longer-lived certificate.
</p><p>Micro Focus uses the Kubernetes-vault implementation to supply containers with access tokens. This init container code was updated to also generate server certificates.
</p>
<h3 class="mw-headline" id="Use_of_customer_certificates">Use of customer certificates</h3>
<h5 class="mw-headline" id="For_CDF_Ingress_controller">For CDF Ingress controller<span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;veaction=edit&amp;section=T-20" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;action=edit&amp;section=T-20" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h5>
<p>By default, the certificate used by the CDF Nginx (Ingress) that will be used to access CDF services on port 5443 is issued from either the self-generated root CA or a customer-provided root CA.
</p><p>If neither of the above options is acceptable, then a customer-issued certificate can be loaded. Refer to the Suite installation/administration guide for details.
</p>
<h5 class="mw-headline" id="For_Suite_Ingress_controller">For Suite Ingress controller<span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;veaction=edit&amp;section=T-21" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;action=edit&amp;section=T-21" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h5>
<p>Suite installations will install a separate Nginx (Ingress) instance that listens on port 443.
</p><p>A customer-issued certificate for customer access can be loaded into this instance.
</p><p>Refer to the Suite installation/administration documentation for details.
</p>
<h3 class="mw-headline" id="Secure_configuration_store_and_cluster-internal_certificate_issuing">Secure configuration store and cluster-internal certificate issuing</h3>
<h5 class="mw-headline" id="Vault_and_Kubernetes-vault">Vault and Kubernetes-vault<span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;veaction=edit&amp;section=T-23" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;action=edit&amp;section=T-23" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h5>
<p>The CDF uses Hashicorp’s Vault solution to provide:
</p>
<ul><li>secure storage of sensitive configuration data</li>
<li>issuing cluster-internal (or external Nginx controller) certificates</li></ul>
<p>Micro Focus leverages the following core functionality:
</p>
<ul><li>Generic secret Vault backends to store configuration data.
<ul><li>The data is secured at rest and in-flight.</li>
<li>Vault to component communication is secured using certificates.</li></ul></li>
<li>PKI backends Vault backends to issue cluster internal certificates.</li>
<li>Vault Approle authentication mechanism for services to access secure configuration data.</li></ul>
<p>For ease of use, the Vault server init and unseal steps happen automatically. The init steps happens at installation time, the unseal steps occur automatically whenever the server is started.
</p><p>The Vault root key and unseal shards are stored in ETCD.
</p><p><br>
</p><p>
Ingress for Suites is similar to CDF Ingress.</p><div class="Admonition_Note">
<p><span class="autonumber">Note</span><br>
</p>
Vault itself does not have an automatic unseal.</div>
<p>The CDF only supports automatic unlock of the Vault server. This has been added for ease of use. Restrict access to ETCD so the Vault root key and unseal shards are not compromised.
</p><p>See also: <a target="1" rel="nofollow" class="external free" href="https://www.vaultproject.io/">https://www.vaultproject.io/</a>&nbsp;; <a target="1" rel="nofollow" class="external free" href="https://github.com/Boostport/kubernetes-vault">https://github.com/Boostport/kubernetes-vault</a>
</p>
<h2 class="mw-headline" id="Kubernetes_2">Kubernetes</h2>
<h3 class="mw-headline" id="Security_context_for_containers">Security context for containers</h3>
<p>The Kubernetes securityContext is used inside Pod specification to run as a regular non-root user or to elevate privileges where needed. Elevating privileges is avoided whenever technically possible.
</p>
<pre class="syntaxhighlighter-pre">securityContext:
runAsUser: 1999
</pre>
<p>Or:
</p>
<pre class="syntaxhighlighter-pre">securityContext:
privileged: true
</pre>
<h3 class="mw-headline" id="Cluster-level_role-based_access_control">Cluster-level role-based access control</h3>
<p>The CDF on-premise cluster runs with RBAC enabled. CDF defines a set of cluster roles/bindings and within a namespace defines roles/bindings. These are associated to Kubernetes service accounts within the core and suite namespaces. These service accounts are used by Pods.
</p><p>For managed Kubernetes, Micro Focus expect such clusters to run with RBAC enabled.
</p>
<h2 class="mw-headline" id="Storage_security">Storage security</h2>
<p>See also: Storage
</p>
<h3 id="Node_local_directory/file_access_policies"><span class="mw-headline" id="Node_local_directory.2Ffile_access_policies">Node local directory/file access policies</span></h3>
<h5 class="mw-headline" id="CDF_installation">CDF installation<span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;veaction=edit&amp;section=T-29" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.11/WhitepaperSecurity&amp;action=edit&amp;section=T-29" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h5>
<p>Node local storage can only be accessed by the root users.
</p>
<div class="Admonition_Note">
<p><span class="autonumber">Note</span><br>
Root user access to cluster nodes must be strictly controlled and limited. With root permissions, users can inadvertently create major issues. Root access should be limited to select administrative actions only.
</p>
</div>
<p>The access permissions for &lt;CDF root&gt;/data have been set such that a regular user cannot view/change sensitive information when browsing the &lt;CDF root&gt; installation directories. Execution permissions for Kubernetes and other tools and processes have also been restricted.
</p>
<h3 class="mw-headline" id="Node_local_storage_access_by_CDF_containers">Node local storage access by CDF containers</h3>
<p>Containers can access node local storage directly only if the container is configured to use host path storage.
</p>
<h3 class="mw-headline" id="External_NFS_volume_security">External NFS volume security</h3>
<p>CDF and Suite containers persist data on a multiple shared volumes. The only supported storage backend for these shared volume is NFS (and also EFS in AWS).
</p><p>Minimally a setup will require two NFS volumes:
</p>
<ul><li>CDF data</li>
<li>Suite data</li></ul>
<p>Micro Focus recommend that these volumes be two separate NFS mount points and that the CDF core and suite volume not be shared.
</p><p>Suites installations may request creation and use of multiple NFS volumes to separate configuration from logs from databases and for performance reasons.
</p><p>Root user access is squashed to a particular user and group. The user ID and group ID will be 1999 and 1999 resp.
</p><p>This uid and gid are defined/used inside the container image and may also be present in Pod specifications in the securityContext section.
</p><p>Because of the required root_squash option to anonuid/anongid for the NFS mount pints, access to the NFS volumes must be restricted using firewall rules so that only mount and access requests from cluster nodes will succeed.
</p>
<div class="Admonition_Note">
<p><span class="autonumber">Note</span><br>
The CDF and suite use uid 1999 and gid 1999. This can be changed. Customers need to contact Micro Focus support if these values conflict with locally defined/used values.
</p>
</div> 
<p>Refer to the Suite installation/administration guide for configuration details.
</p>
<h2 class="mw-headline" id="Image_security">Image security</h2>
<h3 class="mw-headline" id="Image_scanning">Image scanning</h3>
<p>All Micro Focus images (including the open source 3<sup>rd</sup> party images) are scanned for vulnerabilities and malware.
</p><p>This scanning occurs a 1<sup>st</sup> time during the CI/CD (continuous integration / continuous delivery) process that is integrated into our development process.
</p><p>This scanning occurs and 2<sup>nd</sup> time during the signing process when the images are uploaded to Docker Hub. See Image signing.
</p>
<h3 class="mw-headline" id="Image_signing">Image signing</h3>
<p>All Micro Focus images (including the open source 3<sup>rd</sup> party images) are digitally signed when uploaded into Docker Hub. At this time the images are rescanned for malware.
</p><p>Micro Focus uses the standard Docker Notary process and server to sign and store the image signatures.
</p>
<div class="Admonition_Note">
<p><span class="autonumber">Note</span><br>
The malware scanning occurs on Micro Focus’ servers and is not a feature of Docker Notary.
</p>
</div> 
<h3 class="mw-headline" id="Image_signature_checking">Image signature checking</h3>
<p>The image signatures can be checked when the images are downloaded from Docker Hub and before they are pushed into the customer’s local registry.
</p><p>The &lt;CDF root&gt;/downloadimages.sh script has a -c|--content-trust parameter which when set to ‘on’ will verify the image signature of all the downloaded images with the Docker Notary server (<a target="1" rel="nofollow" class="external free" href="https://notary.docker.io">https://notary.docker.io</a>).
</p>
<h2 class="mw-headline" id="CDF_user_management">CDF user management</h2>
<p>The CDF Management Portal has user management for its “Provider” tenant.
</p><p>There are two users “admin” and “suite_admin”.
</p>
<!-- 
NewPP limit report
Cached time: 20200217095511
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.040 seconds
Real time usage: 0.140 seconds
Preprocessor visited node count: 57/1000000
Preprocessor generated node count: 142/1000000
Post‐expand include size: 18047/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 425/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key docops_wiki:pcache:idhash:875852-0!canonical and timestamp 20200217095511 and revision id 1586216
 -->
</div>