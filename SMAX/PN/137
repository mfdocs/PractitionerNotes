<html><!--StartFragment-->
<div style="direction:ltr;border-width:100%">
<div style="direction:ltr;margin-top:0in;margin-left:0in;width:7.7715in">
<div style="direction:ltr;margin-top:0in;margin-left:0in;width:7.7715in"><!--StartFragment-->
<p style="margin:0in;margin-left:.375in;font-family:Calibri;font-size:11.0pt;
color:black">After SMA is installed, you may need to switch SMA to a new NFS server for some reasons. For example,<span style="mso-spacerun:yes">&nbsp; </span>the existing NFS server requires maintenance, is not stable, or has performance issues.</p>

<p style="margin:0in;margin-left:.375in;font-family:Calibri;font-size:11.0pt;
color:black">The following describes the process of switching SMA from one NFS server to another.</p>

<p style="margin:0in;margin-left:.375in;font-family:Calibri;font-size:11.0pt;
color:black"><span style="font-weight:bold">Note: during this process, SMA will experience downtime. For this reason, perform this operation only in a scheduled<span style="mso-spacerun:yes">&nbsp; </span>maintenance window.<br>
Note: Only support on-premise customer.</span></p>

<p style="margin:0in;margin-left:.375in;font-family:MetricHPE;font-size:16.0pt;
color:black"></p>

<ol style="margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in;font-family:Calibri;font-size:11.0pt;
 font-weight:normal;font-style:normal" type="1">
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;
     color:black" value="1"><span style="font-family:Calibri;font-size:11.0pt;font-weight:
     normal;font-style:normal;font-family:Calibri;font-size:11.0pt">Stop SMA and CDF first.</span></li>
</ol>

<ol style="margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in;font-family:Calibri;font-size:13.5pt;
 font-weight:normal;font-style:normal" type="1">
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;
     color:black" value="2"><span style="font-family:MetricHPE;font-size:13.5pt;
     font-weight:normal;font-style:normal;font-family:MetricHPE;font-size:13.5pt">Run the following script on one master node.</span></li>
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span style="font-family:MetricHPE;font-size:13.5pt">Check that all PVs are set up correctly, go to </span><span lang="en-US" style="font-family:Calibri;font-size:11.0pt">/tmp/</span><span lang="zh-CN" style="font-style:italic;
     font-family:Calibri;font-size:11.0pt">Persistentvolume/</span><span lang="zh-CN" style="font-family:Calibri;font-size:11.0pt">pv/{namespace}/new and check content.</span></li>
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span lang="en-US" style="font-family:MetricHPE;font-size:13.5pt;color:black">and then restart the Kubernetes cluster as described in </span><a href="https://docs.microfocus.com/itom/SMAX:2020.02/RestartSMASuite">https://docs.microfocus.com/itom/SMAX:2020.02/RestartSMASuite</a><span lang="zh-CN" style="font-family:Calibri;font-size:11.0pt;color:black">.</span></li>
</ol>

<p style="margin:0in;margin-left:.375in;font-family:MetricHPE;font-size:13.5pt;
color:black"></p>

<p style="margin:0in;margin-left:.375in;font-family:MetricHPE;font-size:13.5pt;
color:black">The script will perform the following operations:</p>

<ul style="margin-left:.75in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in" type="disc">
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span lang="en-US" style="font-family:Calibri;font-size:11.0pt">Back up the current PV for the Kubernetes cluster in the /tmp/</span><span lang="zh-CN" style="font-style:italic;font-family:Calibri;font-size:11.0pt">Persistentvolume/</span><span lang="zh-CN" style="font-family:Calibri;font-size:11.0pt">pv/{namespace}old folder</span></li>
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span lang="en-US" style="font-family:Calibri;font-size:11.0pt">Create a new PV yaml file in the new folder /tmp/</span><span lang="zh-CN" style="font-style:italic;
     font-family:Calibri;font-size:11.0pt">Persistentvolume/</span><span lang="zh-CN" style="font-family:Calibri;font-size:11.0pt">pv/{namespace}/new</span></li>
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span lang="en-US" style="font-family:Calibri;font-size:11.0pt">Back up the current PVC for the Kubernetes cluster in the /tmp/</span><span lang="zh-CN" style="font-style:italic;font-family:Calibri;font-size:11.0pt">Persistentvolume/</span><span lang="zh-CN" style="font-family:Calibri;font-size:11.0pt">pvc/{namespace}/old folder</span></li>
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span lang="en-US" style="font-family:Calibri;font-size:11.0pt">Create a new PVC yaml file in the new folder /tmp/</span><span lang="zh-CN" style="font-style:italic;
     font-family:Calibri;font-size:11.0pt">Persistentvolume/</span><span lang="zh-CN" style="font-family:Calibri;font-size:11.0pt">pvc/{namespace}/new</span></li>
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span style="font-family:Calibri;font-size:11.0pt">Create a new PVC with the updated PVC yaml.</span></li>
	<li style="margin-top:0;margin-bottom:0;vertical-align:middle;color:black"><span style="font-family:Calibri;font-size:11.0pt">Create a new PV with the updated PV yaml</span></li>
</ul>

<pre><code>################ Script Begin&nbsp;################&nbsp;

#!/bin/bash
# This script is used to change PV IP address (keep path) for an installed SMAX
# This script will:
# * Backup current PV for Kubernetes cluster under /tmp/Persistentvolume/pv/{namespace}/old folder
# * Create new PV yaml file in the new folder /tmp/Persistentvolume/pv/{namespace}/new
# * Backup current PVC for Kubernetes cluster under /tmp/Persistentvolume/pvc/{namespace}/old folder
# * Create new PVC yaml file in the new folder /tmp/Persistentvolume/pvc/{namespace}/new
# * Create new PVC with updated PVC yaml.
# * Create new PV with updated PV yaml.

#set -x

if [ $# -lt 2 ]; then
&nbsp; &nbsp; echo "Usage: $0 &lt;old_value&gt; &lt;new_value&gt; &lt;old_value&gt; &lt;new_value&gt;"
&nbsp; &nbsp; exit 1
elif [ $# -eq 2 ]; then
&nbsp; oldpv1=$1
&nbsp; newpv1=$2
elif [ $# -eq 3 ]; then
&nbsp; echo " 3 prameter is not available, Usage: $0 &lt;old_value&gt; &lt;new_value&gt; &lt;old_value&gt; &lt;new_value&gt;"
&nbsp; exit 1
elif [ $# -eq 4 ]; then
&nbsp; oldpv1=$1
&nbsp; newpv1=$2
&nbsp; oldpv2=$3
&nbsp; newpv2=$4
else
&nbsp; echo "prameter number is not available, should be 2 or 4, Usage: $0 &lt;old_value&gt; &lt;new_value&gt; &lt;old_value&gt; &lt;new_value&gt;"
&nbsp; exit 1
fi

oldpv1=`echo $oldpv1 | sed 's/\//XXXXX/g'`
newpv1=`echo $newpv1 | sed 's/\//XXXXX/g'`
oldpv2=`echo $oldpv2 | sed 's/\//XXXXX/g'`
newpv2=`echo $newpv2 | sed 's/\//XXXXX/g'`

file_date=`date "+%Y%m%d%H%M%S"`


if [ -d /tmp/Persistentvolume/pv ]; then
&nbsp; mv /tmp/Persistentvolume/pv /tmp/Persistentvolume/pv.bak.${file_date}
fi
if [ -d /tmp/Persistentvolume/pvc ]; then
&nbsp; mv /tmp/Persistentvolume/pvc /tmp/Persistentvolume/pvc.bak.${file_date}
fi

create_folder(){
mkdir -p /tmp/Persistentvolume/pvc/$ns/old
mkdir -p /tmp/Persistentvolume/pvc/$ns/new
mkdir -p /tmp/Persistentvolume/pv/$ns/old
mkdir -p /tmp/Persistentvolume/pv/$ns/new
}

change_pv() {
&nbsp; file=$1
&nbsp; sed -i '/annotations/d' $file
&nbsp; sed -i '/kubernetes.io/d' $file
&nbsp; sed -i '/creatiofileTimestamp/d' $file
&nbsp; sed -i '/deletionGrfilecePeriodSeconds/d' $file
&nbsp; sed -i '/finalizers/d' $file
&nbsp; sed -i '/selfLink/d' $file
&nbsp; sed -i '/resourceVersion/d' $file
&nbsp; sed -i '/uid/d' $file
&nbsp; sed -i'/status/d' $file
&nbsp; sed -i '/fileessage/d' $file
&nbsp; sed -i '/phase:/d' $file
}

change_pvc() {
&nbsp; file=$1
&nbsp; sed -i '/annotations/d' $file
&nbsp; sed -i '/kubernetes.io/d' $file
&nbsp; sed -i '/creationTimestamp/d' $file
&nbsp; sed -i '/deletionGracePeriodSeconds/d' $file
&nbsp; sed -i '/selfLink/d' $file
&nbsp; sed -i '/resourceVersion/d' $file
&nbsp; sed -i '/finalizers:/d' $file
&nbsp; sed -i '/uid/d' $file
&nbsp; sed -i '/message/d' $file
&nbsp; sed -i '/^status/,/^\phase/{/^status/!{/^\phase/!d}}' &nbsp;$file
&nbsp; sed -i '/status:/d' $file
}

save_pvc() {
&nbsp; for i in `kubectl get pvc -n $ns | grep -v NAME | cut -f1 -d " "`
&nbsp; do
&nbsp; &nbsp; echo "save pvc: $i"
&nbsp; &nbsp; kubectl get pvc $i -n $ns -o yaml &nbsp;&gt; /tmp/Persistentvolume/pvc/$ns/old/${i}_pvc.yaml
&nbsp; &nbsp; kubectl get pvc $i -n $ns -o yaml &gt; /tmp/Persistentvolume/pvc/$ns/new/${i}_pvc.yaml
&nbsp; &nbsp; change_pvc /tmp/Persistentvolume/pvc/$ns/new/${i}_pvc.yaml
&nbsp; done
}

delete_pvc() {
&nbsp; for i in `kubectl get pvc -n $ns | grep -v NAME | cut -f1 -d " "`
&nbsp; do
&nbsp; &nbsp; echo "delete pvc: $i"
&nbsp; &nbsp; kubectl patch pvc $i -n $ns -p '{"metadata":{"finalizers": []}}' --type=merge
&nbsp; &nbsp; kubectl delete pvc $i -n $ns --force --grace-period=0
&nbsp; done
}

save_pv() {
&nbsp; for i in `kubectl get pvc -n $ns | grep -v NAME &nbsp;| awk '{print $3}'`
&nbsp; do
&nbsp; &nbsp; echo "save pv: $i"
&nbsp; &nbsp; kubectl get pv $i -o yaml &nbsp;&gt; /tmp/Persistentvolume/pv/$ns/old/${i}_pv.yaml
&nbsp; &nbsp; kubectl get pv $i -o yaml | sed 's/\//XXXXX/g' &nbsp;&gt; /tmp/Persistentvolume/pv/$ns/new/${i}_pv.yaml
&nbsp; &nbsp; sed -i -e &nbsp;"s/${oldpv1}/${newpv1}/g" /tmp/Persistentvolume/pv/$ns/new/${i}_pv.yaml
&nbsp; &nbsp; sed -i -e &nbsp;"s/${oldpv2}/${newpv2}/g" /tmp/Persistentvolume/pv/$ns/new/${i}_pv.yaml
&nbsp; &nbsp; sed -i -e 's/XXXXX/\//g' /tmp/Persistentvolume/pv/$ns/new/${i}_pv.yaml
&nbsp; &nbsp; change_pvc /tmp/Persistentvolume/pv/$ns/new/${i}_pv.yaml
&nbsp; done
&nbsp; kubectl get pvc -n $ns | grep -v NAME &nbsp;| awk '{print $3}' &gt; /tmp/pv.list
}

delete_pv() {
&nbsp; for i in `cat /tmp/pv.list`
&nbsp; do
&nbsp; &nbsp; echo "delete pv: $i"
&nbsp; &nbsp; kubectl delete pv $i --force --grace-period=0
&nbsp; done
&nbsp; rm -rf /tmp/pv.list
}

create_pv() {
&nbsp; for i in `find /tmp/Persistentvolume/pv/$ns/new -type f`
&nbsp; do
&nbsp; &nbsp; echo "create pv： $i"
&nbsp; &nbsp; kubectl create -f $i
&nbsp; done
}

create_pvc() {
&nbsp; for i in `find /tmp/Persistentvolume/pvc/$ns/new -type f`
&nbsp; do
&nbsp; &nbsp; echo "create pvc： $i"
&nbsp; &nbsp; kubectl create -f $i
&nbsp; done
}

function check_pod(){
pod_name=$1
echo checking pod status for ${pod_name}
number=`kubectl get pods -n $ns -o wide |grep -v controller |grep ${pod_name} | awk -F " *|/" '($3!=$4 || $5!="Running") &amp;&amp; $5!="Completed" {print $0}' |wc -l`
if [ $number -gt 0 ]; then
&nbsp; echo "Error: pod ($pod_name) is running, please make sure SMAX($ns) is stopped first."
&nbsp; exit 1
fi
}

ns=`kubectl get namespace |grep itsma | cut -f1 -d " "`
itsma_ns=`kubectl get namespace |grep itsma | cut -f1 -d " "`
create_folder
check_pod rabbitmq
check_pod platform
check_pod idm
save_pv
save_pvc
delete_pvc
delete_pv
create_pv
create_pvc
ns=core
create_folder
save_pv
save_pvc
delete_pvc
delete_pv
create_pv
create_pvc

################ Script End&nbsp;################&nbsp;</code></pre>
</div>
</div>
</div>
<!--EndFragment--></html>