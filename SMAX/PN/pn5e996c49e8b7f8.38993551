<html><h2>Introduction</h2>

<p>The SMA Update Patch Manager is used to conduct a precheck of your environment for&nbsp;potential problems and resolve the problems before upgrade, to&nbsp;ensure a smooth suite upgrade process. The following table describes these potential problems and how the tool resolves them.&nbsp;</p>

<p>This tool contains three images, which you need to push to your own registry.&nbsp;</p>

<table>
	<tbody>
		<tr>
			<th>Issue name</th>
			<th>Problem description</th>
			<th>Phase</th>
			<th>Trigger condition</th>
			<th>Solution</th>
			<th>Applicable target version</th>
		</tr>
		<tr>
			<td><strong>fix-cdf-deployment-status-and-version</strong></td>
			<td>The suite upgrade is successful, but the upgrade wizard fails to call back the CDF API to update the suite deployment status and version information in the CDF Management Portal.</td>
			<td>Before upgrade</td>
			<td>
			<ul>
				<li>cdf_suite_status = installing/updating</li>
				<li>itom_install_phase = running</li>
			</ul>
			</td>
			<td>
			<ol>
				<li>Update cdf_suite_version with&nbsp; itom_suite_version</li>
				<li>Update cdf_suite_status&nbsp; to install_finished</li>
			</ol>
			</td>
			<td>
			<ul>
				<li>2018.08</li>
				<li>2019.02</li>
				<li>2019.05</li>
				<li>2019.08</li>
			</ul>
			</td>
		</tr>
		<tr>
			<td><strong>fix-wrong-fqdn-of-smax-upgrade</strong></td>
			<td>The suite-upgrade pod gets the wrong FQDN name from CDF. This may happen when you have changed the FQDN of the system.</td>
			<td>Before upgrade</td>
			<td>
			<ul>
				<li>The suite-upgrade pod's FQDN and the suite system's&nbsp;FQDN are&nbsp;different</li>
				<li>The suite-upgrade pod is starting or running</li>
			</ul>
			</td>
			<td>
			<ol>
				<li>Update the configmap value with&nbsp;the correct FQDN</li>
				<li>Restart the suite-upgrade pod</li>
			</ol>
			</td>
			<td>
			<ul>
				<li>2018.08</li>
				<li>2019.02</li>
				<li>2019.05</li>
				<li>2019.08</li>
			</ul>
			</td>
		</tr>
		<tr>
			<td><strong>fix-itom-bo-ats-deployment-failed</strong></td>
			<td>The itom-bo-dependcy check fails, because the <strong>bo-ats</strong> database did not get upgraded</td>
			<td>Before upgrade</td>
			<td>In the itom-bo-configmap configmap, DB_SCHEMA_CHECK is false.</td>
			<td>In itom-bo-configmap, update DB_SCHEMA_CHECK to true.</td>
			<td>
			<ul>
				<li>2018.08</li>
				<li>2019.02</li>
				<li>2019.05</li>
				<li>2019.08</li>
			</ul>
			</td>
		</tr>
		<tr>
			<td><strong>fix-itom-xruntime-upgrade-tenants-failed</strong></td>
			<td>
			<p>One or more of the following:</p>

			<ul>
				<li>API call is maded with the external access host FQDN</li>
				<li>Special characters are found&nbsp;in user passwords</li>
				<li>Pod always returns a Success, even the tenant content upgrade has failed</li>
			</ul>
			</td>
			<td>During upgrade</td>
			<td>itom-xruntime-upgrade-tenants&nbsp;is running</td>
			<td>
			<ol>
				<li>Publish an image with the Update Patch Manager</li>
				<li>Document how to push the image to the registry</li>
				<li>Retag the image when tenant content upgrade starts running</li>
			</ol>
			</td>
			<td>
			<ul>
				<li>2018.08</li>
				<li>2019.02</li>
				<li>2019.05</li>
				<li>2019.08</li>
			</ul>
			</td>
		</tr>
	</tbody>
</table>

<h2>When to use this tool</h2>

<p>After the CDF upgrade, and&nbsp;before the suite upgrade.&nbsp;</p>

<h2>How to use this tool</h2>

<p>Once the CDF upgrade is completed, run this tool on a master node (non-BYOK) or the bastion node (BYOK).</p>

<h3>Upload the images from the tool to your registry</h3>

<ol>
	<li>Create a new directory such as /tmp/patch-manager/ on the master node or the bastion node.</li>
	<li>Download the Update Patch Manager packages (esm-update-patch-manager-executor-2020.05-xxx.tar.gz and esm-update-patch-manager-contents-2020.05-xxx.tar.gz from the Micro Focus ITOM Marketplace, and copy them to the directory you created.</li>
	<li>Uncompress the two files:
	<pre>tar xvlf esm-update-patch-manager-executor-2020.05-xxx.tar.gz
tar xvlf esm-update-patch-manager-contents-2020.05-xxx.tar.gz
</pre>
	</li>
	<li>Load new images to docker:
	<pre>cd esm-update-patch-manager-executor/
docker load -i itom-esm-update-patch-manager-executor-2020.05-xxx.tar.gz
cd esm-update-patch-manager-contents
docker load -i itom-esm-update-patch-manager-treatment-case-2020.05-xxx.tar.gz
docker load -i itom-itsmax-upgradetenant-2020.05-xxx.tar.gz
</pre>
	The commands return the tags of the images. The following is an example:

	<pre>[root@susie esm-update-patch-manager]# docker load -i itom-esm-update-patch-manager-executor-2020.05-xxx.tar.gz
Loaded image: localhost:5000/hpeswitom/itom-esm-update-patch-manager-executor:PR-53
[root@susie esm-update-patch-manager]# docker load -i itom-esm-update-patch-manager-treatment-case-2020.05-xxx.tar.gz
Loaded image: localhost:5000/hpeswitom/itom-esm-update-patch-manager-treatment-case:PR-53
[root@susie target]# docker load -i itom-itsmax-upgradetenant-2020.05-xxx.tar.gz
Loaded image: localhost:5000/hpeswitom/itom-itsmax-upgradetenant:4.5.1.2728-2540
</pre>
	In this example, the image tags are: PR-53, PR-53, and 4.5.1.2728-2540.</li>
	<li>Retag the images:
	<pre>suiteRegistry=$( kubectl get cm base-configmap -n core -o json | jq .data.SUITE_REGISTRY )
registryOrgname=$( kubectl get cm base-configmap -n core -o json | jq .data.REGISTRY_ORGNAME )
docker tag  localhost:5000/hpeswitom/itom-esm-update-patch-manager-executor:{tag} ${suiteRegistry}/${registryOrgname}/itom-esm-update-patch-manager-executor:{tag}
docker tag  localhost:5000/hpeswitom/itom-esm-update-patch-manager-treatment-case:{tag}  ${suiteRegistry}/${registryOrgname}/itom-esm-update-patch-manager-treatment-case:{tag}
docker tag  localhost:5000/hpeswitom/ itom-itsmax-upgradetenant:{tag} ${suiteRegistry}/${registryOrgname}/ itom-itsmax-upgradetenant:{tag}
</pre>
	Where: {tag} in each line should be replaced with the corresponding tag that you obtained in the previous step.</li>
	<li>Push the new images to your registry:
	<pre>docker push  ${suiteRegistry}/${registryOrgname}/itom-esm-update-patch-manager-executor:{tag}
docker push ${suiteRegistry}/${registryOrgname}/itom-esm-update-patch-manager-treatment-case:{tag} 
docker push ${suiteRegistry}/${registryOrgname}/ itom-itsmax-upgradetenant:{tag}
</pre>
	Where: {tag} in each line should be replaced with the corresponding tag that you obtained previously.</li>
</ol>

<h3>Run the tool</h3>

<ol>
	<li>Run the following commands to start the esm-update-patch-manager pod:
	<pre>cd esm-update-patch-manager-contents
chmod 700 apply_yaml.sh
./apply_yaml.sh
ns=$( kubectl get ns  |grep itsma |awk '{print $1}' )
</pre>
	</li>
	<li>Wait until the esm-update-patch-manager pod is up and running:
	<pre>kubectl get pods -n ${ns}|grep esm</pre>
	For example:

	<pre>itom-esm-update-patch-manager-job-hnfqj              1/1     Running           0          3m8s </pre>
	</li>
	<li>Apply the patch:
	<pre>podName=$( kubectl get pods -n ${ns} |grep esm-update-patch-manager |awk '{print $1}' )
kubectl exec -it ${podName} -n ${ns} /bin/bash
cd /app/
nohup ./patchStarter.sh -v [targetVersion] &gt; /var/log/itom-esm-update-patch-manager/nohup.log 2&gt;&amp;1 &amp;
</pre>
	Where: [targetVersion] is the target version. For example, if you are upgrading to version 2018.08, replace it with 2018.08.</li>
	<li>Launch the suite upgrade process by following the instructions in&nbsp;the "Upgrade the suite" topic,&nbsp;&nbsp;and pause when you reach the Precheck step.&nbsp;</li>
	<li>Go to the NFS server, and check the &lt;global-volume&gt;/logs/itom-esm-update-patch-manager/patchStarter-YYYYMMDD.log file, to&nbsp;make sure that the file contains "isReadytoUpdate."</li>
	<li>Go back to the upgrade wizard and resume the suite upgrade process from the precheck step, to finish the upgrade process.</li>
</ol>
</html>