<html><div>
<div>
<div class="Admonition_Tip"><span class="autonumber">Request Flows</span>
<div>
<div>
<p><br>
At this point, we have created a functional request management process and have a good start on the complete data model we defined earlier. While we still have a good bit of definition to do, we now have a fairly robust system capable of serving our service request needs.</p>

<p>To expand on what we have built, we will now inspect the actual processes the system uses to fulfill a user request.<br>
&nbsp;</p>

<div>
<div><img alt="Request Data Model.gif" src="/mediawiki/images/9/99/Request_Data_Model.gif" style="height:1003px; width:965px"></div>
</div>
</div>
</div>
</div>
</div>

<p></p>

<h2>Request Management Workflows</h2>

<p>Now that we have set up our request management process components, I thought it would be a good idea to take a step back and see how the process flows from beginning to end. We know the basics of what a request is, right? Someone who consumes one of our services is either:</p>

<ul>
	<li>requesting something we have pre-defined in our service catalog</li>
	<li>requesting something we don’t have defined, but still related to one of our services</li>
	<li>requesting help with an issue that is causing them to not be able to consume the service</li>
	<li>requesting a service we are not providing at this time</li>
	<li>requesting something from HR</li>
	<li>requesting multiple items at the same time</li>
</ul>

<p>Service Management Automation X has a few different workflows defined for requests that handle these possibilities. A workflow is the system’s definition of how a certain process will run. The three primary request workflows in the system are: “IT Service”, “IT Support”, “HR Support”, and “cart”. Don’t let the names confuse you, these are all workflows that deal with our service requests (or just ‘requests’ for short).</p>

<p>The first workflow handles those pre-defined requests, while the second deals with a more unstructured request such as:</p>

<ul>
	<li>Requests for Information that need to be researched or looked up in the knowledge base (if the end user could not find the information on their own).</li>
	<li>Complaints about a particular service or service component.</li>
	<li>Reports around degradation of service that may or may not be caused by something in our environment</li>
</ul>

<p>The third workflow handles requests specific to HR. This allows us to have a specialized process (including approvals) for the HR department.</p>

<p>The final workflow handles the situation where we allow our end users to create a ‘shopping cart’ that contains multiple selections from our service catalog. When this happens the system creates each specific item as either an “IT Service”, “IT Support”, or “HR Support” request, and also creates an additional “Cart” request to handle the overall approvals and provide a single point of entry and communication with the end user.</p>

<p></p>

<h2>Service Workflow</h2>

<p><img alt="5.4-ServiceWorkflow.png" src="/mediawiki/images/2/26/5.4-ServiceWorkflow.png" style="height:433px; width:1083px"></p>

<p>As you can see in the above image, the 'IT Service' workflow for request consists of discrete phases ('Log', 'Approve', etc.) that take place within higher level steps (such as 'Classification' or 'Approval'). An important point to keep in mind is that the end user will have visibility into what step in the process their request is in, but only the agents can see the full workflow of a request (including the current phase and past phases). An end user will only see the current step and where that lies in the order of all steps for the current process as seen in the image below.</p>

<p><img alt="5.5-currentPhase.png" src="/mediawiki/images/0/0c/5.5-currentPhase.png" style="height:196px; width:686px"></p>

<h3>Classification</h3>

<p>The only phase of the 'Classification' step is the 'Log' phase. In this phase, either the end user or an agent determines what the end user is requesting and enters that into the request. If the end user selects a 'Service' type offering, then the request will use the 'IT Service' workflow.</p>

<p>In the 'Log' phase the agent must enter a title and description for the request, specify who is making the request (and who it is for if that's a different person), and add the information on how many people the request will impact and how urgent it is (the system uses these last two fields to determine the overall priority of the request).</p>

<p>To move the request into the next phase, the agent must assign the request either an owner or a responsible group. This is where the finger-pointing really begins! Just kidding, but it is important to get the request to the right people as quickly as possible. Remind me to tell you about some cool functionality we can add using business rules to do this automatically, but we’ll have to get back to that later.</p>

<p>Once the request has its ownership, it will move into the next phase. This will be the 'Approve' phase if the related offering has approvals defined, or straight into the 'Fulfill' phase if it does not. The only other possible transition is to the 'Abandon' phase, which will only happen if an agent manually moves it there (which ends the request life-cycle).</p>

<p>While this might seem like a lot of information for the agent to handle just to get the process started, remember that the system fills most if not all of this information automatically based on the selected offering. This is why pre-defining the offerings ahead of time is so important. It can reduce the manual effort of our service desk agents during this phase of the request process, and like me, they would like the required effort to be as little as possible.</p>

<p>Defining a title and impact/urgency information for a password reset request, for example, is straightforward since it is always the same every time it is performed. Assigning a request like this to a specific group may not be as straightforward, however, we’ll go over a great feature Service Management Automation X has to help with this later, for now, we can just imagine that we could assign a specific group to an offering.</p>

<p>If we define the offering with all of this information correctly, when an end user requests it from the Service Management Automation Service Portal the system will correctly prioritize and assign the request automatically, and then move to the next phase ('Approve' or 'Fulfill') with no input needed from our agents.</p>

<h3>Approval</h3>

<p>The 'Approval' step and the associated 'Approve' phase should be self-explanatory. At this point in the request, any needed approvals take place (and I have my over-sized “DENIED” stamp ready). If the proper people approve the request, it will move into the 'Fulfill' phase, and if not it will move to 'Done' (and the end user will receive a notification that this happened).</p>

<p>Our agents can see what approvals are necessary and even which ones have already been approved or denied directly from the Request. If they have the right role (remember those?) they can even change who needs to give their thumbs up for a particular approval.</p>

<p><img alt="5.6-Approval.png" src="/mediawiki/images/d/d5/5.6-Approval.png" style="height:603px; width:562px"></p>

<p>Notice how we can control the logic regarding what approvals the request requires and the order of those approvals. In this example, the system will not process the 'Financial approval' will until someone approves the 'Manager approve' task.</p>

<p>Another nice thing we can do is allow our Agents to manually add approvals to the process from the request itself. If they have the right role (that we defined earlier, remember) they can click to add new approval requirements to the request, then add the person or group to that new approval.</p>

<h3>Fulfillment</h3>

<p>'Fulfillment' is where the work to fulfill the request is done (shocking, I know). With the 'IT Service' workflow, agents accomplish this by working on tasks that&nbsp;defined in the associated offering and/or any&nbsp;manually created tasks. During the fulfillment step, groups may pass the request back and forth. However, it will always be the responsibility of the owning service desk group to ensure that the request gets completed.</p>

<p>The owner of the request can view the overall task plan directly from the request to see what tasks are in progress, which are upcoming, and any that might have been unnecessary.</p>

<p><img alt="5.7-FulfillPlan.png" src="/mediawiki/images/5/55/5.7-FulfillPlan.png" style="height:892px; width:665px"></p>

<p>When an agent (or the system) assigns a task to a person, they get an email notification and can also use the tasks list inside of Service Management Automation X to see all the tasks assigned to them.</p>

<p>The system can handle some of these tasks automatically (such as the 'Reserve PC' task in the above example) and may never need a person to work on them at all. We can use business rules to fill in information or even call an external tool to do the work in another system. Service Management Automation X even has a great built-in integration to Micro Focus’s Operation Orchestration product, which we can use to coordinate work between multiple external systems.</p>

<p>Once all the tasks have been completed, the Agent simply needs to fill in the solution (a summary of what was done to fulfill the request) and enter a completion code (which describes how the solution fulfilled the problem: 'Resolved with workaround', 'Request denied', etc.) and the system will move the request into the 'Validation step'. For these type of requests, we could even use automated tasks in the task plan to set a solution and completion code if all other tasks complete successfully.</p>

<p>One other possibility I should point out is what happens if the end user no longer needs the Request to be fulfilled after it has been opened. In this case, the agent can abandon the request, which ends the request process without finishing the requested work.</p>

<h3>Validation</h3>

<p>Now that we’ve finished the work associated with the request, are we done? Well, not quite. The result of the request process is to ensure that the resolution satisfies the end user. It's up to the end user to decide if we got things right. That leads us to the 'Validation' step of the request.</p>

<p>Upon entering the 'Validation' phase, the system places the request into the 'Accept' phase. When this happens, the end user receives an email notifying them of the resolution and asking them for their feedback.</p>

<p><img alt="5.8-SolutionEmail.png" src="/mediawiki/images/2/2e/5.8-SolutionEmail.png" style="height:379px; width:577px"></p>

<p>If the end user selects the 'Accept' button, the system closes the request and completes the process.</p>

<p>If we didn't completely solve their issue, or they want to give feedback on the process, they use the 'Add comments' button. This brings up the original request and allows them to leave whatever comments they wish. After they leave their comments, the request automatically enters the 'Review' phase. Now it is up to the responsible agent to review the user’s comments and decide if they can close the request or need to move it back to the 'Fulfillment' step.</p>

<p></p>

<h2>Support Workflow</h2>

<p>Not every end user request will fit into our pre-defined service catalog. Sometime people will enter requests because they are having an issue with a service we provide. To handle these types of requests, we use support requests.</p>

<p><img alt="6.1 - SupportWorkflow.png" src="/mediawiki/images/1/14/6.1_-_SupportWorkflow.png" style="height:542px; width:1186px"></p>

<p>Support requests are similar to service requests, but let’s take a look at each step of the process and look at the differences.</p>

<p></p>

<h3>Classification</h3>

<p>While both workflows start with the ‘Log’ phase, the ‘Support request’ workflow adds a second phase to the ‘Classification’ step. In the ‘Classify’ phase, the service desk agent can enter additional information about the end user’s issue and set other information such as the service they are having an issue with and an initial category for the request. At this point, the agent must also assign the request to either a group or an agent.</p>

<h3>Approval</h3>

<p>Support requests have no pre-defined approvals, so the workflow skips this step.</p>

<h3>Fulfillment</h3>

<p>Instead of a single fulfillment phase, the support request has the ‘First level support’ and ‘Escalate’ phases.</p>

<p>The ‘First level support’ phase is where the actual work starts, and our agents often complete many requests in this phase. Just like service requests, the work can perform the work directly in the request or in tasks assigned to multiple people in parallel.</p>

<p>The primary difference in the workflows is the ability to escalate a support request (into the ‘Escalate’ phase, of course). An agent works an escalated support case in the same way, however, the system sends out additional notifications during the process. For example, an escalated request might send notifications to the owner of the affected service.</p>

<h3>Validation</h3>

<p>The ‘Validation’ step is identical between both workflows. The end user is emailed to determine whether or not the request was completed successfully.</p>

<p></p>

<h2>HR Support Workflow</h2>

<p>Not everyone calls the Service Desk with an IT related question. Over time, we have seen more and more requests coming in for services provided by Human Resources. Luckily, Service Management Automation X’s request module has a process that caters exclusively to these types of requests. This allows our organization to integrate its HR operations as a part of request management, benefiting from a familiar data structure, workflow, reports, and so on.</p>

<p><img alt="HRSupport workflow.png" src="/mediawiki/images/2/29/HRSupport_workflow.png" style="height:415px; width:1052px"></p>

<p>We can configure and manage our HR support requests separately from IT Service Catalog processes and streamline processes that do not require approval or validation.</p>

<p></p>

<h3>Classification</h3>

<p>HR support workflow provides both the 'Log' and 'Classify' phases, which operate similarly to the same phases in the support workflow. In these phases, the service desk agent ensures that the request is entered correctly, and assigns it to an agent or a group.</p>

<h3>Fulfillment</h3>

<p>In the 'Process' phase, the assigned agent performs the actions needed to complete the Request. This often involves specific tasks associated with the request, which may be handled by a different agent (or HR representative in this case). Once they complete the actions, the agent provides a solution and completion code and closes the Request.</p>

<h3>Validation</h3>

<p>The 'Validation' step is the same as the other request workflows. The end user is emailed to determine whether the Request was completed successfully.</p>

<p><br>
If that wasn’t detailed enough for you, check out the full descriptions of the <a href="./itom/SMAX:2020.02/srmWflw">service request workflows</a> online.</p>

<p></p>

<h2>Cart Workflow</h2>

<p>The Request module has a special workflow for shopping cart requests. For these requests, SMAX creates a single request that handles the overall approval, and then a separate request for each item added to the cart. The first request uses the cart workflow.</p>

<p><img alt="cart request workfow.png" src="/mediawiki/images/a/ac/cart_request_workfow.png" style="height:292px; width:823px"></p>

<p>Until the first request reaches the 'Close phase, all child requests will remain in their own 'Log' phase.</p>

<p></p>

<h3>Classification</h3>

<p>The system processes the 'Log' phase with no input from the agent. Its only function is to determine if there are any needed approvals or not. If there are, the request proceeds to the 'Approval' step. If not, it processes to the 'Done' step.</p>

<h3>Approval</h3>

<p>In the 'Approve' phase, the system processes all necessary approvals. This works identically to the 'Approval' step in a service workflow.</p>

<p>Once the cart request is completed, the child requests may be processed.</p>

<p></p>

<h2>Service Level Targets</h2>

<p>One thing regarding the request workflow I want to mention is the service level targets the system calculates for the request. These targets measure the time it takes between certain steps in the process (the most important being the time between the Request being created and resolved).</p>

<p>Service level targets are defined by the service level management process, which we will cover later. For now, it is enough to know the target times for the request are determined by a combination of:</p>

<ul>
	<li>The service specified in the request</li>
	<li>The priority of the request (which is calculated by the specified urgency and impact)</li>
</ul>

<p>This results in the high priority requests having a shorter target time than those of low priority. Here’s a useful tip: sorting a list of requests by the next target time gives an agent a great idea of what order they should tackle them in.</p>
<!-- 
NewPP limit report
Cached time: 20200216212413
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.032 seconds
Real time usage: 0.184 seconds
Preprocessor visited node count: 31/1000000
Preprocessor generated node count: 72/1000000
Post‐expand include size: 16434/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
--><!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
--><!-- Saved in parser cache with key docops_wiki:pcache:idhash:875785-0!canonical and timestamp 20200216212413 and revision id 1577545
 --></div>
</html>