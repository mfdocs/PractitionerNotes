<html><div class="mw-parser-output">
<p></p>

<h2 class="mw-headline" id="Introduction">Introduction</h2>

<p>Service Management Automation X includes multiple <a class="extiw" href="https://en.wikipedia.org/wiki/Representational_state_transfer" title="wikipedia:Representational state transfer">REST</a> APIs that may be used to execute a variety of commands. This document describes using the Postman client to access the EMS REST API. EMS stands for Entity Management System, and is used to access and modify information for most record types in SMA-X, such as incidents, requests, services, and configuration items.</p>

<p>Before using the information in this chapter it will be necessary to review the information found in the ‘Configuring and Using the Postman REST Client’ chapter of this guide. This chapter explains how to install the Postman client as well as how to find the master node and tenant Id for a specific Service Management Automation X instance.</p>

<p>This chapter will cover:</p>

<ul>
	<li>Understanding the data structure of the API</li>
	<li>Determining the entity type and field names</li>
	<li>Handling specific field types</li>
	<li>Special considerations of the EMS API</li>
	<li>Retrieving information from Service Management Automation X</li>
	<li>Posting information to Service Management Automation X</li>
	<li>Determining entity type and field names</li>
</ul>

<h2 class="mw-headline" id="Understanding_the_data_structure_of_the_API">Understanding the data structure of the API</h2>

<p>The Service Management Automation X EMS REST API uses the JSON data format to exchange data with a client. Information on the JSON format may be found <a class="external text" href="https://en.wikipedia.org/wiki/JSON" rel="nofollow" target="1">here</a>.</p>

<p>If your intent is to use a tool such as Microsoft Excel to view the information returned from the REST API, you will need to convert the data returned from Service Management Automation X using some type of scripting or other data conversion process. There are a variety of conversion tools on the web that will transform JSON into CSV (or vice versa). You could use one of these tools to convert information in a spreadsheet to the JSON format required by the Service Management Automation X REST API.</p>

<p>An example of the JSON returned from the Service Management Automation X EMS REST API can be seen in the image below (please note that the image does not show the entire result returned by the API). The returned result is made up of multiple entities (records) from Service Management Automation X. In each returned record, the <b>entity_type</b> value specifies the type of record (in this example each entity is a ‘Request’). The <b>properties</b> section contains the attributes of the entity. The exact attributes returned are dependent on the query used to request the information. Finally, the <b>related_properties</b> shows information from other records that are linked to the requested entity. Again, the information included here is dependent on the initial request.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST Image2.png" data-file-height="309" data-file-width="497" height="309" src="/mediawiki/images/9/94/REST_Image2.png" width="497"></a></p>

<p>When sending (posting) information to Service Management Automation X, the data format needs to be in the same JSON format. The following image is an example of how to create a Request in Service Management Automation X using the EMS REST API. The entity_type needs to be set to the desired record type, and when posting information you must also specify the type of operation (such as CREATE or UPDATE). In this example, we set the <b>operation</b> to ‘CREATE’ in order to create a new request. Attributes for our new Request are set in the <b>properties</b> section. To add more fields to the request, simply add the field name in quotes, a colon, and the value for the field (again in quotes). For example, to set a status you would add ‘Status’, the ‘:’, and the value ‘RequestStatusReady’. Each attribute must be separated with a comma, but there is no comma after the last specified attribute.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST Image3.png" data-file-height="196" data-file-width="472" height="196" src="/mediawiki/images/e/ed/REST_Image3.png" width="472"></a></p>

<h2 class="mw-headline" id="Determining_the_entity_type_and_field_names">Determining the entity type and field names</h2>

<p>All entity types can be updated using the EMS API (as long as you have a role that allows updating that specific entity type). In order to create or modify a specific field in an entity, you must know both the entity type and the field name. This information can be found in the Service Management Automation X interface. Navigate to the ‘Records’ utility (select <b>Administration &gt; Records</b> from the main menu) and find the correct entity type using the field in the top left section of the form. The entity name displayed here is the correct entity type that is used in the REST request.</p>

<p>The field name can be found in the ‘Fields’ tab of the entity definition. It is important to use the value in the “Name” column of the fields list and not the ‘Multilingual label’ column.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST Image4.png" data-file-height="346" data-file-width="744" height="346" src="/mediawiki/images/3/3f/REST_Image4.png" width="744"></a></p>

<h2 class="mw-headline" id="Handling_specific_field_types">Handling specific field types</h2>

<p>It is also important to note the logical type of the field in question. There are certain types of fields that need special consideration. These types (and how to use them correctly in the API) are defined below.</p>

<h3 class="mw-headline" id="Enumerations">Enumerations</h3>

<p>If the field in question has a Logical type of ‘ENUM’, which is an enumeration, you must pass the internal name of the enumeration value rather than the display name. To find the name, open the list in the List management interface, which will display both the internal name and display name of each list value. For example, in the list shown in the image below, the status value for ‘Ready’ would be ‘RequestStatusReady’. ￼</p>

<p>The body of a REST request that would update the request with a status of ‘Ready’ is shown in the following image: <a class="image" onclick="javascript:loadingImage(this);"><img alt="ems Image4b.png" data-file-height="569" data-file-width="969" height="569" src="/mediawiki/images/a/a6/ems_Image4b.png" width="969"></a></p>

<h3 class="mw-headline" id="Entity_links">Entity links</h3>

<p>If the field type is an entity_link (a link to a related entity/record) type field you must specify the unique id of the related record in the REST API (rather than any display name or value). Therefore you must determine what the id is and incorporating that value into the REST call. In the example below, the user wants to set the assignment group in a request to ‘Accounting’. To do this the user will first find the id of the accounting group and then set the ‘AssignedToGroup’ field in the request to the Id of the accounting group in the rest payload. The id may be found by viewing the related record directly or viewing a list that includes the related record.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="ems Image7b.png" data-file-height="326" data-file-width="691" height="326" src="/mediawiki/images/8/88/ems_Image7b.png" width="691"></a></p>

<p>Then the id is entered for the ‘AssignedToGroup’ attribute in the body of the REST request.<a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 5.png" data-file-height="328" data-file-width="540" height="328" src="/mediawiki/images/3/3c/REST_5.png" width="540"></a></p>

<h3 id="Date/time"><span class="mw-headline" id="Date.2Ftime">Date/time</span></h3>

<p>If the field is a date or date_time you must specify the value using a <a class="extiw" href="https://en.wikipedia.org/wiki/Unix_time" title="wikipedia:Unix time">Unix timestamp</a>. Most scripting tools are capable of converting user-friendly date/times to Unix timestamps. Additionally, there are a number of online tools that can create these timestamps, including the one found <a class="external text" href="http://www.epochconverter.com/" rel="nofollow" target="1">here</a>. Service Management Automation X requires that you define the timestamp down to the millisecond.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 6.png" data-file-height="300" data-file-width="524" height="300" src="/mediawiki/images/d/d9/REST_6.png" width="524"></a></p>

<h2 class="mw-headline" id="Special_considerations_of_the_EMS_REST_API">Special considerations of the EMS REST API</h2>

<p>The EMS REST API has a few special considerations that must be followed:</p>

<ul>
	<li>A query will fail if the result returns more than 4K records</li>
	<li>Results are returned in batches of 250 records at a time by default, which can be modified using the “size” parameter. Information on the skip parameter below.</li>
	<li>When querying for fields that are entity links, the id of the related record is returned (rather than the display label)</li>
</ul>

<h2 class="mw-headline" id="Retrieving_information_from_Service_Management_Automation_X">Retrieving information from Service Management Automation X</h2>

<p>The EMS API can retrieve any information available to the entity grid (list of records) in the Service Management Automation X user interface. Parameters are available to the REST request that allow you to apply specific Filters to the query, as well as specify which fields should be included in the returned result. Results are returned in the JSON data format, so you may need to use scripting or some data conversion process in order to get the data in the desired format.</p>

<p>The following is an example of a ‘Get’ request that will retrieve results from Service Management Automation X. In the example the Id, DisplayLabel and Priority fields are being returned for request entities.</p>

<p>The request URL is created as follows:</p>

<p><a class="external free" href="https://msast002pngx.domain.com/rest/844143557/ems/Request?layout=Id,DisplayLabel,Priority" rel="nofollow" target="1">https://msast002pngx.domain.com/rest/844143557/ems/Request?layout=Id,DisplayLabel,Priority</a></p>

<p>The URL is created with the following information:</p>

<ul>
	<li>https:// — specifies the protocol to use</li>
	<li>msast002pnqx.domain.com — the domain of the Service Management Automation X server master node which hosts the specific tenant</li>
	<li>rest — specifies the use of the REST API</li>
	<li>844143557 — the tenant ID of the desired Service Management Automation X instance</li>
	<li>ems — specifies the use of the EMS REST API</li>
	<li>Request — The entity type</li>
	<li>?layout=Id,DisplayLabel,Priority — specifies the comma delimited list of fields from the entity that should be included in the response (note that the LastUpdateTime field is always returned)</li>
</ul>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 7.png" data-file-height="527" data-file-width="1060" height="527" src="/mediawiki/images/e/e1/REST_7.png" width="1060"></a></p>

<p>The end of the query result will also return the number of records that matched the query, if the total count is more than 250, the skip command is required to display additional records after the first 250. In the example below the ‘&amp;skip=250’ parameter is added to retrieve the additional records. In cases where you expect more than 250 records to be returned, writing a script or code to process the queries and results is recommended.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST Image11.png" data-file-height="129" data-file-width="242" height="129" src="/mediawiki/images/f/ff/REST_Image11.png" width="242"></a>￼</p>

<p>The URL to skip the first 250 records of the query is: <a class="external free" href="https://msast002pngx.domain.com/rest/844143557/ems/Request?layout=Id,DisplayLabel,Priority&amp;skip=250" rel="nofollow" target="1">https://msast002pngx.domain.com/rest/844143557/ems/Request?layout=Id,DisplayLabel,Priority&amp;skip=250</a></p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 8.png" data-file-height="312" data-file-width="833" height="312" src="/mediawiki/images/5/5a/REST_8.png" width="833"></a></p>

<p><br>
Filtering can be applied to any query sent through the REST API. The filter is specified as a parameter in the REST URL. In the example below, the results will be filtered based on the creation time of the entity using the parameter ‘filter=CreateTime+btw+(1466406000000,1466492399999)’ (note the use of the Unix timestamp).</p>

<p><a class="external free" href="https://msast002pngx.domain.com/rest/844143557/ems/Request?filter=CreateTime+btw+(1466406000000,1466492399999)&amp;layout=Id,DisplayLabel,Priority" rel="nofollow" target="1">https://msast002pngx.domain.com/rest/844143557/ems/Request?filter=CreateTime+btw+(1466406000000,1466492399999)&amp;layout=Id,DisplayLabel,Priority</a></p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 9.png" data-file-height="609" data-file-width="1170" height="609" src="/mediawiki/images/b/b7/REST_9.png" width="1170"></a></p>

<h2 class="mw-headline" id="Posting_information_to_Service_Management_Automation_X">Posting information to Service Management Automation X</h2>

<p>Any type of standard entity can be created or updated in Service Management Automation X using the EMS REST API. The URL to post data for all entity types is https://&lt;master node&gt;/rest/&lt;tenantid&gt;/ems/bulk. The type of entity being sent is defined in the entity_type field. In the example below a request will be created.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 10.png" data-file-height="292" data-file-width="852" height="292" src="/mediawiki/images/e/e9/REST_10.png" width="852"></a></p>

<p>To create an Incident the following payload would be used:</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 11.png" data-file-height="306" data-file-width="754" height="306" src="/mediawiki/images/f/fc/REST_11.png" width="754"></a></p>

<p>To update an existing record the same process is used, but the Id of the entity is required and the operation would be ‘UPDATE’.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 12.png" data-file-height="374" data-file-width="570" height="374" src="/mediawiki/images/3/3b/REST_12.png" width="570"></a></p>

<p>To update an existing record by adding information to a field that is not currently populated just add the name of the field and value. Also note that multiple entities can be updated at the same time, as shown in the following example.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="REST 13.png" data-file-height="396" data-file-width="506" height="396" src="/mediawiki/images/c/ce/REST_13.png" width="506"></a></p>
<!-- 
NewPP limit report
Cached time: 20200216154641
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.048 seconds
Real time usage: 0.423 seconds
Preprocessor visited node count: 14/1000000
Preprocessor generated node count: 38/1000000
Post‐expand include size: 10978/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
--><!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
--><!-- Saved in parser cache with key docops_wiki:pcache:idhash:875801-0!canonical and timestamp 20200216154641 and revision id 1577564
 --></div>
</html>