<div class="mw-parser-output"><p><br>
</p>
<div id="toc" class="toc"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none"><div class="toctitle" lang="en" dir="ltr"><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#Use_Case"><span class="tocnumber">2</span> <span class="toctext">Use Case</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#Configuration_Steps_-_Summary"><span class="tocnumber">2.1</span> <span class="toctext">Configuration Steps - Summary</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#Configuration_Steps_-_Detail"><span class="tocnumber">2.2</span> <span class="toctext">Configuration Steps - Detail</span></a>
<ul>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#1._Create_an_offering_to_create_contacts"><span class="tocnumber">2.2.1</span> <span class="toctext">1. Create an offering to create contacts</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#2._Create_user_options_to_define_the_fields_to_be_populated"><span class="tocnumber">2.2.2</span> <span class="toctext">2. Create user options to define the fields to be populated</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#3._Create_task_plan_in_the_offering_to_populate_the_new_contact_fields_with_user_options"><span class="tocnumber">2.2.3</span> <span class="toctext">3. Create task plan in the offering to populate the new contact fields with user options</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#4._Assigning_entitlement_rules_to_the_offering"><span class="tocnumber">2.2.4</span> <span class="toctext">4. Assigning entitlement rules to the offering</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#5._Create_an_offering_to_modify_contact.5Cuser_information"><span class="tocnumber">2.2.5</span> <span class="toctext">5. Create an offering to modify contact\user information</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#6._Create_user_options_in_the_offering"><span class="tocnumber">2.2.6</span> <span class="toctext">6. Create user options in the offering</span></a></li>
<li class="toclevel-3"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/SMAX_Config/cg_specific_use_cases/cg_uc_offeringPerson#7._Create_task_plan_in_the_offering_to_update_the_fields"><span class="tocnumber">2.2.7</span> <span class="toctext">7. Create task plan in the offering to update the fields</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>

<h2 class="mw-headline" id="Introduction">Introduction</h2>
<p>In Service Management Automation-X it is not possible for an agent to create or modify person information without the having the tenant admin role. In some cases, system administrators do not want agents to have the tenant admin role but they still want the agent to be able to create or modify a Person. By using offerings it is also possible to allow self-service users themselves to update profile information not otherwise available. Using offerings is an option that would allow a non-tenant admin user to be able to perform these actions. 
</p><p><br>
</p>
<h2 class="mw-headline" id="Use_Case">Use Case</h2>
<p>Company ABC wants to allow agents who do not possess the tenant admin role to be able to create or modify contact information. Company ABC wants self-service users to be able to modify a few fields on their own profiles. Company ABC plans on using two offerings in order to satisfy the requirement. Company ABC will use an audience to limit users who are able to create accounts, while all self-service users can update their own profile information.
</p><p><br>
</p>
<h3 class="mw-headline" id="Configuration_Steps_-_Summary">Configuration Steps - Summary</h3>
<ol><li>Create an offering to create contacts</li>
<li>Create user options to define the fields to be populated</li>
<li>Create a task plan to use the user options to populate the contact information</li>
<li>Assign entitlement rules to the offering.</li>
<li>Create an offering to modify users</li>
<li>Create user options to define the fields to be updated</li>
<li>Create a task plan to use the user options to modify the information</li></ol>
<p><br>
</p>
<h3 class="mw-headline" id="Configuration_Steps_-_Detail">Configuration Steps - Detail</h3>
<h4 class="mw-headline" id="1._Create_an_offering_to_create_contacts">1. Create an offering to create contacts</h4>
<p>In the Service Catalog create a new offering named “Create new Contact.” The offering will be a service offering.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 1.png" src="/mediawiki/images/d/de/offering_person_1.png" width="576" height="560" data-file-width="576" data-file-height="560"></a>
</p>
<h4 class="mw-headline" id="2._Create_user_options_to_define_the_fields_to_be_populated">2. Create user options to define the fields to be populated</h4>
<p>Click on the User options tab of the offering created in the previous step. Create a user option for each of the fields that need to be populated for the contact in the Person record. Note that Service Management Automation-X has several required fields when creating a contact (Name, Email and User principal name). Make sure to check the required attribute when the field is mandatory.<a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 2.png" src="/mediawiki/images/6/66/offering_person_2.png" width="973" height="380" data-file-width="973" data-file-height="380"></a>
</p>
<h4 class="mw-headline" id="3._Create_task_plan_in_the_offering_to_populate_the_new_contact_fields_with_user_options">3. Create task plan in the offering to populate the new contact fields with user options</h4>
<p>Click on the task plan tab, then create a new automated task in the fulfill phase (assuming no approvals are needed).
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 3.png" src="/mediawiki/images/1/1a/offering_person_3.png" width="458" height="275" data-file-width="458" data-file-height="275"></a>
</p><p>Add a business rule to the task that will create a record and set the record type to “Person”.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 4.png" src="/mediawiki/images/9/99/offering_person_4.png" width="409" height="228" data-file-width="409" data-file-height="228"></a><a href="./itom/File:offering_person_5.png" class="image"><img alt="offering person 5.png" src="/mediawiki/images/5/5f/offering_person_5.png" width="424" height="342" data-file-width="424" data-file-height="342"></a>
</p><p>Add the fields in the Person record that need populated (click fx button to add expression) and add the names of the matching user options created in the previous steps. 
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 6.png" src="/mediawiki/images/d/d5/offering_person_6.png" width="508" height="451" data-file-width="508" data-file-height="451"></a>
</p><p>When the request is created, select the offering and populate the fields with the contact details. When the solution and completion code are populated, the Request moves into the fulfill phase and the task plan will run and create the contact. 
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 7.png" src="/mediawiki/images/6/61/offering_person_7.png" width="406" height="393" data-file-width="406" data-file-height="393"></a>
</p><p>** Optionally, if it’s required that no manual intervention should occur when an end user creates a contact, a rule can be added to populate the solution and completion code fields.  When these fields are automatically populated the Request will move straight from the log phase to accept phase after the contact is added. This would be the same for the updated user information offering.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 8.png" src="/mediawiki/images/7/7c/offering_person_8.png" width="532" height="347" data-file-width="532" data-file-height="347"></a>
</p>
<h4 class="mw-headline" id="4._Assigning_entitlement_rules_to_the_offering">4. Assigning entitlement rules to the offering</h4>
<p>The last step of the creation is to use the audience field in the offering to add an entitlement for only those users who are agents. This stops self-service portal users from being able to see the offering. The audience can be assigned based on roles so that only some self-service portal users can see the offerings. A new role name “Contact Creators” would be created and only select users will be added to it.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 9.png" src="/mediawiki/images/9/9d/offering_person_9.png" width="431" height="183" data-file-width="431" data-file-height="183"></a>
</p>
<h4 id="5._Create_an_offering_to_modify_contact\user_information"><span class="mw-headline" id="5._Create_an_offering_to_modify_contact.5Cuser_information">5. Create an offering to modify contact\user information</span></h4>
<p>Create an offering that will allow the agent to modify an existing contact or user. The offering will be a service offering and will use user options and a task plan to do the updates. In this offering, people who are contacts OR users can be updated. A person is only considered a user if they have an account in the System Administration portal and are able to login to Service Management Automation-X.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 10.png" src="/mediawiki/images/8/8e/offering_person_10.png" width="576" height="555" data-file-width="576" data-file-height="555"></a>
</p>
<h4 class="mw-headline" id="6._Create_user_options_in_the_offering">6. Create user options in the offering</h4>
<p>Click on the user options tab and add the user options that will be updated by the request.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 11.png" src="/mediawiki/images/2/20/offering_person_11.png" width="708" height="292" data-file-width="708" data-file-height="292"></a>
</p>
<h4 class="mw-headline" id="7._Create_task_plan_in_the_offering_to_update_the_fields">7. Create task plan in the offering to update the fields</h4>
<p>The System Administration portal runs a sync every night that will update any changes to the Phone Number or Name of users, so these fields shouldn’t be modified. Contacts are not updated by the sync so most fields can be updated. Also note that the UPN field cannot be changed after the contact or user is created. The task plan needs to use a decision to see if the user option has been populated so it does not save an empty value into the person record overwriting what is already there. Once completed the task plan will look similar to the example below. Add the task plan to the fulfill tab (unless an approval is desired).
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 12.png" src="/mediawiki/images/e/e4/offering_person_12.png" width="489" height="637" data-file-width="489" data-file-height="637"></a>
</p><p>Create a new decision for First name, and add the check to see if the user option is populated, the expression is ${entity.UserOptions.FirstName_c!=null}. If the field is populated then it will proceed through the Yes path onto the automated task to populate the field in the person record.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 13.png" src="/mediawiki/images/a/a2/offering_person_13.png" width="339" height="294" data-file-width="339" data-file-height="294"></a>
</p><p>Under the “yes” side of the decision add a new automatic task. Select the “set field on related record rule” type and then set the record type to “Person” with Ids of “entity.RequestForPerson.Id”. The flow of the offering will be that whoever is selected in Requested For Person will be the user who gets the information updated(other person fields could be used).
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 14.png" src="/mediawiki/images/0/08/offering_person_14.png" width="579" height="205" data-file-width="579" data-file-height="205"></a>
</p><p>In the “set” section, add the first field that needs to be updated with the user options created in the previous step. A separate task needs to be added for every field to see if they are empty or not.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 15.png" src="/mediawiki/images/2/2c/offering_person_15.png" width="604" height="221" data-file-width="604" data-file-height="221"></a>
</p><p>Use the “Path to” option to then join the “no” path onto the next field check because no operation is needed when the decisions moves through no.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 16.png" src="/mediawiki/images/2/23/offering_person_16.png" width="402" height="335" data-file-width="402" data-file-height="335"></a>
</p><p>Finish by using the join option to create an end node for the task plan to finish on.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 17.png" src="/mediawiki/images/8/88/offering_person_17.png" width="433" height="298" data-file-width="433" data-file-height="298"></a>
</p><p>Use entitlements to allow self-service users to see the offering when they update the fields their own profiles will be updated. 
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="offering person 18.png" src="/mediawiki/images/e/e8/offering_person_18.png" width="583" height="660" data-file-width="583" data-file-height="660"></a>
</p>
<!-- 
NewPP limit report
Cached time: 20200217083940
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.044 seconds
Real time usage: 0.405 seconds
Preprocessor visited node count: 18/1000000
Preprocessor generated node count: 50/1000000
Post‐expand include size: 7175/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 2/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key docops_wiki:pcache:idhash:875823-0!canonical and timestamp 20200217083940 and revision id 1577594
 -->
</div>