<div>
<div>
<div class="Admonition_Tip"><span class="autonumber">Release</span>
<div>
<div>
<p><br>
Release management allows a release manager to plan, schedule, and control multiple changes and additions to existing services. The release provides a single pane of glass to organize and coordinate many related changes implemented by different people or teams.</p>

<p>The Service Management Automation X release management module:</p>

<ul>
	<li>Helps you create, manage, and deploy releases, and the changes in a release.</li>
	<li>Helps you schedule and track the status of included changes.</li>
	<li>Provides standard methods and procedures.</li>
	<li>Provides release level reporting, with actionable tiles that drill into changes in different release statuses.</li>
</ul>

<p>Release management allows you to create specific tasks and/or approvals for the release. These activities are tied to the release itself and not to the underlying tasks and are useful for specific actions that must be performed either before or after the changes are implemented.</p>

<div>
<div><img alt="Release Data Model.gif" src="/mediawiki/images/c/c1/Release_Data_Model.gif" style="height:704px; width:988px"></div>
</div>
</div>
</div>
</div>
</div>

<p>&nbsp;</p>

<h2>Using Release Management</h2>

<p>Now we have our change management processes under control, and we can handle changing our IT environment. But what happens when we need to make a bunch of changes to the environment at the same time, and those changes are all interconnected? How are we going to coordinate who does what and in what order?</p>

<p>Service Management Automation X provides the release management process for just that purpose. Release management allows us to plan, design, build, configure and test releases in a controlled manner. These releases comprise distinct release components, which are simply changes. Now our release manager has an easy way of keeping their eye on all these changes at once and can manage the entire group of changes as a single entity.</p>

<p>The Release also allows us to do our planning at a higher level, including the definition of specific tasks or approvals that apply to the overall release rather than each unique change. This allows us to add work that needs to be done before and/or after all the specific changes have been implemented.</p>

<p><img alt="ReleaseChanges.png" src="/mediawiki/images/1/18/ReleaseChanges.png" style="height:875px; width:1639px"></p>

<p>Service Management Automation X also provides an option to view all the changes defined in the release using the calendar. From the calendar, the release manager can review and change the planned start and end time of each change — as long as they are contained within the start and end times of the release.</p>

<p><img alt="ReleaseCalendar.png" src="/mediawiki/images/9/9c/ReleaseCalendar.png" style="height:960px; width:1639px"></p>

<p>&nbsp;</p>

<h2>Setting up Release Management</h2>

<p>Again, setting up release management is very similar to setting up the other modules we have addressed so far. Release uses the same record categories we have seen before, so we need to review those and create any additional ones that we might need. We can also review the existing views and reports and add any we might find necessary.</p>

<p>As we should expect by now, there are a few things we need to do that are specific to release management. This includes setting up any necessary release models we might need to best support our current release process.</p>

<p>&nbsp;</p>

<h2>Creating Release Models</h2>

<p>Many of our releases are on a set schedule; every quarter, every month, etc. Release models allow us to create the framework for these releases so we don’t have to re-enter the same information every time. This also includes defining specific tasks that we need to complete during the release life-cycle. Remember, these tasks don't relate to the actual changes that make up the release, but on the overall process of the release itself.</p>

<p><img alt="ReleaseModel1.png" src="/mediawiki/images/0/09/ReleaseModel1.png" style="height:682px; width:1634px"></p>

<p>In addition, we can also define business rules that apply to releases that use a specific model. We can filter the list of possible owners, default field values, ensure that there is sufficient time between the start and end dates, or apply any other type of rule that will only run for this type of release.</p>
<!-- 
NewPP limit report
Cached time: 20200217094256
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.020 seconds
Real time usage: 0.098 seconds
Preprocessor visited node count: 12/1000000
Preprocessor generated node count: 34/1000000
Post‐expand include size: 4070/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
--><!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
--><!-- Saved in parser cache with key docops_wiki:pcache:idhash:875784-0!canonical and timestamp 20200217094256 and revision id 1577544
 --></div>
