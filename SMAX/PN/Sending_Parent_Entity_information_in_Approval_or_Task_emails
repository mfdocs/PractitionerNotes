<div class="f14 metric" style="color:#656668;display:flex;"><img src="/assets/images/calendar.png" style="height:12px;margin-top:auto;margin-bottom:auto;"><span class="updateDate">&nbsp; Updated on 13/03/2019</span> &nbsp;&nbsp;&nbsp;&nbsp; | &nbsp;&nbsp;&nbsp;&nbsp; <img src="/assets/images/updated.png" style="height:12px;margin-top:auto;margin-bottom:auto;"><span class="readTime">&nbsp; 6 minutes to read</span>&nbsp;&nbsp;&nbsp;&nbsp;</div><br><div class="mw-parser-output"><p>Email notifications sent when a task or approval is created often need to include information from the parent request or change. Since change and request share the same notification templates for tasks and approvals, the Service Management Automation X administrator may use a conditional rule to show relevant information for the relevant parent type. Conditional rules are only available in notification templates.
</p><p>In this example, the email notification template used to send email to the task assignee will be updated to include information about the parent request or change. The email notification template (named ‘Send task assigned to person notification’) is located in<b> Records -&gt; Task -&gt; Notifications:</b>
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe notification templates.png" src="/mediawiki/images/5/5b/pe_notification_templates.png" width="176" height="247" data-file-width="176" data-file-height="247"></a>
</p><p>If the parent of the task is a request, the notification should include the phase, name, service, service desk group, and creation date of the request. If the parent of the task is a change, the notification should include the phase, reason for change, risk, change type, change owner, change owning group, service model and the scheduled start and end date of the change.
</p><p>When there are common field names in both the request and change entity only a single entry is needed in the template. The syntax used to access the parent information is<b> ${:entity.parentEntity.fieldName}</b>. The ‘PhaseId’ field is common to both entity types so the syntax added to the email template would be:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe image 2.png" src="/mediawiki/images/9/93/pe_image_2.png" width="672" height="462" data-file-width="672" data-file-height="462"></a>
</p><p>The resulting request (or change) notification would look like:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe request notification.png" src="/mediawiki/images/5/53/pe_request_notification.png" width="329" height="189" data-file-width="329" data-file-height="189"></a>
</p><p>Another approach when there are common field names is to use a conditional rule to allow for different text depending on the parent record type. The conditional rule uses the syntax <b>&lt;%=conditional_statement(boolean expression, text if true, text if false)%&gt;</b>.
</p><p>In the example rule below the condition result of “true” would mean that the parent is a Request and the notification text should be ‘Request is in Phase Fulfill.’ If the parent was a change the condition would return ‘false’, and the notification would use ‘Change is in Phase Evaluate.’ The rules to show fields are added directly in the email template as seen below:
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Request is in Phase ${:entity.parentEntity.PhaseId},Change is in Phase ${:entity.parentEntity.PhaseId})%&gt;</b>
</p><p>In the email notification template this would appear as:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe image 4.png" src="/mediawiki/images/7/7b/pe_image_4.png" width="852" height="506" data-file-width="852" data-file-height="506"></a>
</p><p>If the parent is a request the notification would look like:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe request task note.png" src="/mediawiki/images/8/82/pe_request_task_note.png" width="311" height="182" data-file-width="311" data-file-height="182"></a>
</p><p>A common situation that occurs is that a field is unique to a particular record type. In this case we want the value to be present in the notification if it exists, but if the value does not exist we do not want any value to appear. One example is the ‘ReasonForChange’ field that is unique to change entities. We do not want any mention of this value in a request task notification. In this case the conditional rule only applies if it returns true and we do not include a false action.
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Reason is ${:entity.parentEntity.ReasonForChange})%&gt;</b>
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe image 6.png" src="/mediawiki/images/0/06/pe_image_6.png" width="849" height="505" data-file-width="849" data-file-height="505"></a>
</p><p>Resulting email when the parent is a change:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe change task note.png" src="/mediawiki/images/e/e6/pe_change_task_note.png" width="425" height="223" data-file-width="425" data-file-height="223"></a>
</p><p>For some notifications, a related attribute of a field must also be included in the field expression. For example, to display the ‘Owned by Person’ name, the “.Name” attribute needs to be included in the expression (not just the “entity.ParentEntity.OwnedByPerson” value).
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests Owner is ${:entity.parentEntity.OwnedByPerson.Name})%&gt;</b>
</p><p><br>
For date fields, the ‘format’ DSL must be used to display the date in a user-friendly way.
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Scheduled End is ${:format(entity.parentEntity.ScheduledStartTime, 'short')})%&gt;</b>
</p><p><br>
For the initial use case, the following would be added to the template:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe image 8.png" src="/mediawiki/images/d/de/pe_image_8.png" width="1029" height="657" data-file-width="1029" data-file-height="657"></a>
</p><p>The resulting email from this template for a task on a change would appear as:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe change task 2.png" src="/mediawiki/images/1/13/pe_change_task_2.png" width="280" height="212" data-file-width="280" data-file-height="212"></a>
</p><p>The resulting email from this template for a task on a request would appear as:
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="pe request task 2.png" src="/mediawiki/images/4/4f/pe_request_task_2.png" width="275" height="196" data-file-width="275" data-file-height="196"></a>
</p><p>If the field is empty the value will appear blank. An additional conditional rule may be added to remove the field if it is blank. In the example above changing the expert group condition to check to see if there is a value present would result in it only displaying the result if it is populated.
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType.ExpertGroup!=null},Requests Expert group is ${:entity.parentEntity.ExpertGroup.Name})%&gt;</b>
</p><p><br>
</p><p>Rules in the template include:
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests is in Phase ${:entity.parentEntity.PhaseId}, Change is in Phase ${:entity.parentEntity.PhaseId}})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests was created on ${:format(entity.parentEntity.CreateTime, 'short')})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Scheduled Start is ${:format(entity.parentEntity.ScheduledStartTime, 'short')})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Scheduled End is ${:format(entity.parentEntity.ScheduledStartTime, 'short')})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests Name is ${:entity.parentEntity.DisplayLabel}, Change Name is ${:entity.parentEntity.DisplayLabel})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests Service Desk Group is ${:entity.parentEntity.ServiceDeskGroup.Name})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests Expert group is ${:entity.parentEntity.ExpertGroup.Name})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Risk is ${:entity.parentEntity.RiskAssessment})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Type is ${:entity.parentEntity.ChangeWorkflowType})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests Owner is ${:entity.parentEntity.OwnedByPerson.Name}, Change Owner is ${:entity.parentEntity.OwnedByPerson.Name})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Request Owning group is ${:entity.parentEntity.OwnedByGroup.Name}, Change Owning group is ${:entity.parentEntity.OwnedByGroup.Name})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Request'},Requests Service is ${:entity.parentEntity.RegisteredForActualService.DisplayLabel})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Service is ${:entity.parentEntity.AffectsActualService.DisplayLabel})%&gt;</b>
</p><p><b>&lt;%=conditional_statement(${:entity.ParentEntityType=='Change'},Change Model is ${:entity.parentEntity.BasedOnChangeModel.DisplayLabel})%&gt;</b>
</p><p><br>
</p>
<!-- 
NewPP limit report
Cached time: 20190524103253
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.028 seconds
Real time usage: 0.074 seconds
Preprocessor visited node count: 2/1000000
Preprocessor generated node count: 12/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key docops_wiki:pcache:idhash:746477-0!canonical and timestamp 20190524103253 and revision id 1303227
 -->
</div>