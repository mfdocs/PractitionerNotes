<html>{{#redirect:Dev2Prod}}
<div class="mw-parser-output">
<div class="mw-collapsible-content">
<div class="Admonition_Tip"><span class="autonumber">dev2prod</span>
<div class="mw-collapsible">
<div class="mw-collapsible-content">
<p><br>
Service Management Automation X provides a standard process for moving system configuration changes from a development system to production. This process, named dev2prod, provides a structured procedure designed to minimize risk to the production environment.</p>

<p>We can use an analogy where the system configuration represents the roads that the data configuration changes drive on. We cannot move or change the roads at any time, as that would cause chaos for the drivers. Instead, we have a well-defined process that allows us to create the changes in a separate system and then move them when there are no drivers on the road.</p>

<p>In order to properly move the system configuration data, the following steps should be followed: • System configuration changes are made and tested on the dev system • The changes are exported as a package using the package management utility • On Production, the package management utility is used to import the configuration package</p>
</div>
</div>
</div>
</div>

<p></p>

<div class="toc" id="toc"><input class="toctogglecheckbox" id="toctogglecheckbox" role="button" style="display:none" type="checkbox">
<div class="toctitle" dir="ltr" lang="en"></div>

<ul>
	<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/Dev2Prod#Making_the_System_Configuration_changes_on_the_Development_tenant"><span class="tocnumber">1</span> <span class="toctext">Making the System Configuration changes on the Development tenant</span></a></li>
	<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/Dev2Prod#Exporting_the_System_Configuration_Changes"><span class="tocnumber">2</span> <span class="toctext">Exporting the System Configuration Changes</span></a></li>
	<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/Dev2Prod#Importing_into_the_Production_System"><span class="tocnumber">3</span> <span class="toctext">Importing into the Production System</span></a></li>
	<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/Dev2Prod#Notes_on_the_dev2prod_Process"><span class="tocnumber">4</span> <span class="toctext">Notes on the dev2prod Process</span></a></li>
</ul>
</div>

<h2 class="mw-headline" id="Making_the_System_Configuration_changes_on_the_Development_tenant">Making the System Configuration changes on the Development tenant</h2>

<p>Once we have our development tenant created, we can make our system configuration changes. To remind you, this includes changes to the following areas:</p>

<ul>
	<li>Records -&gt; Fields</li>
	<li>Records -&gt; Forms</li>
	<li>Records -&gt; Rules</li>
	<li>Records -&gt; Processes</li>
	<li>Records -&gt; Notifications</li>
	<li>Records -&gt; Custom actions</li>
	<li>Lists</li>
	<li>Roles</li>
	<li>Localization (for field labels, notifications, etc.)</li>
</ul>

<p>We also need to ensure that we perform adequate testing after we make our changes. Once certain system Configuration changes have been made, such as adding a field to the system, it may be impossible to remove. This is why we need to review all of our changes and test them thoroughly before moving them on to Production.</p>

<p>It is also important to plan out what will be worked on very carefully. It is not possible to pick and choose what will move to production. All system configuration changes will move at once. Therefore we need to spend the time to plan and define what changes will be performed during each dev2prod process.</p>

<p>This results in the most effective dev2prod changes being small and self-contained. Large-scale changes affected multiple areas of the system should be avoided unless absolutely necessary. Smaller, agile changes are more effective and carry much lower risk.</p>

<p></p>

<h2 class="mw-headline" id="Exporting_the_System_Configuration_Changes">Exporting the System Configuration Changes</h2>

<p>After our system configuration changes have been performed and tested in the development tenant, it's time to export them. The export is performed by the 'Package Management' utility which may be found in the 'Administration' section of the Service Management Automation X menu. From there we can select the 'Export' option.</p>

<p>While the export is taking place, Service Management Automation X displays the system configuration changes and the number of records in each type. Note that this is not a count of what has been changed, but rather all of the records in this area. Therefore even if we only make a single change there will be many records included in the export.</p>

<p>It is important to leave the browser we are using open until the export has completed. If the browser closes during the export process, we need to restart the export process from the beginning (after we log in again) to ensure we get a clean export.</p>

<p>The actual export will download to our computer as a .pkb file named “user-customization-&lt;current date/time information&gt;.pkb” (where &lt;current date/time information&gt; will be replaced by a representation of the current date and time).</p>

<p></p>

<h2 class="mw-headline" id="Importing_into_the_Production_System">Importing into the Production System</h2>

<p>The development of new system configuration changes can take time, over which some changes to the production system will take place. New data configuration changes may be created or old ones modified. It is important to ensure our new system configuration changes will not cause any conflicts before importing them into Production.</p>

<p>To ensure our changes will import smoothly, we first need to simulate the system configuration import. Why are we simulating it before we actually load the import? Well, there is a chance that there were other changes made on production while we were performing our development, and those changes might not be compatible with ours. Now, with proper planning and administration, the chances of this are very low. However, if someone else had created their own system configuration export as part of a separate dev2prod process, this could happen. Therefore it is very important to share the planning and implementation schedules of any system configuration changes in our Service Management Automation X system with all of the administrators and developers.</p>

<p>To perform the simulation, once again we access the 'Package Management' utility from the main menu. This time we will select the 'Simulate import' option. The system will then prompt for the location of our system configuration package. Once we supply that information, Service Management Automation X will analyze the package and report its findings (this might take a few minutes).</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="packageSimulation.png" data-file-height="424" data-file-width="599" height="424" src="/mediawiki/images/5/5e/packageSimulation.png" width="599"></a></p>

<p>We need to look at the results for any:</p>

<ul>
	<li>Failed records — this could be the result of changes being made to Production outside of our dev2prod process</li>
	<li>Removed records where we did not delete any configuration records - again, this could point out new System Configuration changes outside of our process.</li>
</ul>

<p>If there are any unexpected results, we will need to investigate each one (most likely involving finding the persons who made those changes) to determine what actions we need to take. This may involve more changes on our Development tenant — which would necessitate a new export be created.</p>

<p>Once we are happy with the results of the simulation, we are ready to perform the actual import of our System Configuration package. This is again accessed through the Package Management section, this time selecting the “Import” option.<span class="Apple-converted-space">&nbsp; </span>The import should be scheduled ahead of time so that there are not any users logged into the system while the import is run. In fact, Service Management Automation X will block all logins during the import, except for users with the Tenant Administrator role.</p>

<p>Just like the simulation, we can see the status of the process as it imports each type of System configuration data. If we ran the simulation, we should not be surprised by any failures. After the import has been completed, the users can once again log in. At this point the System Configuration changes we have made are active and will affect the workflow of the system records.</p>

<p></p>

<h2 class="mw-headline" id="Notes_on_the_dev2prod_Process">Notes on the dev2prod Process</h2>

<p>While the actual dev2prod process is relatively straight-forward and easy to follow, there are a few areas and exceptions important to note.</p>

<p>While most everything under the 'Records' configuration option is handled by the dev2prod process (such as adding fields or changing rules), some options specific to certain record types are not handled as system configuration changes (and thus not moved by the dev2prod activities). These are handled as data configuration changes and include:</p>

<ul>
	<li>SLT settings in incident and request</li>
	<li>Approval definitions in request, change, and proposal</li>
</ul>
<!-- 
NewPP limit report
Cached time: 20200217094353
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.016 seconds
Real time usage: 0.070 seconds
Preprocessor visited node count: 16/1000000
Preprocessor generated node count: 42/1000000
Post‐expand include size: 7518/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
--><!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
--><!-- Saved in parser cache with key docops_wiki:pcache:idhash:875778-0!canonical and timestamp 20200217094353 and revision id 1577538
 --></div>
</html>