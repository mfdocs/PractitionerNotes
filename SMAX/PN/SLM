<div class="mw-parser-output"><div class="mw-collapsible-content"><div class="Admonition_Tip"><span class="autonumber">Service Level Management</span><div class="mw-collapsible">
<div class="mw-collapsible-content">
<p><br>
In this chapter, Glenn will look at the service level management area of Service Management Automation X. Service level management (SLM) allows you to measure the quality of service delivery by defining service level agreements with your customers to deliver their required services within pre-defined objectives. SMAX allows the organization to measure both customer focused and internal focused objectives.
</p><p>The service level targets created in these agreements are reflected in the requests and incidents created in the system, allowing agents to better prioritize their workload by tackling the issues that will breach a target first.
</p>
Service level data may be collected and reported upon to allow you to change existing service level targets with your customers or highlight trouble areas where you may need more resources or need to make changes in the current process.<div class="center"><div class="floatnone"><a onclick="javascript:loadingImage(this);" class="image"><img alt="ServiceLevelAgreement.gif" src="/mediawiki/images/7/75/ServiceLevelAgreement.gif" width="784" height="574" data-file-width="784" data-file-height="574"></a></div></div></div>
</div>
</div>
</div>
<p><br>
</p>
<div id="toc" class="toc"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none"><div class="toctitle" lang="en" dir="ltr"><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Service_Levels"><span class="tocnumber">1</span> <span class="toctext">Service Levels</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Agreements"><span class="tocnumber">2</span> <span class="toctext">Agreements</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Service_Agreements"><span class="tocnumber">2.1</span> <span class="toctext">Service Agreements</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Support_Agreements"><span class="tocnumber">2.2</span> <span class="toctext">Support Agreements</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Service_Level_Target_Sets"><span class="tocnumber">3</span> <span class="toctext">Service Level Target Sets</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Time_Periods"><span class="tocnumber">4</span> <span class="toctext">Time Periods</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Service_Agreements_in_Action"><span class="tocnumber">5</span> <span class="toctext">Service Agreements in Action</span></a>
<ul>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Example_.231:_Incident"><span class="tocnumber">5.1</span> <span class="toctext">Example #1: Incident</span></a></li>
<li class="toclevel-2"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Example_.232:_Service_Request"><span class="tocnumber">5.2</span> <span class="toctext">Example #2: Service Request</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Prioritizing_Work_using_Service_Targets"><span class="tocnumber">6</span> <span class="toctext">Prioritizing Work using Service Targets</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Reporting_on_Service_Targets"><span class="tocnumber">7</span> <span class="toctext">Reporting on Service Targets</span></a></li>
<li class="toclevel-1"><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/SLM#Timing_and_Caching"><span class="tocnumber">8</span> <span class="toctext">Timing and Caching</span></a></li>
</ul>
</div>

<h2 class="mw-headline" id="Service_Levels">Service Levels</h2>
<p>At this point, we have all the tools we need to take our end users’ requests and handle our incidents. What we don’t have yet is a way to let our agents know which ones they should work on first. Similarly, we have no way to quantify the quality of our service delivery to our End users. No one will believe us if we just say we’re doing a good job, we need a way of measuring the level of service we are providing, which we can then use to drive the correct prioritizing of the agent’s work.
</p><p>We can measure the quality of our service delivery by defining service level agreements with our customers (our end users’ management in our case) to deliver their required services within pre-defined objectives. These agreements will allow us to set measurable objectives for providing our services and how long it should take to handle issues that the users run into with those services.
</p><p>Service level management is the process we will use to define, monitor, and adjust these service level agreements with our customers. Specifically, this process will allow us to:
</p>
<ul><li>Set measurable objectives for all IT services</li>
<li>Create a relationship with the customer that fosters communication</li>
<li>Ensure that the customer understands the level of service to be provided</li>
<li>Monitor the quality of the delivered services</li>
<li>Improve service quality when necessary.</li></ul>
<p>Service Management Automation X allows us to define these objectives in our end user facing processes (encompassing service and support requests, and our internal processes incidents).
</p><p><br>
</p>
<h2 class="mw-headline" id="Agreements">Agreements</h2>
<p>There are two types of agreements tracked within Service Management Automation X, <b>service level agreements</b> (SLAs) and <b>operational level agreements</b> (OLAs).
</p><p>The service level agreement is an agreement between ourselves (as the IT service provider) and a customer. The operational level agreement is an agreement between the IT service provider (again us) and another part of our own organization. The functional difference between the two is found in the targets they define. SLAs define the expected time to move between specific steps of a workflow, while OLAs define the maximum time any one group should take to work on a specific record.
</p><p>The agreements can cover one of two areas:
</p>
<ul><li><b>Service agreements</b> — define response criteria for service requests</li>
<li><b>Support agreements</b> — define response criteria for support requests and incidents</li></ul>
<h3 class="mw-headline" id="Service_Agreements">Service Agreements</h3>
<p>Our service agreements specify the targets that our IT department should strive for when handling service requests. When we define these agreements, we need to specify the specific service offerings they cover. We can specify multiple offerings in a single service agreement, as long as they all have the same targets. In fact, to get started we can create a single service agreement to define the desired response times for all our services. Later, we can go back and create new service agreements to define specific targets for specific services.
</p><p>For each type of agreement, there are multiple target types we can measure. For service level agreements we can define the following targets:
</p>
<ul><li><b>Approval</b> — The time it should take between creating the request and getting the required approvals completed</li>
<li><b>Fulfillment</b> — The time it should take between the approval of the request and the actual fulfillment</li>
<li>In operational level agreements, there is a single target type to measure:</li>
<li><b>Time in group</b> — The time the service request remains assigned to a specific group</li></ul>
<p>Each of these types can have a different target based on the priority field set in the service request. So the most critical requests need to be completed quicker than the low priority ones under the same agreement.
</p><p>Because each service agreement can encompass many service offerings, as we are building our service catalog it would be a good idea to come up with some kind of grouping that represents some discrete “shirt sizes” of time we expect the fulfillment of each offering to take. In that way, we can create a service agreement for each “shirt size”.<span class="Apple-converted-space">&nbsp; </span>For example, something that fit in the “small” size. might have a much shorter target than those in the “extra large” size. This way we can have targets for all of our offerings with no need to create a separate agreement for each one.
</p>
<h3 class="mw-headline" id="Support_Agreements">Support Agreements</h3>
<p>Support agreements are concerned with the targets our It department has with the customer regarding support requests and incidents. These agreements are defined for issues with specific services, and each agreement can specify targets for multiple services.
</p><p>For Support agreements, there are again multiple target types that are measured. Each is slightly different based on which record type is being used. For support requests, we have the following target types:
</p>
<ul><li><b>Initial review </b>— The time it should take between logging the request and moving it to the 'Fulfillment' step.</li>
<li><b>Chat request response</b> — The time it should take for an agent to respond to an end user’s chat request</li>
<li><b>Resolution</b> — The time it should take between the 'Fulfillment' step and the 'Validation' step</li>
<li>In operational level agreements, there is again a single target type to measure:</li>
<li><b>Time in group</b> — The time the support request is assigned to a specific group</li></ul>
<p>Our incidents have the same target types except for the 'chat request response', which is only available for support requests.
</p><p><br>
</p>
<h2 class="mw-headline" id="Service_Level_Target_Sets">Service Level Target Sets</h2>
<p>To define the targets for the different agreement types, we will need to create what Service Management Automation X calls target sets. These sets allow us to create reusable definitions that can be referenced in multiple agreements, reducing the overall amount of work we need to do.
</p><p>Each target set specifies the agreement type it may be used for and the record type (incident, support request, or service request) it may be associated with. In addition, we need to specify the work schedule (we’ll get to those in a minute) and the time zone that should be used for the target calculations.
</p><p>We need to specify the actual targets for each of the target types (which include time to initial review, resolution, and chat request response). We can define a single target for a type (such as the Resolution type), or we can define a separate target for the type based on the associated record's priority. So we might set one day as the resolution target for a critical priority incident, but a 7-day target for a low priority incident. Oh, and it isn’t necessary to set a target for every priority. So if we don’t want to measure low priority incidents for a certain agreement, we can do that.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="10.1-TargetSets.png" src="/mediawiki/images/a/a5/10.1-TargetSets.png" width="1562" height="875" data-file-width="1562" data-file-height="875"></a>
</p><p><br>
</p>
<h2 class="mw-headline" id="Time_Periods">Time Periods</h2>
<p>To set a specific work schedule for a target set (so we only count the time we are “working” against the service targets), we first need to define it. We do this by creating a time period of a specific type (work schedule).
</p><p>The time period definition contains all of the scheduling information needed to determine when someone using this schedule is working. Time periods are very flexible regarding start and end times, one time events (extra working hours), and holidays.
</p><p>Service agreements use work Schedules to only count time against a target during actual working hours. If the service target specifies that it is only valid during an eight to five shift, then any time spent outside of those hours will not count against the target. This is why it is important that we also specify the time zone in the target definition. 8 a.m. in San Diego is not the same as 8 a.m. in Shanghai (as I found out the hard way in my last job).
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="10.2-timePeriods.png" src="/mediawiki/images/4/4a/10.2-timePeriods.png" width="1579" height="882" data-file-width="1579" data-file-height="882"></a>
</p><p><br>
</p>
<h2 class="mw-headline" id="Service_Agreements_in_Action">Service Agreements in Action</h2>
<p>So we’ve spent a good deal of time going over how to define our service agreements, but if you're like me then you'd probably like to see examples of a service agreement in action. Let’s go through some hypothetical scenarios and see how the agreements work in the processes they support.
</p>
<h3 id="Example_#1:_Incident"><span class="mw-headline" id="Example_.231:_Incident">Example #1: Incident</span></h3>
<p>In this scenario, an Incident was created by one of our monitoring systems at exactly 8 a.m. (how convenient). One server that supports our Email service went down (possibly because the boss kicked it again)!
</p><p>We have a support agreement defined for the Email service, which has a specific service level target set for use with Incidents. This incident had a priority of critical assigned to it by our monitoring system, so we are assigning the following targets for each type:
</p>
<ul><li>Initial review (for critical priority) has a target of 10 minutes</li>
<li>Resolution (for critical priority) has a target of 60 minutes</li></ul>
<p>There is no work schedule defined (which equates to 24x7 service), and the time zone is set to America/Los_Angeles. Even though there is no work schedule, we want to define the correct time zone to handle date switch overs such as Daylight Saving Time.
</p><p>When we look at the incident itself, we can see how the service agreement is being used by looking at the 'Targets' tab. From here we can see everything we need regarding the agreements, including:
</p>
<ul><li>A summary of each service level target type (initial review &amp; resolution) comprising
<ul><li>The current status of each target (Active, Breached, or Achieved)</li>
<li>The Target date which needs to be met in order to achieve each target</li>
<li>The Elapsed duration of each specific type (how much time has already been used)</li>
<li>The target duration of each type (the total time allowed)</li>
<li>The date at which the target was achieved (if we met the target)</li></ul></li>
<li>The next target time that will occur for this Incident</li>
<li>The overall status of the incident regarding the targets (active, breached, or achieved)</li></ul>
<p>At the top of the Incident is an indicator of how long until the next target time, or how far in the past it was if we missed it. So now if we pulled the ticket up just after it was opened we would see the target date for Initial review is 8:10 a.m. and the target for resolution is 9:00 a.m.
</p><p>For each target type, the system will send alert messages to the assigned group (or groups) when 50%, 75%, and 90% of the target time has passed. Here, everyone was too busy watching cat videos on the Internet an no one categorized and assigned the ticket in time. Even though the service desk received an email at 8:05, 8:07 (and 30 seconds), and 8:09.
</p><p>At 8:10, because the Incident had not yet been categorized, the Initial review target was breached. The system will email the assigned group (or groups) with this information, and mark the overall status of the incident as breached (if any targets are breached then the incident has breached the service agreement).
</p><p>However, the incident is still out there and we have another target to meet. The next target time of the incident will now reflect the resolution target of 9:00 a.m. Again, reminder emails will be sent out at 8:30 (50%), 8:45 (75%), and 8:54 (90%). Our crack team finds the issue and resolves the incident at 8:50 a.m. (so the third email reminder was never sent). Now if we look at the targets we see that the resolution target has a status of 'Achieved' and the achievement date is today at 8:50.
</p><p>We notice that the overall status is still 'Breached'”, as again if any target is breached the overall status of the Incident will also be 'Breached'.
</p>
<h3 id="Example_#2:_Service_Request"><span class="mw-headline" id="Example_.232:_Service_Request">Example #2: Service Request</span></h3>
<p>In this scenario, an end user requested the 'New Sharepoint Site' offering from the Service Management Automation Service Portal. This offering is linked to a Service agreement which has an associated target set. The targets are set as follows:
</p>
<ul><li>Approval (all priorities) has a target of 2 hours</li>
<li>Fulfillment (all priorities) has a target of 4 hours</li></ul>
<p>Let’s say the request is made at 9:00 a.m. The approval target is now set at 11:00 a.m. The fulfillment target, however, is not set to anything yet. Why? Well, the Fulfillment target is measured by the time the approval has been completed and the end of the 'Fulfillment' step. Since the request has not completed the 'Approval' step yet, the timer has not started.
</p><p>While we are waiting for the approval to happen, one thing to note is that there are automatically generated reminders sent to the approvers already, so no extra notifications are sent by the SLA processing.
</p><p>The Approval is completed at 10:00 a.m., so we have achieved the approval target. Now the fulfillment target starts, and we have four hours (until 2:00 p.m.) to get it completed. For the fulfillment target, we have the reminders sent at 12:00 noon (50%), 1:00 p.m. (75%) and 1:36 p.m. (90%) to the assigned group.
</p><p>The fulfillment is completed at 1:30 p.m., so the fulfillment target is also achieved. This means the overall status of the incident will also be 'Achieved'.
</p><p><br>
</p>
<h2 class="mw-headline" id="Prioritizing_Work_using_Service_Targets">Prioritizing Work using Service Targets</h2>
<p>One of the most useful things that our agreements give us is a method for our agents to prioritize their work. Instead of relying on the request or incident priority, instructing our agents to use the next SLT target time field results in better handling of their work queues. They simply need to work on the item with the next SLT target time that will expire the quickest.
</p><p>Why is this better than using priority? Well, let’s say there we have a few incidents out there for each priority (critical, high, medium, and low). If we only work on the highest priority first, and new incidents are coming in, some of which are critical or high priority, then the medium and low priority incidents may never get worked on (or at least not for a long time). And don’t forget that not all high priority Incidents are equal! If our Payroll service is down, it's much more important than our Room Reservation service (at least to me it is) — leading to different targets between the two services.
</p><p>If we teach our agents to look at the next SLT target time, a medium priority incident that has been open for a few days will work its way to the top of the list so that the agent will work on it before we breach the service agreement.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="10.3-Prioritizing.png" src="/mediawiki/images/9/92/10.3-Prioritizing.png" width="1580" height="914" data-file-width="1580" data-file-height="914"></a>
</p><p><br>
</p>
<h2 class="mw-headline" id="Reporting_on_Service_Targets">Reporting on Service Targets</h2>
<p>It will be very important for us to report on how we are performing against our service agreements. Service Management Automation X stores all the data we need to determine what kind of job we are doing against each one.
</p><p>One thing we need to think about as we design our reports is what we are measuring in each one. Are we looking at how we are doing in a specific area, such as incidents or requests? Or are we looking at a specific type of target (the approvals target type in a request for example)?
</p><p>The reason this is important is that we will report against a different data set depending on the answer to that question. If we want to see all the incidents that have breached any service target, we will report against the incident table. If instead, we want to see how many approval target type breaches we have; I need to report against the actual service level target data.
</p><p>So as long as we know what we are trying to measure we can select the correct record type to report against. This way we can get all the information we need into our reports and/or dashboards.
</p><p><a onclick="javascript:loadingImage(this);" class="image"><img alt="10.4-Reports.png" src="/mediawiki/images/5/57/10.4-Reports.png" width="871" height="908" data-file-width="871" data-file-height="908"></a>
</p><p><br>
</p>
<h2 class="mw-headline" id="Timing_and_Caching">Timing and Caching</h2>
<p>It probably won't surprise you, but there is a ton of processing going on behind the scenes to calculate all the service level targets and related actions for all the incidents and requests being opened. Service Management Automation X has to perform complex calculations which included time periods (and time zones) every time someone creates or updates a request or incident.
</p><p>To optimize performance, Service Management Automation X performs the calculations in small batches in the background so that the end users and agents are not negatively affected. The small side-effect of this is that the calculations might not be visible to the agents for up to a minute. So we need to let our agents know that if they do not see a target time in a record they recently created or updated, they need to give it a few seconds and it will appear.
</p><p>One other area that the optimization work affects is in changing the actual service level targets. To keep performance at its peak, the internal caching mechanisms used may not take the new values into consideration for a few minutes. In fact, the system will warn us of this when we change the targets. It is possible to override this behavior if necessary, but we need to make sure we only do this when we have to.
</p>
<!-- 
NewPP limit report
Cached time: 20200216153459
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.040 seconds
Real time usage: 0.188 seconds
Preprocessor visited node count: 23/1000000
Preprocessor generated node count: 56/1000000
Post‐expand include size: 18049/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key docops_wiki:pcache:idhash:875789-0!canonical and timestamp 20200216153459 and revision id 1577549
 -->
</div>