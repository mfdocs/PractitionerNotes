<html>{{#redirect:ReleaseFlow}}
<div>
<div>
<div class="Admonition_Tip"><span class="autonumber">Release Flow</span>
<div>
<div>
<p><br>
Each release is governed by the release management workflow.</p>

<p>This workflow defines the activities that happen before and after the actual changes that make up the release are implemented and determines what happens if the changes are not successful.</p>

<div>
<div><img alt="Release Data Model.gif" src="/mediawiki/images/c/c1/Release_Data_Model.gif" style="height:704px; width:988px"></div>
</div>
</div>
</div>
</div>
</div>

<p></p>

<div>
<div></div>

<ul>
	<li><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/ReleaseFlow#Release_Workflow">1 Release Workflow</a>

	<ul>
		<li><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/ReleaseFlow#Classification">1.1 Classification</a></li>
		<li><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/ReleaseFlow#Planning">1.2 Planning</a></li>
		<li><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/ReleaseFlow#Deployment">1.3 Deployment</a></li>
		<li><a href="https://docs.microfocus.com/itom/SMAX:2019.11/PractitionersNotes/GettingStarted/ReleaseFlow#Validation">1.4 Validation</a></li>
	</ul>
	</li>
</ul>
</div>

<h2>Release Workflow</h2>

<p>The key activities in a release — planning, designing, building, configuring, and testing — are all represented in the release workflow.</p>

<p>Let’s take a look at each of the steps in the release life cycle.</p>

<p><img alt="releaseworkflow.png" src="/mediawiki/images/f/f3/releaseworkflow.png" style="height:530px; width:1420px"></p>

<h3>Classification</h3>

<p>When creating a release, the release coordinator must supply all of the relevant details. This includes filling out the following fields during the 'Log' phase:</p>

<ul>
	<li>Title - A short description of the Release</li>
	<li>Release type - Whether this is a minor, major, or emergency release</li>
	<li>Description - A detailed description of the release</li>
	<li>Service - What service is driving the release (the release might affect multiple services, but this specifies which one is the primary reason the release was required)</li>
	<li>Release model - What pre-defined model will this release follow</li>
	<li>Reason for release - Why the release is necessary (selected from a list of reasons)</li>
	<li>Justification - A detailed explanation of why this release is necessary</li>
</ul>

<p>The release coordinator may also specify the latest execution date necessary for the release, categorize it, and set the urgency.</p>

<p>In the next phase, 'Evaluate', the release coordinator can review the previous information and then must categorize the release and assign it to an owning group and owner. This is also where the release coordinator identifies the necessary changes and ensures they are part of the release by creating or linking them.</p>

<p>Once the release coordinator specifies this information, they can move the release forward into the 'Planning' step.</p>

<h3>Planning</h3>

<p>The 'Planning' step allows the release coordinator to plan the resources and tasks required for the release. During the 'Plan and design' phase, the release coordinator analyzes the release based on the included changes, plans the resources and tasks required, and reviews, revises, and updates the schedule as necessary. If the decision is to move on with the release, the release coordinator manually transitions it to the 'Build and test' phase. If not, the release is canceled, and the release coordinator manually transitions it to the 'Abandon' phase.</p>

<p>In the 'Build and test' phase, the implementation and back out plans for the included changes are built and tested. Release specific plans, such as training plans, are also created. From here, the release coordinator moves it to the 'Approve deployment' phase if it is ready, or may move it back to the 'Plan and design' phase if further planning and elaboration are necessary.</p>

<p>For the final 'Approve deployment' phase, the relevant analyst checks the proposed timing and content of the release, the relative time for the contained changes, validates that all changes have been approved, and confirms that all resources are aligned to execute the contained changes. Once approved, the release automatically transitions on to the 'Deploy' phase, or back to the 'Build and test' phase, depending on the information provided by the release coordinator. Alternatively, the release coordinator can cancel the release by manually transitioning it to the 'Abandon' phase.</p>

<h3>Deployment</h3>

<p>The 'Deployment' step comprises the actions associated with the actual implementation of the release. Here, the release coordinator coordinates and monitors the implementation of the associated changes.</p>

<p>During the 'Deploy' phase, changes are implemented according to the implementation plan, and all release tasks are completed. Any necessary release specific activities — the actual changes and any work outside of the changes — are done. Then the release coordinator manually transitions the release to the 'Early life support' phase.</p>

<p>If the execution fails, the release coordinator manually transitions the change to the 'Remediate' phase. The release coordinator can cancel the release by transitioning it to the 'Abandon' phase.</p>

<p>When the release moves to the 'Remediate' phase, the remediation plan is implemented.</p>

<h3>Validation</h3>

<p>Once a release moves to the 'Validation' step, the release coordinator determines whether the release implementation succeeded and reviews the procedure taken for the purposes of process improvement.</p>

<p>In the 'Early life support' phase, the release coordinator and relevant IT stakeholders (such as the service owner, technical staff, etc.) monitor the release, resolve problems, and implement improvements to help stabilize the release.</p>

<p>Finally, during the 'Review' phase, the release coordinator and relevant IT stakeholders review the result of the release, compare the actual and proposed implementation, and decide whether to create a release model. Once completed, the release transitions to the 'Closed' phase.</p>
<!-- 
NewPP limit report
Cached time: 20200217094307
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.020 seconds
Real time usage: 0.076 seconds
Preprocessor visited node count: 14/1000000
Preprocessor generated node count: 38/1000000
Post‐expand include size: 5321/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
--><!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
--><!-- Saved in parser cache with key docops_wiki:pcache:idhash:875783-0!canonical and timestamp 20200217094307 and revision id 1577543
 --></div>
</html>