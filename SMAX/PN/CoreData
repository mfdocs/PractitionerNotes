<html><div>
<div class="Admonition_Tip"><span class="autonumber">Core Data</span>
<div>
<div>
<p><br>
In chapter 2 we tackle the concepts around the core data of the Service Management Automation X suite: people, locations, and groups (and we’ll throw in roles for good measure).</p>

<p>As we introduce new record types, we will be building up the Service Management Automation X Data Model. In each chapter, we will investigate the core files for each concept or module introduced as well as their immediate relationships to other record types. This also means that not every relationship may be shown for each record type, which greatly reduces the complexity of each image. At the end of this guide, we will describe the data model in detail, but it is difficult to display every relationship in the system in one image. The complete data model can be found <a href="https://docs.microfocus.com/itom/SMAX:2020.02/PN/DataModel">here</a>.</p>

<p>In our Data Model, each box is color-coded. These colors represent the <strong>badge color</strong> for records of that type within SMAX. The color families also help to visualize the overall modules that certain collections of records create.</p>

<p>Putting the Core Data record types into our data model is a bit problematic, as they relate in some way to almost every other record type in the system. Instead of drawing all of those lines and making our model unreadable, here we present a simplified data model showing only the relationships between these objects.</p>

<div>
<div><img alt="XCoreData.gif" src="/mediawiki/images/3/3b/XCoreData.gif" style="height:210px; width:436px"></div>
</div>

<p><br>
Note the icons for Person, Location, Entitlement Rule, Time period and Group. On our data models from here on out we will add these icons to any boxes that have relationships to each type. For example, Incident records reference several types of Core Data, giving the following representation:</p>

<div>
<div><img alt="IncidentExample.gif" src="/mediawiki/images/d/d6/IncidentExample.gif" style="height:81px; width:124px"></div>
</div>

<p><br>
In this way, the icons show that the Incident has relationships to Person, Group, and Location.</p>

<p>By the end of this section Glenn will:</p>

<ul>
	<li>Understand which people he needs to include in the Service Management Automation X implementation</li>
	<li>Know the difference between a User and a Contact</li>
	<li>Discover how to determine what users can do by adding Roles to a Person or Group</li>
	<li>Learn about the two different types of Groups in Service Management Automation X; Functional and Organizational</li>
	<li>Define what makes up a Location</li>
	<li>See how certain information can be made available only to certain users</li>
</ul>
</div>
</div>
</div>
</div>

<p></p>

<h2>People</h2>

<p>The first thing I need to do is to figure out who needs to be part of the system, and what they will do inside of it.</p>

<p>First, all the people that provide one or more of our services (I know we haven’t talked about services yet, but for now think of them as anything someone might ask us for) need to be in the system so they can see all of the incoming user requests, get notifications about or possible issues, and work on any tasks we need to assign to them. In most cases, we refer to these users as <strong>agents</strong>.</p>

<p>Second, there are all the people that want to consume our services that need a way to interact with us to request the services, report issues with their ability to consume the service, or even just ask questions about the services. This type of user is most often referred to as an 'e<strong>nd user</strong>' or '<strong>service requester</strong>'.</p>

<p>Finally, there are all the people that will not be using the system itself but may be referenced inside of it. One example is our external vendors. These users won’t log in to the system, but our agents might want to call them or send them a copy of a request via email, so we need their contact information in the system.</p>

<p>In Service Management Automation X there are two types of people; <strong>users</strong> and <strong>contacts</strong>. Users are people that can log in to the system, while contacts cannot. From our previous examples, our agents and end users will exist as users, while the rest (external vendors, etc.) will be contacts.</p>

<p>We already have all our Users in our company’s Active Directory (AD), which we can import directly into SMAX. We'll have to do extra work to also get all our contacts into the system. One thing, we should make sure we check that our current AD data is correct before we move any of it into our new system.</p>

<p>You can find more information about People in the help center.</p>

<p></p>

<h2>Groups</h2>

<p>Once all our people are in the system, we need to organize them into the proper groups. Service Management Automation X uses groups for a variety of reasons, including sending notifications, specifying who can approve processes, or to assign work. Service Management Automation X has two distinct types of groups: organizational and functional.</p>

<p><strong>Organizational groups</strong> contain all the boxes on the company’s org chart. We can represent all our business units, departments, and the company itself as organizational groups. We’ll define the company itself as an organization, and then all the internal business units and their contained departments. The organizational group also contains information about the owner/manager of the Group and all of the members of the organization. Note that a person can only belong to one organizational group. Our best practice will be to add the person to the organizational group at the bottom of the org chart hierarchy – so in our case, we'll add people to their department.</p>

<p><strong>Functional groups</strong> contain a list of people responsible for a specific job function or process within the system. These groups can encompass people who belong to several different organizational groups or could further break up organizational groups into different functions they support. For example, within a department that builds a specific product we can create separate functional groups for the database team, the UI team, and the Application team. It is also important to note that people can belong to multiple functional groups, so people that support multiple processes can belong to all of the necessary teams.</p>

<p>The main thing we will use functional groups for is to assign 'work'. When we want a specific 'team' to work on a request, incident, change, or even a task, we do that by assigning a functional group to the record we want them to work on. From there, we can also assign a specific group member to the record, so it is not only important to define the groups but to make sure the correct people are part of the group.</p>

<p>Again, we have most of the organizational information we need in our Active Directory system to import into Service Management Automation X. However, we will most likely need to do additional work to create the functional groups and get the right people into each one.</p>

<p>More detailed information on groups can be found in the help center.</p>

<p></p>

<h2>Roles</h2>

<p>Once we have all of the people and groups, it’s time to determine who can do what in our system. Service Management Automation X handles this by allowing us to set specific permissions inside of roles. We can assign these roles to either a group or a specific person. Unless there is someone that requires a specific exception, we should concentrate on setting the roles for groups (rather than on the users) as this will require much less administrative work on our part.</p>

<p>Service Management Automation X comes with a good number of roles already defined that reflect industry best practice recommendations. In our case, I think these will be enough and we won’t have to add any ourselves, but if that becomes necessary we can do so.</p>

<p>One thing to remember is that all users will have the ‘Self-Service Portal User’ role defined for them by default. This has all of the permissions needed to log in to and use the Service Management Automation Service Portal. Therefore we won’t need to assign any role for users that will only access the system through the portal.</p>

<p>Remember that a person can have multiple roles. Therefore we don’t have to create a specific role for someone who is both an Incident Manager and a Financial Manager. Instead, we make sure they have both existing Roles.</p>

<p>More information on roles may be found in the help center.</p>

<p></p>

<h2>Locations</h2>

<p>Along with knowing who the people are in our system, it would be a good idea to know where those people are, right? For that, we need to add locations to Service Management Automation X. SMAX defines locations in a hierarchy similar to the organizations we previously defined. Each location also has a specific type which ties it to where it fits on the hierarchy. The location types we can define include:</p>

<ul>
	<li>Region</li>
	<li>Country</li>
	<li>City</li>
	<li>Site</li>
	<li>Building</li>
	<li>Floor</li>
	<li>Stockroom</li>
	<li>Data Center</li>
	<li>Room</li>
	<li>Meeting Room</li>
	<li>Cube</li>
	<li>Shelf</li>
	<li>Rack</li>
	<li>Rack Unit</li>
</ul>

<p>Each location may have a 'parent' defined. Think about the parent/child relationship of two locations as 'the child is located inside of the parent location.' For example, a country can be the parent of a city, or a rack can be the parent of a rack unit. I noticed that the system will only let me add a parent that makes sense in the hierarchy, so it wouldn’t let me add a room as a parent of a region.</p>

<p>We won’t have time right now to define everything down to the detail that Service Management Automation X allows. So what we should do is determine what we will use locations for and make sure we define enough to support those processes. For that, we need to look at what processes make use of locations.</p>

<p>The first and most obvious use of locations is to determine where a person or piece of equipment is physically located. Our Active Directory already has most of this information in it, but we will have to define the locations in the system before we can put anything in them. Therefore, we want to export that information and then massage it with the location types, then import it into Service Management Automation X. That should get us a good start on defining our cubes and rooms, as well as defining the parents such as floors, buildings, sites, cities, countries, and regions.</p>

<p>Another use of Locations we will get to eventually is linking locations with the stockrooms that support them. This information is used in the service request and asset management processes to reserve 'in stock' devices/assets for delivery to a supported location. While this will be important later, we can put off these definitions for a little while.</p>

<p>But when we’re ready to dive in, let's be sure to reference the <a href="./itom/SMAX:2020.02/locationMgmt">online help for locations</a> for more information.</p>

<p></p>

<h2>Entitlement Rules</h2>

<p>We'll eventually use locations, groups, and roles in what Service Management Automation X calls entitlement rules. These rules restrict what our end users see in the Service Management Automation Service Portal. For example, we might only allow requests for certain services from a certain location or group. We won’t be setting up any of these rules yet, but it's something to keep in the back of our minds while we are defining our locations, groups, and roles.</p>

<p>If you can’t wait to find out more about Entitlement Rules, head to the <a href="./itom/SMAX:2020.02/AddEditERules">online help guide</a>.</p>

<p></p>

<h2>Time Periods</h2>

<p>Everyone -- and in our line of work every<em>thing</em> -- has a schedule. Service Management Automation X allows us to create schedules for work schedules, holidays, maintenance and blackout schedules, and special events. The Time Period Management module enables user to create and manage complex time periods for use in a variety of places inside of the product.</p>

<p>Additional information on Time Periods may be found <a href="./itom/SMAX:2020.02/TimeMgmt">here</a>.</p>
<!-- 
NewPP limit report
Cached time: 20200216124504
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.024 seconds
Real time usage: 0.091 seconds
Preprocessor visited node count: 22/1000000
Preprocessor generated node count: 60/1000000
Post‐expand include size: 11943/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
--><!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
--><!-- Saved in parser cache with key docops_wiki:pcache:idhash:875774-0!canonical and timestamp 20200216124504 and revision id 1577534
 --></html>