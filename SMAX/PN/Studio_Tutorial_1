<html><div class="mw-parser-output">
<div class="toc" id="toc"><input class="toctogglecheckbox" id="toctogglecheckbox" role="button" style="display:none" type="checkbox">
<div class="toctitle" dir="ltr" lang="en"></div>
</div>

<p>Using the Service Management Automation X Studio, customers and partners can develop new applications inside the product. With the available tools, a variety of useful functionality may be created.</p>

<p>In this tutorial, you will create a Training application that will allow instructors to define the available courses, schedule specific classes, and track the students in these classes (and even grade their performance).</p>

<p>The tutorial itself will be split into multiple parts. In part one, you will design and implement the needed record types for the application and the roles needed to control them. The components built in this section will be new to the system and completely self-contained.</p>

<p>Part two of the tutorial will expand our application to allow end users to sign up for specific classes using the Service Catalog.</p>

<p></p>

<h2 class="mw-headline" id="Designing_the_Training_Application">Designing the Training Application</h2>

<p>One of the most important steps in creating our application comes before you make the actual configuration changes. Designing the application up front allows you to verify that the desired functionality will be added correctly and points out any holes or missing elements as well. Doing a thorough job of planning the application is also important as some types of cannot be removed from the system once they have been added.</p>

<h3 class="mw-headline" id="List_high-level_functionality">List high-level functionality</h3>

<p>Your first design activity will be to define the high-level functionality you want to include in your application. In part one of the tutorial, you will focus on the instructors that will create and maintain the training courses as well as grading the students. The functional requirements will therefore focus on the activities of the instructor.</p>

<p>In the application, we will want to:</p>

<ul>
	<li>Allow the instructor to define a course, including a name and a description</li>
	<li>Allow the instructor to create a class for a course, which will specify:
	<ul>
		<li>When the class starts and ends</li>
		<li>The maximum number of students allowed to register</li>
		<li>Where the class will be held</li>
		<li>Who will be leading the class</li>
	</ul>
	</li>
	<li>Allow the instructor to sign up students for a specific class</li>
	<li>Allow the instructor to give each student a grade for a class</li>
	<li>Allow an instructor to retire a course, so no more classes can be scheduled</li>
</ul>

<h3 class="mw-headline" id="Create_an_Entity_Model_Diagram">Create an Entity Model Diagram</h3>

<p>An entity model diagram gives a clear picture of what new record types are needed as well as the relationships between them. It also shows where any new relations to existing record types are needed.</p>

<p>For this application, there are clearly two new record types that are needed: courses and classes. A single course may have several related classes. You will also need a relation between the class and the location for the class, as well as to the instructor (which will be to the person record type).</p>

<p>Additionally, you’ll need to relate each class to multiple students. Since the students are also represented in the person entity, you have a choice regarding how to handle that relation. You could simply create a many-to-many relationship between the class and the person table. However, one of the requirements is to allow the instructor to grade each student. Therefore, you’ll need to create a new record type to represent your students and define relationships to allow one class and one person for each record. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 1.png" data-file-height="295" data-file-width="750" height="295" src="/mediawiki/images/d/d2/studio_tutorial1_1.png" width="750"></a></p>

<p>The above entity relation diagram shows the new record types in the filled boxes, and existing record types in the empty boxes. It also shows each of the relations that you will need to define to build the data structure for the application.</p>

<h3 class="mw-headline" id="Plan_the_Menu_Structure">Plan the Menu Structure</h3>

<p>The final piece of planning we need to address is how our new application will fit into the existing menu structure that exists in Service Management Automation X.</p>

<p>The main menu is separated into several sections. The first three sections align to the lifecycle of a business service:</p>

<ul>
	<li><b>Plan</b> - contains applications focused on the planning and overall definitions of services</li>
	<li><b>Build</b> - contains applications focused on the building and maintenance of the services</li>
	<li><b>Run</b> - contains applications focused on the day to day operations and support of the services</li>
</ul>

<p>Alternatively, there is the <b>Master Data</b> section under the Administration section of the menu. This section is primarily used for supporting data that is shared between applications.</p>

<p>In many cases, an application may span multiple steps in the service lifecycle or may have both lifecycle and supporting data included inside of it. While it may not fit perfectly into one section, you need to pick the best fit for the overall functionality of our application.</p>

<p>In this case, put the new Training application into the <b>Run</b> section of the menu.</p>

<p></p>

<h2 class="mw-headline" id="Implementation">Implementation</h2>

<h3 class="mw-headline" id="Add_the_Training_Application">Add the Training Application</h3>

<p>The first step is to define the application in the system. Do this by creating it within the existing menu structure. As decided in the application planning, you’ll put it in the <b>Run</b> section of the menu. To do this, first access the <b>Studio</b> option from the Administration section of the main menu. From there, select the <b>Menu</b> option from the menu header.</p>

<pre><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 2.png" data-file-height="466" data-file-width="974" height="466" src="/mediawiki/images/9/9f/studio_tutorial1_2.png" width="974"></a>
</pre>

<p>Select <b>Run</b> from the Category list, then select the <b>Add</b> button in the Application section. The system will then ask for some information about our new application. The Application name can’t be changed after the application is created, so be sure to enter “Training” – the system will automatically add a “_c” to the name in order to mark it as a custom application. This Application name is the internal name of the application. The two Multilingual labels are what the users see (in the proper language) and may be changed later.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 3.png" data-file-height="662" data-file-width="974" height="340" src="/mediawiki/images/thumb/a/aa/studio_tutorial1_3.png/500px-studio_tutorial1_3.png" srcset="/mediawiki/images/thumb/a/aa/studio_tutorial1_3.png/750px-studio_tutorial1_3.png 1.5x, /mediawiki/images/a/aa/studio_tutorial1_3.png 2x" width="500"></a></p>

<p>One quick note: custom applications will always be inserted in the menu after the out of the box applications. When the “Insert after” option says, “Add first”, it means our application will be the first one listed after the out of the box ones.</p>

<p></p>

<h3 class="mw-headline" id="Create_the_New_Record_Types">Create the New Record Types</h3>

<h4 class="mw-headline" id="Create_the_Course_record_type">Create the Course record type</h4>

<p>Next, select your new Training application and then choose to Add a new record type from the next column.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 4.png" data-file-height="999" data-file-width="974" height="513" src="/mediawiki/images/thumb/7/72/studio_tutorial1_4.png/500px-studio_tutorial1_4.png" srcset="/mediawiki/images/thumb/7/72/studio_tutorial1_4.png/750px-studio_tutorial1_4.png 1.5x, /mediawiki/images/7/72/studio_tutorial1_4.png 2x" width="500"></a></p>

<p>When creating a new record type, you have three options around how to define the primary key. Using the “No primary key” will have the system use its own “Id” field as the primary key, and the system will automatically generate a numeric Id for every new record. This will allow someone to change how the course is displayed to end-users (via the DisplayLabel field) without affecting any defined links.</p>

<p>After adding the Course record type, you can click on it in the record type list to go to the Studio record type editor.</p>

<h4 class="mw-headline" id="Add_Fields_to_the_Course_record_type">Add Fields to the Course record type</h4>

<p>Once in the editor, select the <b>Fields</b> tab. You can see that a number of fields were automatically added to our new record type. These fields are added to any new record type added to the system. Note that any field that you add will automatically receive the “_c” suffix, so that your created fields will never conflict with fields added to the base product.</p>

<p>Add a new field to contain a description of the course:</p>

<ul>
	<li>Name: Description_c (remember that the system will add the suffix automatically)</li>
	<li>Multilingual label: Description</li>
	<li>Logical type: LARGE_TEXT</li>
</ul>

<p>Next, change the Multilingual label of the DisplayLabel field to “Course Name”. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 5.png" data-file-height="541" data-file-width="974" height="541" src="/mediawiki/images/a/aa/studio_tutorial1_5.png" width="974"></a></p>

<p><br>
Once the modifications are complete, be sure to save your changes.</p>

<p></p>

<h4 class="mw-headline" id="Create_the_Class_Record_Type">Create the Class Record Type</h4>

<p>Create the <b>Class</b> record type by adding a new record type to the Training application in the Studio menu option the same way you did for the Course record type.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 6.png" data-file-height="1004" data-file-width="974" height="515" src="/mediawiki/images/thumb/0/03/studio_tutorial1_6.png/500px-studio_tutorial1_6.png" srcset="/mediawiki/images/thumb/0/03/studio_tutorial1_6.png/750px-studio_tutorial1_6.png 1.5x, /mediawiki/images/0/03/studio_tutorial1_6.png 2x" width="500"></a></p>

<p>Once in the Fields editor, add the following fields needed for the high-level functionality defined above (remember that an _c will automatically be added to each field name):</p>
<button class="flscrbtn"><i class="material-icons flscricn">open_in_new</i></button>

<div style="margin: auto 5px;"><button class="flscrbtn">View Fullscreen</button></div>

<table class="wikitable">
	<tbody>
		<tr>
			<th>Field Name</th>
			<th>Multilingual label</th>
			<th>Logical type</th>
		</tr>
		<tr>
			<td>ClassEndDate</td>
			<td>End date</td>
			<td>DATE_TIME</td>
		</tr>
		<tr>
			<td>ClassSize</td>
			<td>Class size</td>
			<td>INTEGER</td>
		</tr>
		<tr>
			<td>ClassStartDate</td>
			<td>Start date</td>
			<td>DATE_TIME</td>
		</tr>
		<tr>
			<td>Description</td>
			<td>Description</td>
			<td>LARGE_TEXT</td>
		</tr>
	</tbody>
</table>

<p>In addition, you need to add a few entity links for the course, instructor, and location information:</p>
<button class="flscrbtn"><i class="material-icons flscricn">open_in_new</i></button>

<div style="margin: auto 5px;"><button class="flscrbtn">View Fullscreen</button></div>

<table class="wikitable">
	<tbody>
		<tr>
			<th>Field Name</th>
			<th>Multilingual label</th>
			<th>Logical type</th>
			<th>Reference to</th>
		</tr>
		<tr>
			<td>Course</td>
			<td>Course</td>
			<td>ENTITY_LINK</td>
			<td>Course</td>
		</tr>
		<tr>
			<td>Instructor</td>
			<td>Instructor</td>
			<td>ENTITY_LINK</td>
			<td>Person</td>
		</tr>
		<tr>
			<td>Location</td>
			<td>Location</td>
			<td>ENTITY_LINK</td>
			<td>Location</td>
		</tr>
	</tbody>
</table>

<p>Once all of the information has been added, be sure to save your changes.</p>

<p></p>

<h4 class="mw-headline" id="Create_the_Grade_List">Create the Grade List</h4>

<p>Before creating the <b>Student</b> record type, you need to create a new List that contains the possible grades that a student can get in a class. To keep this simple, you can just add two entries: pass and fail. Feel free to add different entries if you like.</p>

<p>To add the list, navigate to the Administration section in the main menu and select Lists. Select the New button and fill in the information for our new list.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 7.png" data-file-height="449" data-file-width="974" height="207" src="/mediawiki/images/thumb/3/32/studio_tutorial1_7.png/450px-studio_tutorial1_7.png" srcset="/mediawiki/images/thumb/3/32/studio_tutorial1_7.png/675px-studio_tutorial1_7.png 1.5x, /mediawiki/images/thumb/3/32/studio_tutorial1_7.png/900px-studio_tutorial1_7.png 2x" width="450"></a></p>

<p>Now create the two entries, pass and fail.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 8.png" data-file-height="352" data-file-width="974" height="289" src="/mediawiki/images/thumb/1/1d/studio_tutorial1_8.png/800px-studio_tutorial1_8.png" srcset="/mediawiki/images/1/1d/studio_tutorial1_8.png 1.5x" width="800"></a></p>

<p>Save the new list and move on to the students.</p>

<h4 class="mw-headline" id="Create_the_Student_Record_Type">Create the Student Record Type</h4>

<p>Create the <b>Student</b> record type the same way you did for the Course and Class record types. Again, do not select a primary key. The primary key for the Student record type will be the system generated id.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 9.png" data-file-height="991" data-file-width="974" height="458" src="/mediawiki/images/thumb/f/f4/studio_tutorial1_9.png/450px-studio_tutorial1_9.png" srcset="/mediawiki/images/thumb/f/f4/studio_tutorial1_9.png/675px-studio_tutorial1_9.png 1.5x, /mediawiki/images/thumb/f/f4/studio_tutorial1_9.png/900px-studio_tutorial1_9.png 2x" width="450"></a></p>

<p>Add a field to store the student’s grade, using the list you previously built. The logical type for a field using a List is “ENUM”, which is short for enumeration (a fancy word for a list). The list you built is specified in the “Reference to” field.</p>
<button class="flscrbtn"><i class="material-icons flscricn">open_in_new</i></button>

<div style="margin: auto 5px;"><button class="flscrbtn">View Fullscreen</button></div>

<table class="wikitable">
	<tbody>
		<tr>
			<th>Field Name</th>
			<th>Multilingual label</th>
			<th>Logical type</th>
			<th>Reference to</th>
		</tr>
		<tr>
			<td>Grade</td>
			<td>Grade</td>
			<td>ENUM</td>
			<td>Grades</td>
		</tr>
	</tbody>
</table>

<p>Then add the entity links for the Class and the Student (which links to the Person record type).</p>

<p><br>
Field Name Multilingual label Logical type Reference to Class Class ENTITY_LINK Class Student Student ENTITY_LINK Person</p>
<button class="flscrbtn"><i class="material-icons flscricn">open_in_new</i></button>

<div style="margin: auto 5px;"><button class="flscrbtn">View Fullscreen</button></div>

<table class="wikitable">
	<tbody>
		<tr>
			<th>Field Name</th>
			<th>Multilingual label</th>
			<th>Logical type</th>
			<th>Reference to</th>
		</tr>
		<tr>
			<td>Class</td>
			<td>Class</td>
			<td>ENTITY_LINK</td>
			<td>Class</td>
		</tr>
		<tr>
			<td>Student</td>
			<td>Student</td>
			<td>ENTITY_LINK</td>
			<td>Person</td>
		</tr>
	</tbody>
</table>

<p>Both of those fields should be required. Once you’re done, make sure you save your changes.</p>

<p></p>

<h3 class="mw-headline" id="Add_Forms_for_the_New_Record_Types">Add Forms for the New Record Types</h3>

<p>There are three forms that you need to add for every new record type:</p>

<ul>
	<li>New form – used when creating a new record</li>
	<li>Full form – used when viewing/updating an existing record</li>
	<li>Preview form – used when viewing record details next to the record list</li>
</ul>

<h4 class="mw-headline" id="Course_Forms">Course Forms</h4>

<p>For the new and preview forms, add a “Course Details” section that contains the Course name, and Description fields (you may need to add a new section before you add the fields). In the full form, add a 1:M Grid component to display the Classes that have been created for this course. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 10.png" data-file-height="379" data-file-width="974" height="379" src="/mediawiki/images/a/a7/studio_tutorial1_10.png" width="974"></a></p>

<h4 class="mw-headline" id="Class_Forms">Class Forms</h4>

<p>Create the three Class forms to display the fields you added as you see fit. On the full form, add a 1:M Grid component to display the Students for that class.</p>

<p><a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 11.png" data-file-height="506" data-file-width="974" height="506" src="/mediawiki/images/4/49/studio_tutorial1_11.png" width="974"></a></p>

<p></p>

<h4 class="mw-headline" id="Student_Forms">Student Forms</h4>

<p>Again, create the three forms needed for the Student record type. On the new form, add the Class and Student fields at a minimum. For the preview and full forms, also add the Display Label and Grade fields. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 12.png" data-file-height="224" data-file-width="974" height="224" src="/mediawiki/images/e/ef/studio_tutorial1_12.png" width="974"></a></p>

<h2 id="Creating_Process_and_Rules_(Workflow)"><span class="mw-headline" id="Creating_Process_and_Rules_.28Workflow.29">Creating Process and Rules (Workflow)</span></h2>

<p>In this tutorial, you will be adding a minimal workflow using the process and rules functionality of the SMAX Studio. Feel free to spruce up your application by adding additional rules and/or processes as you see fit.</p>

<h3 class="mw-headline" id="Adding_Course_Workflow">Adding Course Workflow</h3>

<p>The record workflow is made up of one or more phases which are contained in one or more metaphases. You can think of the metaphases as high-level “steps” that every record has to go through.</p>

<p>Once you define the metaphases for a record type, they may not be changed. In this case, you will be creating one phase for each metaphase (a very basic but common situation).</p>

<p>Create a “Normal” workflow with an initial phase of “New.” Then define three metaphases: Planning, Offered, and Retired. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 13.png" data-file-height="499" data-file-width="974" height="499" src="/mediawiki/images/a/ac/studio_tutorial1_13.png" width="974"></a></p>

<p>Now create a phase in the Offered metaphase that comes after New named “Available.” Finally, add a phase after that in the Retired metaphase also named “Retired”. <b>Note</b>: you can name the phases and metaphases differently if you like, but you need to make note of the names used here for reference later in the tutorial.</p>

<h3 class="mw-headline" id="Adding_Course_Rules">Adding Course Rules</h3>

<p>The only rule you need to add for the Course record type is a validation rule to make the Description field required. Add this rule to the “Normal” workflow node, in the Before Change section. Remember that the Course Name is already required due to the data model definitions. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 14.png" data-file-height="533" data-file-width="974" height="533" src="/mediawiki/images/d/dc/studio_tutorial1_14.png" width="974"></a></p>

<p></p>

<h3 class="mw-headline" id="Adding_Class_Workflow">Adding Class Workflow</h3>

<p>Create a workflow for the Class record type similar to the Course record type.</p>

<p>Create a “Normal” workflow with an initial phase of “New.” Then define three metaphases: Planning, Offered, and Completed. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 15.png" data-file-height="502" data-file-width="974" height="502" src="/mediawiki/images/e/ed/studio_tutorial1_15.png" width="974"></a></p>

<p><br>
Create a phase named “Enrollment” in the Offered metaphase, and a “Done” in the Completed metaphase (each linked to the previous phase).</p>

<h3 class="mw-headline" id="Adding_Class_Rules">Adding Class Rules</h3>

<p>First, add a validation rule on the “Normal” process to make Description required. This will apply to all phases of the workflow. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 16.png" data-file-height="533" data-file-width="974" height="533" src="/mediawiki/images/c/c8/studio_tutorial1_16.png" width="974"></a></p>

<p><br>
Next, add rules to the “New -&gt; Enrollment” transition to make the following fields required:</p>

<ul>
	<li>Start Date</li>
	<li>End Date</li>
	<li>Instructor</li>
	<li>Location</li>
</ul>

<h3 class="mw-headline" id="Adding_Student_Workflow">Adding Student Workflow</h3>

<p>The Student record type will have a very simple workflow named “Student” for this tutorial. Simply add a single “Student” metaphase with a single “Student” phase within it. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 17.png" data-file-height="422" data-file-width="974" height="422" src="/mediawiki/images/b/b6/studio_tutorial1_17.png" width="974"></a></p>

<p></p>

<p>For this section of the tutorial, you won’t need to add any rules to the Student table.</p>

<h2 class="mw-headline" id="Activating_the_New_Record_Types">Activating the New Record Types</h2>

<p>The next step is to activate each of the three new record types. From the Studio Menu section, click on the section containing the record type name (but don’t click on the name itself). From the drop-down menu that appears, select the “Activate” option. Complete this for each of the three new record types.</p>

<p></p>

<h2 class="mw-headline" id="Creating_a_Role_for_the_Training_Application">Creating a Role for the Training Application</h2>

<p>The easiest way to grant access to the new application is to create one or more Roles for specific types of access. You will create two roles. One for Students and one for Instructors.</p>

<p>Navigate to the Roles by selecting Administration &gt; People from the main menu. Then select “Roles” from the header menu. From here, select the “Add” button (on the top left section of the screen).</p>

<p>First create the “Instructor” role. Give this role full permissions on the three new record types (Course, Class, and Student). <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 18.png" data-file-height="558" data-file-width="974" height="558" src="/mediawiki/images/8/82/studio_tutorial1_18.png" width="974"></a></p>

<p><br>
Next, create a Role for the Students. This Role only needs the ability to View the Student records.</p>

<p>Once the Roles are created, add the Instructor Role to any Person that will act as an instructor and the Student Role to any potential student.</p>

<p></p>

<h2 class="mw-headline" id="Adding_Functionality">Adding Functionality</h2>

<p>While you now have a working application where an Instructor can add Courses, Classes, and Students, there are areas that you can easily improve by adding some simple rules. A few ideas are listed here, but feel free to add your own functionality and/or rules to make your application better.</p>

<h3 class="mw-headline" id="Setting_the_Student_Display_Label_field">Setting the Student Display Label field</h3>

<p>When displaying the list of students in a specific class, the system uses the Student’s Display Label field. Instead of forcing the Instructor to fill it in every time, create a business rule that automatically sets the field to a combination of the Student’s name and the Class ID.</p>

<p>In the Student workflow, on the “Student” phase (although it could be at any level), add a business rule to the “Before change” section and select “If…Then” and using the “Set field” template.</p>

<p>The condition should only run the rule if the Display Label field is blank: ${entity.DisplayLabel == null}</p>

<p>The rule should set the “Display label” as a combination of the student’s name and the class ID: ${concat(entity.Student_c.Name, ': ', entity.Class_c.DisplayLabel)} <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 19.png" data-file-height="533" data-file-width="974" height="533" src="/mediawiki/images/1/1d/studio_tutorial1_19.png" width="974"></a></p>

<p></p>

<h3 class="mw-headline" id="Only_Allow_Classes_for_Available_Courses">Only Allow Classes for Available Courses</h3>

<p>Currently, an instructor can add a Class to any Course. You can easily modify this to only allow them to add Classes to “Available” Courses (courses that have been moved to the “Available” phase in the workflow) with a business rule.</p>

<p>In the Class workflow, click on the “Normal” process. Add a new “Simple” business rule to the “Rendering Forms” section that uses the “Define suggested values based on filter” template.</p>

<p>In the rule, set the <b>field</b> to “Course”, the <b>title</b> to “Available courses”, and change the <b>filter</b> from “all records” to use <b>PhaseId IN ${‘Available_c’}</b>. <a class="image" onclick="javascript:loadingImage(this);"><img alt="studio tutorial1 20.png" data-file-height="531" data-file-width="974" height="531" src="/mediawiki/images/5/5d/studio_tutorial1_20.png" width="974"></a></p>

<p></p>

<h3 class="mw-headline" id="Other_Functionality">Other Functionality</h3>

<p>Take some time to experiment by adding additional functionality to the application. Some examples of possible functionality to implement include:</p>

<ul>
	<li>Don’t allow a class to move to the “Done” phase of the workflow until all the students in the class have a grade.</li>
	<li>Send a notification out to a Student when they receive a grade (including the grade)</li>
</ul>

<p></p>

<h2 class="mw-headline" id="Next_Steps">Next Steps</h2>

<p>At this point you have a functional Training application. The instructor can create courses, specific classes, and students to those classes. They can also give the student’s grades for each class. However, it seems unfair that the poor instructors have to do all the work. It would be much better if the students could sign themselves up for a class, wouldn’t it? And I’m sure there are some things you can add to make it easier for the instructor to assign grades as well.</p>

<p>In Part 2 of this tutorial, you’ll learn how to take advantage of the existing Service Catalog to give end users the ability to sign up for classes and use advanced functionality to extend the functionality for our instructors.</p>
<!-- 
NewPP limit report
Cached time: 20200217090033
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.060 seconds
Real time usage: 0.354 seconds
Preprocessor visited node count: 34/1000000
Preprocessor generated node count: 78/1000000
Post‐expand include size: 19212/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
--> <!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
--> <!-- Saved in parser cache with key docops_wiki:pcache:idhash:875795-0!canonical and timestamp 20200217090033 and revision id 1577558
 --></div>
</html>