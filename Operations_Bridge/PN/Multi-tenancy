<h1 style="margin-bottom:0px;">Multi-tenancy</h1><div class="f14 metric" style="color:#656668;display:flex;"><img src="/assets/images/calendar.png" style="height:12px;margin-top:auto;margin-bottom:auto;"><span class="updateDate">&nbsp; Updated on 26/06/2019</span> &nbsp;&nbsp;&nbsp;&nbsp; | &nbsp;&nbsp;&nbsp;&nbsp; <img src="/assets/images/updated.png" style="height:12px;margin-top:auto;margin-bottom:auto;"><span class="readTime">&nbsp; 3 minutes to read</span>&nbsp;&nbsp;&nbsp;&nbsp;</div><br><div class="mw-parser-output"><p><br> 
</p>
<div class="Admonition_Note">
<p><span class="autonumber">Note</span><br>
</p>
For multi-tenancy inside an installed Suite, refer to the Suite documentation.</div>
<p>Within the Container Deployment Foundation, we distinguish between administrative and technical multi-tenancy.
</p>
<ul><li>Administrative: ability to separate multiple Suite installations and individually configure and manage them. This is not supported.</li>
<li>Technical multi-tenancy:
<ul><li>Separation of multiple suite installations using Kubernetes namespaces. This is not supported.</li>
<li>Separation of Suite and foundational services using Kubernetes namespaces. This is supported.</li></ul></li></ul>
<h2><span class="mw-headline" id="Kubernetes_multi-tenancy_isolation">Kubernetes multi-tenancy isolation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.05/WhitepaperMultiTenancy&amp;veaction=edit&amp;section=T-1" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.05/WhitepaperMultiTenancy&amp;action=edit&amp;section=T-1" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Kubernetes provides multi-tenancy isolation using Kubernetes namespaces. Applications can be deployed into separate namespaces without interference from other namespaces.
</p><p>Objects, when created in Kubernetes, can optionally have a namespace attribute. If no namespace attribute is set, the objects are created inside the “default” namespace.
</p><p>On the Container Deployment Foundation, every object must have a namespace attribute when created. An object must exist in either a Suite namespace or the “core” namespace.
</p>
<h2><span class="mw-headline" id="Technical_multi-tenancy_in_the_Container_Deployment_Foundation">Technical multi-tenancy in the Container Deployment Foundation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.05/WhitepaperMultiTenancy&amp;veaction=edit&amp;section=T-2" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.05/WhitepaperMultiTenancy&amp;action=edit&amp;section=T-2" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Particular namespaces are used to separate the following functionality:
</p>
<ul><li><b>An installed ITOM Suite.</b> The Suite is installed in a namespace whose name is auto-generated based on the Suite acronym and a number. Example: “opsbridge1”.</li>
<li><b>The platform foundation services.</b> The underlying foundational services that provide authentication, licensing, installer and management functionality. These are installed in several other namespaces called “kube-system” and “core”. Most of the foundation services exist in the “core” namespace. The “default” namespace only holds the foundation services Nginx controller. Kubernetes components and add-on services run in the "kube-system" namespace.</li></ul>
<h2><span class="mw-headline" id="Additional_namespace_information">Additional namespace information</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.05/WhitepaperMultiTenancy&amp;veaction=edit&amp;section=T-3" class="mw-editsection-visualeditor" title="Edit section: ">edit</a><span class="mw-editsection-divider"> | </span><a href="/mediawiki/index.php?title=ITOM_Container_Deployment_Foundation:2019.05/WhitepaperMultiTenancy&amp;action=edit&amp;section=T-3" title="Edit section: ">edit source</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The “default” namespace holds objects that do not have an explicit namespace definition when they are created. It comes out of the box with Kubernetes and cannot be disabled. In the Container Deployment Foundation, this namespace is not used.
</p><p>The “kube-system” namespace is for objects created by the Kubernetes system.
</p><p>The “kube-public” namespace is not used.
</p><p>Kubernetes namespaces do not imply network segmentation. Network policies can also be specified at the Kubernetes level but this is not yet supported by Micro Focus. Network segmentation is not supported in the Container Deployment Foundation.
</p><p>DNS resolution for intra-cluster traffic does use Kubernetes namespaces. It is possible to have the same DNS name in multiple namespaces, which can be accessed by suffixing the service name with the namespace. Internally, the Container Deployment Foundation uses this pattern to separate core from Suite services.
</p><p>Namespaces exist across all of the cluster nodes. Therefore it is possible to find both core and Suite namespace containers and services across all nodes, except in cases where container functionality is restricted to particular nodes with a separate, unique namespace.
</p>
<!-- 
NewPP limit report
Cached time: 20190715100356
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.004 seconds
Real time usage: 0.018 seconds
Preprocessor visited node count: 10/1000000
Preprocessor generated node count: 44/1000000
Post‐expand include size: 3295/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key docops_wiki:pcache:idhash:795653-0!canonical and timestamp 20190715100356 and revision id 1398772
 -->
</div>