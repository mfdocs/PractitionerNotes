<html><pre><code>
#!/usr/bin/perl
#tc_post_snapshot=false
############################################################
#  Script Name:  Block Fortigate FW IP List
#
#  Usage:  
#      -u  (DO NOT CHANGE. Automatically filled by NA at runtime)
#      -p  (DO NOT CHANGE.  Automatically filled by NA at runtime)
#      -t  Ticket ID:  Change request ticket ID
#      -f  Filename of blocked IP list csv file (Different than NA Task 
#				Input CSV file.  See below)
#      -d  Dry Run (True|False)  Show only, do not run against device
#
#  Description:
#  This script takes a user provided ticket ID, and a file name of a file containing
#  a number of IP addresses to be blocked on the Fortigate FW.  The user can set
#  the option -d to "True" or "False" to control whether the script actually runs 
#  against the device, or just prints out the commands that will be run.
#
#  Example:
#  -u  -p  -t C12345 -f /tmp/iplist.csv -d True
#
#  Sample Task Input CSV  File:
#  primaryIPAddress,hostName,vdomList
#  172.16.30.102,adelaide,None
############################################################

# Modules used
use strict;
#use warnings;
use Getopt::Std;
use Net::Netmask;
use Opsware::NAS::Client;
use Data::Dumper qw(Dumper);

# process script options
my %opt;
getopts("u:p:t:v:f:d:", \%opt);
my $username = $opt{u} if defined $opt{u}; 
my $password = $opt{p} if defined $opt{p}; 
my $ticketID = $opt{t} if defined $opt{t}; 
my $filename = $opt{f} if defined $opt{f}; 
my $dryrun = $opt{d} if defined $opt{d}; 

# The $command variable is used to construct the Fortigate config to be sent to device

   # Retrieve list of IPs from file
   my $totalIPs = `grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}/?[0-9]+" $filename | wc -l`;
   chomp($totalIPs);
   my $uniqueIPs = `grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}/?[0-9]+" $filename | sort -u | wc -l`;
   chomp($uniqueIPs);
   my @iplist = `grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}/?[0-9]+" $filename | sort -u`;

print("Ticket ID:  $ticketID\nFilename:  $filename\n$uniqueIPs unique IPs found \($totalIPs total\)\n\n");

#Create NA API session object and login to API
my $nas = Opsware::NAS::Client-&gt;new();
my $res = $nas-&gt;login(-user =&gt; $username, -pass =&gt; $password, -host =&gt; "localhost");

unless ($res-&gt;ok()) {
  printf STDERR ("*** error: %s\n", $res-&gt;error_message());
  printf STDERR ("Did you supply valid HOST/USER/PASS arguments?\n");
  printf STDERR ("re-run this script with '--help' for assistance.\n");
  exit(1);
}

my @vdomList = split / /, "$vdomList$";
#print Dumper \@vdomList;

# Build command script(s) (For devices with no vdoms, one vdom, or multiple vdoms
foreach my $vdom (@vdomList)
{
   chomp($vdom);
   my $command = "";
   #Append Fortigate command to edit vdom to the $command variable
   $command = $command . "conf vd\nedit $vdom\n" if $vdom !~ /None/;
   $command = $command . "config firewall address\n";
   # Add Hacker list commands to $command variable
   foreach my $ip (@iplist)
   {
      chomp($ip);
      my $netmask;
      if (index($ip, "/") != -1){
         #$netmask = "255.255.255.0";
         my $block = Net::Netmask-&gt;new2( $ip ) or die $Net::Netmask::error;
         $netmask = $block-&gt;mask;
         $ip =~ s/\/[0-9]+//;
   } else {
      $netmask = "255.255.255.255";
   }
   my $date = `date +\%D`;
   chomp($date);
   $command = $command . "edit Hacker_" . "$ip\n";
   $command = $command . "set subnet " . $ip . " $netmask\n";
   $command = $command . "set comment \"$ticketID - $date $username\"\nnext\n";
   }

   #Add Fortigate commands to edit the blocked IP group
   $command = $command . "end\nconfig firewall addrgrp\nedit Blocked_Hosts_" . $ticketID . 
   "\n";

   #Add individual blocked IP group commands
   foreach my $ip (@iplist)
   {
      chomp($ip);
      $command = $command . "append member Hacker_$ip\n";
   }
   $command = $command . "end\n";
   

   if ($dryrun =~ /[Tt]rue/) {
      print("Dry Run = True\n");
      print ("$res = $nas-&gt;run_script\(ip =&gt; $tc_device_ip$, mode =&gt;\"Fortinet Fortigate configuration\", script =&gt; \"$command\"");
   } else {
      print("Dry Run = False\n");
      # Send the Fortigate commands to the API using run_script
      #$res = $nas-&gt;run_script(ip=&gt;"$tc_device_ip$", mode =&gt;"Fortinet Fortigate configuration", script =&gt; "$command");
      print ("$res = $nas-&gt;run_script\(ip =&gt; $tc_device_ip$, mode =&gt;\"Fortinet Fortigate configuration\", script =&gt; \"$command\"");
      #unless ($res-&gt;ok()) {
      #  printf STDERR ("*** error: %s\n", $res-&gt;error_message());
      #  exit(1);
      #}
   }
}
$nas-&gt;logout();


</code></pre>

<p>&nbsp;</p>
</html>