<html><p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">Network Automation (NA)&nbsp;does a lot of things and does a lot of things very well.&nbsp; I’ve personally heard customer feedback on more than one occasion that NA is one of the best tools they have deployed in their enterprise management environment overall, not just network.&nbsp; The reason is that it’s simple to install, simple to use, and is extremely powerful.&nbsp; NA provides value to all groups in an organization including InfoSec teams, NOC operators, tools managers, network architects, network managers, capacity planners, etc. … not just network techies.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">And it can do all that without requiring global device access by each of the teams mentioned.&nbsp; The only time the network needs to be/should be touched is when it needs to be changed.&nbsp; All hardware, software, configuration, and diagnostic data can be centrally/securely accessed by authorized NA users.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">Network Automation offers genuinely exciting opportunities to recognize massive efficiency gains, eliminate error-prone processes, while at the same time significantly reducing risk and increasing security.&nbsp; Many NA customers have asked for examples of real-world issues that our customers have solved using Network Automation.&nbsp; This article outlines one such issue … a real-world problem encountered by one of Micro Focus’ NA customers, and the outcome they achieved using NA.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><b><span style="font-size:14.0pt">Background:</span></b></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">This particular customer is a long time NA/NNMi user.&nbsp; They get tremendous value out of both solutions, but still recognized that the solutions were capable of so much more.&nbsp; We did multiple brown bag sessions highlighting advanced capabilities, but ironically, they’ve always been too busy to implement them.&nbsp; So they reached out to revisit the conversation, and we agreed that they would produce a list of use cases.&nbsp; </span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">But a funny thing happened …</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">We agreed to implement the top use case on their list, and in the process, discovered during an unrelated conversation, a very powerful use case that they hadn’t even considered.&nbsp; There had recently been a <b>major</b> outage in their network that took down a very large number of customers, and caused repercussions throughout the organization.&nbsp; As we discussed the details of this particular incident, we all agreed that the issue relating to this outage was the #1 use case.&nbsp; Their best, most important use case, hadn’t even been on the list for consideration.&nbsp; So we switched gears to solve that issue.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><b><span style="font-size:14.0pt">The Existing Process:</span></b></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">The InfoSec team at this customer continually harvests lists of malicious IP addresses from around the globe that have attempted to hack their network perimeter.&nbsp; They then create a change ticket with a spreadsheet containing the list of malicious IPs to be configured/blocked into their global enterprise firewall architecture.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">The network engineering team then received the change ticket, and manually configured each individual firewall configuration by copying/pasting each individual IP address (hundreds) for each virtual domain configured on the firewall.&nbsp; The configurations were then manually applied to each firewall (approximately 75).</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><b><span style="font-size:14.0pt">The Problem:</span></b></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">The existing process described above takes hours and requires FTE effort.&nbsp; (Unnecessarily as we will see.)&nbsp; </span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">However, in one case, a malformed IP address was inadvertently copied/pasted into a firewall configuration.&nbsp; When the configuration was loaded into the firewall device, the device was confused by the malformed IP address, and decided to convert the address to 0.0.0.0.&nbsp; Doh!&nbsp; Major outage!&nbsp; Many unhappy customers!&nbsp; </span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">So obviously the IP address shouldn’t have been handled this way by the device vendor, but the REAL issue to highlight here is the error-prone nature of the manual process.&nbsp; In this case, the outcome was catastrophic.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><b><span style="font-size:14.0pt">The Solution:</span></b></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">An NA Advanced Perl API Change Plan.&nbsp; (See attached)</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">Before we show the advanced solution used in this customer scenario, it's worth pointing out that NA provides two categories of Change Plans.&nbsp; Basic vs Advanced.&nbsp; Basic Change Plans are nothing more than native device syntax that network engineers use every day, and require no additional knowldege of scripting languages to implement automation.&nbsp; This is powerful.&nbsp; </span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">Here’s an example of a simple, Basic NA Change Plan:</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><img src="/mediawiki/images/pn_images/pn_image_5e9b49bd827555.99916662.jpeg" style="width:467px; height:228px"></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">However, in cases that require additional processing logic, and/or integration use cases, Advanced API Change Plans can be used.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">It’s tempting to wow you with the complexities of the solution implemented at this customer site, but I can’t.&nbsp; It was simple.&nbsp; </span></span></p>

<p><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">Task Parameters:&nbsp; </span></span></p>

<ul>
	<li style="text-align:justify; margin-left:8px"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">A change ticket ID</span></span></li>
	<li style="text-align:justify; margin-left:8px"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">InfoSec provided spreadsheet containing malicious IP list to be blocked</span></span></li>
	<li style="text-align:justify; margin-left:8px"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">A "dry run" option lets users verify before sending to actual device</span></span></li>
</ul>

<p style="text-align:justify; margin-left:8px"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">Task Input:</span></span></p>

<ul>
	<li style="text-align:justify; margin-left:8px"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">A Task Input CSV file containing a list of firewalls to be updated along with the virtual domains to be updated on each</span></span></li>
</ul>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">Task Ouput:</span></span></p>

<ul>
	<li style="text-align:justify; margin-left:8px"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">A fully formed, fully accurate, fully annotated device configuration to be sent to each the firewall devices</span></span></li>
</ul>

<p style="text-align:justify">&nbsp;</p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">The advanced Perl API change plan reads the spreadsheet provided by the InfoSec team, parses out all properly formatted IP addresses using a single regex match (no possibility for error), and builds the device configuration with a loop that adds configuration lines for each malicious IP address.&nbsp; When the NA Task that runs the Change Plan is executed, the user provides a csv file with all the firewalls to be updated, along with the list of virtual domains on each firewall.&nbsp; It took about an hour to write the Perl script.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">The full script is attached, but below is a screenshot of NA Advanced Change Plan:</span></span></p>

<p style="text-align:justify">&nbsp;</p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><img height="700" src="/mediawiki/images/pn_images/pn_image_5e9b49bde2e7f2.14999195.png" style="width: 554.651px; height: 700px;" width="554.6511627906976"></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><b><span style="font-size:14.0pt">The Result:</span></b></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><strong>This customer can now update their entire global enterprise firewall infrastructure in minutes!</strong>&nbsp; A process that had previously required FTE hours of effort was eliminated.&nbsp; This customer just effectively added an additional member to their network team by leveraging the existing investment they’d made in Network Automation.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif"><b><span style="font-size:14.0pt">Next Steps:</span></b></span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">The next steps are to work with the InfoSec team to automate the process end to end.&nbsp; The customer can decide if they want to truly automate the process end to end, or if they prefer to implement approvals before devices are updated.&nbsp; This can be achieved within NA using the Workflow and Approvals capability, and/or integrated with their existing ticketing system.</span></span></p>

<p style="text-align:justify"><span style="font-size:11pt"><span style="font-family:&quot;Calibri&quot;,sans-serif">For this customer, this use case was truly a home run.&nbsp; And it wasn’t even on their original list of use cases!</span></span></p>

<pre><code class="language-perl">#!/usr/bin/perl
#tc_post_snapshot=false
############################################################
#  Script Name:  Block Fortigate FW IP List
#
#  Usage:  
#      -u  (DO NOT CHANGE. Automatically filled by NA at runtime)
#      -p  (DO NOT CHANGE.  Automatically filled by NA at runtime)
#      -t  Ticket ID:  Change request ticket ID
#      -f  Filename of blocked IP list csv file (Different than NA Task 
#				Input CSV file.  See below)
#      -d  Dry Run (True|False)  Show only, do not run against device
#
#  Description:
#  This script takes a user provided ticket ID, and a file name of a file containing
#  a number of IP addresses to be blocked on the Fortigate FW.  The user can set
#  the option -d to "True" or "False" to control whether the script actually runs 
#  against the device, or just prints out the commands that will be run.
#
#  Example:
#  -u  -p  -t C12345 -f /tmp/iplist.csv -d True
#
#  Sample Task Input CSV  File:
#  primaryIPAddress,hostName,vdomList
#  172.16.30.102,adelaide,None
############################################################

# Modules used
use strict;
#use warnings;
use Getopt::Std;
use Net::Netmask;
use Opsware::NAS::Client;
use Data::Dumper qw(Dumper);

# process script options
my %opt;
getopts("u:p:t:v:f:d:", \%opt);
my $username = $opt{u} if defined $opt{u}; 
my $password = $opt{p} if defined $opt{p}; 
my $ticketID = $opt{t} if defined $opt{t}; 
my $filename = $opt{f} if defined $opt{f}; 
my $dryrun = $opt{d} if defined $opt{d}; 

# The $command variable is used to construct the Fortigate config to be sent to device

   # Retrieve list of IPs from file
   my $totalIPs = `grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}/?[0-9]+" $filename | wc -l`;
   chomp($totalIPs);
   my $uniqueIPs = `grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}/?[0-9]+" $filename | sort -u | wc -l`;
   chomp($uniqueIPs);
   my @iplist = `grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}/?[0-9]+" $filename | sort -u`;

print("Ticket ID:  $ticketID\nFilename:  $filename\n$uniqueIPs unique IPs found \($totalIPs total\)\n\n");

#Create NA API session object and login to API
my $nas = Opsware::NAS::Client-&gt;new();
my $res = $nas-&gt;login(-user =&gt; $username, -pass =&gt; $password, -host =&gt; "localhost");

unless ($res-&gt;ok()) {
  printf STDERR ("*** error: %s\n", $res-&gt;error_message());
  printf STDERR ("Did you supply valid HOST/USER/PASS arguments?\n");
  printf STDERR ("re-run this script with '--help' for assistance.\n");
  exit(1);
}

my @vdomList = split / /, "$vdomList$";
#print Dumper \@vdomList;

# Build command script(s) (For devices with no vdoms, one vdom, or multiple vdoms
foreach my $vdom (@vdomList)
{
   chomp($vdom);
   my $command = "";
   #Append Fortigate command to edit vdom to the $command variable
   $command = $command . "conf vd\nedit $vdom\n" if $vdom !~ /None/;
   $command = $command . "config firewall address\n";
   # Add Hacker list commands to $command variable
   foreach my $ip (@iplist)
   {
      chomp($ip);
      my $netmask;
      if (index($ip, "/") != -1){
         #$netmask = "255.255.255.0";
         my $block = Net::Netmask-&gt;new2( $ip ) or die $Net::Netmask::error;
         $netmask = $block-&gt;mask;
         $ip =~ s/\/[0-9]+//;
   } else {
      $netmask = "255.255.255.255";
   }
   my $date = `date +\%D`;
   chomp($date);
   $command = $command . "edit Hacker_" . "$ip\n";
   $command = $command . "set subnet " . $ip . " $netmask\n";
   $command = $command . "set comment \"$ticketID - $date $username\"\nnext\n";
   }

   #Add Fortigate commands to edit the blocked IP group
   $command = $command . "end\nconfig firewall addrgrp\nedit Blocked_Hosts_" . $ticketID . 
   "\n";

   #Add individual blocked IP group commands
   foreach my $ip (@iplist)
   {
      chomp($ip);
      $command = $command . "append member Hacker_$ip\n";
   }
   $command = $command . "end\n";
   

   if ($dryrun =~ /[Tt]rue/) {
      print("Dry Run = True\n");
      print ("$res = $nas-&gt;run_script\(ip =&gt; $tc_device_ip$, mode =&gt;\"Fortinet Fortigate configuration\", script =&gt; \"$command\"");
   } else {
      print("Dry Run = False\n");
      # Send the Fortigate commands to the API using run_script
      #$res = $nas-&gt;run_script(ip=&gt;"$tc_device_ip$", mode =&gt;"Fortinet Fortigate configuration", script =&gt; "$command");
      print ("$res = $nas-&gt;run_script\(ip =&gt; $tc_device_ip$, mode =&gt;\"Fortinet Fortigate configuration\", script =&gt; \"$command\"");
      #unless ($res-&gt;ok()) {
      #  printf STDERR ("*** error: %s\n", $res-&gt;error_message());
      #  exit(1);
      #}
   }
}
$nas-&gt;logout();
</code></pre>

<p>&nbsp;</p>
</html>