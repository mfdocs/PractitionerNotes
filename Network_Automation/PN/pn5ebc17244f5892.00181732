<html><p>Python is a powerful and popular programming language with huge capabilities for automation use cases.<br>
Network Automation(NA) is one of the leading tools in the market for network device configuration, change and compliance management. Power of NA can be further enhanced with the use of Python.<br>
<br>
In this article I have tried to list down the procedure to enable the use of Python as an advanced scripting language in NA.</p>

<h3><strong>Pre-requisites</strong></h3>

<ul>
	<li>Install Python (2.7&nbsp;or 3.4+&nbsp;version) on the NA server</li>
	<li>Install Paramiko on the NA server - Paramiko is an SSH library for Python. It can be installed using <b>"pip"</b></li>
</ul>

<h3><br>
<b style="color: rgb(0, 0, 0); font-family: MetricHPE_Medium; font-size: 20px;">Configure Python interpreter in NA</b></h3>
NA needs to know the location of the interpreter before executing the scripts. Location of the Python binary, which is installed on the NA server, needs to be provided in the NA UI. To do that -&nbsp;

<ol>
	<li>Login to NA UI</li>
	<li>Navigate to the Server settings page (Admin -&gt; Administrative Settings -&gt; Server)</li>
	<li>Locate the <strong>Advanced Scripting</strong> section in the page.</li>
	<li>Pick any of the empty scripting language and provide the details
	<ul>
		<li>Scripting Language <em>&lt;n&gt;</em>&nbsp;- name of the language as it needs to appear in the UI</li>
		<li>Path to Interpreter <em>&lt;n&gt; -</em>&nbsp;location of the python binary. (For example, on Linux -&nbsp;/usr/bin/python)</li>
	</ul>
	</li>
	<li>Save the changes</li>
</ol>
<img alt="" border="0" height="426" hspace="0" src="/mediawiki/images/pn_images/pn_image_5ebc436b013d16.78320498.png" style="width: 800px; height: 426px; margin: 0px; border: 0px solid black;" vspace="0" width="800">
<h4></h4>

<h4></h4>

<h4><strong>Verify the configuration</strong></h4>
The changes made in the Server settings will result in a new option while creating a new advanced Diagnostic/Change Plan.

<ol>
	<li>Navigate to New Diagnostic page (Devices -&gt; Device Tools -&gt; Diagnostics -&gt; New Diagnostic)</li>
	<li>Select the <strong>Advanced Scripting</strong> checkbox</li>
	<li>Verify that the <strong>Language&nbsp;</strong>drop down has the newly added scripting language.</li>
</ol>

<h4></h4>

<h4><b>Create&nbsp;advanced scripts using Python</b></h4>
You will now be able to create and use Python scripts that can connect to devices and perform advanced data manipulation.<br>
These scripts can be developed in <strong>Script&nbsp;</strong>area of both Change Plans and Diagnostics.&nbsp;<br>
<img alt="" border="0" height="589" hspace="0" src="/mediawiki/images/pn_images/pn_image_5ebc47cf545546.92567337.png" style="width: 800px; height: 589px; margin: 0px; border: 0px solid black;" vspace="0" width="800">
<p></p>

<h3><strong>Convert SSH/Telnet sessions to device via NA Proxy to Python scripts</strong></h3>
One of the powerful features of NA is to be able to connect to the device via NA proxy and record all the steps performed on that device. This recorded procedure can then be converted to a script and executed as a Change Plan against a bunch of devices.<br>
In this section I will share the steps to convert the recorded device session to a Python script, which can then be altered according to the needs and executed against a host of devices.
<h4><br>
<br>
<strong>Configure to display "<em>Convert to python</em>" menu in View Session page</strong></h4>

<ol>
	<li>Open the file adjustable_options.rcx file for editing (found in &lt;NA install dir&gt;/jre/ folder)</li>
	<li>Copy the xml content provided below and paste it after the last &lt;/option&gt; tag and before &lt;/options&gt; tag. Save the file</li>
</ol>

<pre><code class="language-markup">
        &lt;!-- python --&gt;
        &lt;option name="AutoScript/python"&gt;true&lt;/option&gt;

        &lt;option name="AutoScript/python/header/default" notrim="true"&gt;&lt;![CDATA[
import base64
import paramiko
import sys
import time


def get_output(session):
            output = ''
            data=''
            time.sleep(1)

            not_done = True
            MAX_RETRY = 5

            while (not_done or MAX_RETRY &gt; 0):
                    if(session.recv_ready()):
                            data = session.recv(65535).decode('ascii')
                            output += data
                            if MAX_RETRY &lt; 5:
                                    MAX_RETRY = 5
                    else:
                        not_done = False
                        MAX_RETRY = MAX_RETRY - 1

            return output



client = paramiko.SSHClient()
client.load_system_host_keys()
device = '#$tc_device_id$'
sshport = '$tc_proxy_ssh_port$'
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect('localhost', username='$tc_user_username$', password='$NA_Password$', port=sshport)
transport = client.get_transport()
session = transport.open_session()
session.set_combine_stderr(True)
session.invoke_shell()

get_output(session)

session.send('connect ' + device + '\n')
output = get_output(session)
print(output)

session.send('terminal length 0\n')
output = get_output(session)

    ]]&gt;
        &lt;/option&gt;

        &lt;option name="AutoScript/python/percommand/default" notrim="true"&gt;&lt;![CDATA[

print('&lt;&lt;CMD&gt;&gt;\n')
session.send('&lt;&lt;CMD&gt;&gt;\n')
output = get_output(session)
print('\n' + output)

    ]]&gt;
        &lt;/option&gt;

        &lt;option name="AutoScript/python/footer/default" notrim="true"&gt;&lt;![CDATA[
session.send('exit\n')
output = get_output(session)
print(output)

client.close()

    ]]&gt;
        &lt;/option&gt;

        &lt;option name="AutoScript/python/logout/default"&gt;exit,quit,logout,lo&lt;/option&gt;
</code></pre>
<br>
&nbsp; &nbsp;3. Save the file<br>
&nbsp; &nbsp;4. Connect to NA Proxy via SSH/Telnet ( example: <strong>ssh &lt;na_user&gt;@&lt;nahost&gt; -p 8022</strong>)<br>
&nbsp; &nbsp;5. Run the command - <strong>reload server options<br>
&nbsp; &nbsp;</strong>6. Exit NA proxy

<h4></h4>

<p></p>

<h4><strong>Record a SSH session</strong></h4>

<ol>
	<li>Connect to NA proxy</li>
	<li>Connect to a device shell managed by NA using&nbsp;<strong>connect&nbsp;</strong>command.</li>
	<li>Execute device specific commands</li>
	<li>Exit from the device shell.</li>
</ol>

<h4><strong>Convert recorded session to Python script</strong></h4>

<ol>
	<li>Navigate to the device home page (device for which you recorded the session)</li>
	<li>Navigate to list of sessions page (View -&gt; SSH/Telnet sessions)</li>
	<li>Select any recorded session and click on <strong>View Commands Only</strong></li>
	<li>Click on&nbsp;<strong>Convert to python Script&nbsp;</strong>in the top right corner.</li>
	<li>In this page (New Change Plan page), modify the script if necessary.</li>
	<li>Click on&nbsp;<strong>Pull Variables</strong>&nbsp;button</li>
	<li>Mark the variable as <strong>Password</strong> by clicking on the checkbox</li>
	<li>Provide a name to the change plan</li>
	<li>Save the change plan.</li>
</ol>
This change plan can be executed as a task against a set of devices of the same device family. While scheduling the Change plan task, provide the password of the logged in NA user for the&nbsp;<strong>NA_Password&nbsp;</strong>variable.</html>