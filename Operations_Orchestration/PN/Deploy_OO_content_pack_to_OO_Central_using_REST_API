<p class="MsoNormal">Organizations are embracing DevOps practices that combine
software development and information technology operations. DevOps practices
shorten the systems development life cycle while delivering features, fixes and
updates frequently in close alignment with business objectives. &nbsp;Continuous integration and continuous
deployment processes of DevOps includes the following activities:</p><p class="MsoNormal"></p><ol><li>Development</li><li>Build</li><li>Deployment</li><li>Test</li></ol><p></p><p class="MsoNormal"><b>Development<o:p></o:p></b></p>

<p class="MsoNormal">Large enterprises running Micro Focus Operations Orchestration
(OO) often have several OO developers and separate environments for
development, test and production. OO developers develop OO content packs and
commit their code changes to version control system. An OO content pack
contains business intelligence to automate certain IT processes. OO content
packs are developed using the OO studio application or the OO web designer
application.<o:p></o:p></p>

<p class="MsoNormal"><b>Build<o:p></o:p></b></p>

<p class="MsoNormal">After content pack code changes are committed to version
control system, a new version of content pack is built using the OO Shell
Authoring (OOSHA) utility. The OOSHA utility builds OO content pack using
contents of a project folder downloaded from version control repository.<o:p></o:p></p>

<p class="MsoNormal"><b>Deployment<o:p></o:p></b></p>

<p class="MsoNormal">After OO content pack is built, it needs to be deployed onto
OO Central Application for testing and use in production environment. OO
content pack is deployed onto OO Central Application in one of the following
ways:<o:p></o:p></p>

<p class="MsoListParagraphCxSpFirst"></p><ol><li>Using OO Central UI’s deploy content pack
feature. This method requires manual login to the OO Central server and cannot
be used to deploy content packs in an automated fashion.</li><li>Using Operations Orchestration Shell (OOSH)
utility. This method requires installation of additional piece of software.</li><li>Using OO REST API. A REST API is an
application program interface (API) that uses HTTP requests to GET, PUT, POST
and DELETE data in an application.</li></ol><o:p></o:p><p></p>

<p class="MsoListParagraphCxSpMiddle"><o:p></o:p></p>

<p class="MsoListParagraphCxSpLast"><o:p></o:p></p>

<p class="MsoNormal">Either the OOSH utility or OO REST API can be used to deploy
content packs in an automated fashion. Certain enterprises may prefer to use OO
REST APIs to deploy content packs for the following reasons:<o:p></o:p></p>

<p class="MsoListParagraphCxSpFirst"></p><ol><li>Eliminate need to install an additional
piece of software on their content build and deploy systems.</li><li>Integrate into existing deployment
automation mechanisms. </li><li>Gain more control around automation of
deployment of content packs to OO Central.&nbsp;</li></ol><p></p>

<p class="MsoNormal"><b>Test<o:p></o:p></b></p>

<p class="MsoNormal">After content pack has been deployed, testing of newly
deployed content pack can be automated or done manually.<o:p></o:p></p>

<p class="MsoNormal">This article shows a sample power shell script that can be
used to automate deployment of OO content pack to OO Central Application.
Intent of this script is to show how to invoke OO REST APIs to automate deployment
of OO content packs to OO Central Application. This script can be further
enhanced to perform additional checks required for your environment, to improve
performance, to use as a reference to develop it in your preferred programming language,
to use as a reference to make other OO REST API calls, etc. At a high level,
this script performs the following:<o:p></o:p></p>

<p class="MsoListParagraphCxSpFirst"></p><ol><li>Validates the following input values: OO
Central Application URL, OO Central username, OO Central user password, OO content
pack name and OO content pack file</li><li>Retrieves cross reference token from OO
Central Application URL</li><li>Uses cross reference token to deploy content
pack to OO Central Application.</li></ol><p><span style="line-height: 107%;"><font face="Calibri, sans-serif"><span style="font-size: 14.6667px;">Usage of the script is described at the beginning of this script and functioning of this script is explained in comments throughout the script.</span></font></span></p><div><span style="font-size:11.0pt;line-height:107%;font-family:&quot;Calibri&quot;,sans-serif;
mso-ascii-theme-font:minor-latin;mso-fareast-font-family:Calibri;mso-fareast-theme-font:
minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:&quot;Times New Roman&quot;;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA"><br></span></div>

<source lang="bash"><pre># File name: OODeployCP.ps1
#
# Purpose: 1. Deploys a content pack to OO Central application using OO 
#             Central REST APIs.  
#          2. This script is meant to be taken as an example. Enhance this
#             script to meet your organization's coding standards.
#          3. Even though script is in powershell, you can use similar 
#             concepts to write this program in other languages.
#          4. Use as-is. Not officially supported through Micro Focus.
#
# Limitations: 1. Does not use proxy. If your environment requires proxy to 
#                 connect to the OO Central Application, enhance this script
#                 to accomodate web requests through proxy. 
#
# Usage: 1. Runs on Windows OS and it requires Windows Powershell on the
#           operating system. Copy this script to a directory on the windows
#           server/workstation/laptop.
#        2. Open powershell window 
#        3. Run Get-Help .\OODeployCP.ps1 to get a list of parameters that
#           needs to be passed.
#        4. Sample usage: .\OODeployCP.ps1 -OOCentralURL 
#                         https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName 
#                         admin -Passwd 123 -ContentPackName NAS –
#                         PathToContentPackJarFile C:\temp\NAS-1.0.0.jar
#        5. Parameter explanation:
#           OOCentralURL: URL to access OO Central UI. This URL can be either
#                         http or https depending on how OO is setup in your 
#                         environment.
#           UserName: OO central username that has privileges to deploy OO
#                     content pack.
#           Password: Password for the user to login to OO Central 
#                     Application.
#           ContentPackName: Any meaningful name for the content that you 
#                            are deploying to OO
#           PathToContentPackJarFile: Full path to the OO content pack jar
#                                     file. 


# Validate input parameters for NULL, empty and mandatory conditions.
param (
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Passwd,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$ContentPackName,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$PathToContentPackJarFile    
)


# Returns true if supplied object and/or string is NULL or empty
function IsNull($object) {
    if ($object -eq $null) {
        return $true
    }

    if ($object -is [String] -and $object -eq [String]::Empty) {
        return $true
    }
    return $false
}

# Validate format of supplied OO Central URL
$uri = $OOCentralURL -as [System.URI]
if (-Not (($uri.AbsoluteURI -ne $null) -and ($uri.Scheme -eq 'http' -or $uri.Scheme -eq 'https') -and ($uri.AbsoluteURI.Substring($uri.AbsoluteURI.Length - 3) -eq '/oo') ) ){
    throw 'The supplied OO central URL: ' + '"' + $OOCentralURL + '"' + ' is invalid. Format of OO Central URLs are https://&lt;OOCentralFQDNorIP&gt;:&lt;Port&gt;/oo or http://&lt;OOCentralFQDNorIP&gt;:&lt;Port&gt;/oo'
}

# Trusts all certificates including self-signed root certificates
# generated by OO
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12

# Validates supplied OO content pack jar file 
if ( -not (Test-Path "$PathToContentPackJarFile")) {
    throw 'File ' + $PathToContentPackJarFile + ' Does not exist'
}  
elseif (-not (Test-Path "$PathToContentPackJarFile" -PathType Leaf)){
    throw $PathToContentPackJarFile + ' is not a file'
}
elseif (($PathToContentPackJarFile.Substring($PathToContentPackJarFile.Length - 4)) -ne '.jar'){
    throw $PathToContentPackJarFile + ' does not have .jar extension'
} 

# Create authorization header value using supplied OO Central user name 
# and password. This authorization header value would be used in REST API 
# calls to OO Central Application.

$AuthPlainText = $UserName + ':' + $Passwd
$AuthPlainTextBytes = [System.Text.Encoding]::UTF8.GetBytes($AuthPlainText)
$AuthEncodedText =[System.Convert]::ToBase64String($AuthPlainTextBytes)
$AuthHeaderValue = "Basic $AuthEncodedText"

# OO requires cross reference token to be able to perform 
# create, delete or update operations.
# Cross reference token from OO can be obtained by making a 
# GET REST API call to any one of the valid OO REST URIs.
# Make a GET REST API call to OO and store session information.

$GetRequestURL = $OOCentralURL + '/rest/v2/version'
try{
    $GetReqWebResponse = Invoke-WebRequest -Method Get -Uri $GetRequestURL -Headers @{ 'Authorization' = $AuthHeaderValue  } -SessionVariable 'WebSession'
}
catch{
    If (IsNull($GetReqWebResponse)) {
        throw $($PSItem.ToString()) 
    }
    else {
        throw 'Response code is ' + $GetReqWebResponse.StatusCode + $($PSItem.ToString())
    }
}

If (IsNull($WebSession)) {
    throw 'Cannot open web session to the OO Central Application'
}

# Retrieve cross reference token cookie value from the web session
# that was opened in GET call previously.

$Cookies = $WebSession.Cookies.GetCookies($GetRequestURL) 

If (IsNull($Cookies)) {
    throw 'Unable to retrieve cookies from GET request to OO Central Application'
}

foreach ($cookie in $Cookies) { 
      if ($($cookie.name) -eq "X-CSRF-TOKEN-OO") {
        $xcsrfToken = $($cookie.value)
        break;        
     }     
}

If (IsNull($xcsrfToken)) {
    throw 'X-CSRF-TOKEN-OO cookie is null or empty'
}

# Construct OO deployment URI using the supplied content pack name
$deployURL = $OOCentralURL + '/rest/v2/content-packs/' + $ContentPackName

# Form request headers to be used in a PUT call to deploy 
# content pack to OO Central Application.
$headers = @{
    'Content-Type' = 'application/octet-stream'
    'accept' = 'application/json'
    'Authorization' = $AuthHeaderValue
    'X-CSRF-TOKEN' = $xcsrfToken
}

# OO deploy content pack API requires that entire request body
# consist of content of "OO content pack" jar file
$ooContentPackBytes = [System.IO.File]::ReadAllBytes($PathToContentPackJarFile)

# Deploy OO Content Pack to OO Central Server by making a 
# PUT REST API call to OO
try{
    $PutReqWebResponse = Invoke-WebRequest -Method Put -Uri $deployURL -Headers $headers -Body $ooContentPackBytes -WebSession $WebSession  
}
catch{
    # Something went wrong
	If (IsNull($PutReqWebResponse)) {
        throw $($PSItem.ToString()) 
    }
    else {
        throw 'Response code is ' + $PutReqWebResponse.StatusCode + $($PSItem.ToString())
    }    
}

# Display response message from deploy content pack request to OO
If (-Not (IsNull($PutReqWebResponse))){
    $JSONResponse = ConvertFrom-Json -InputObject $PutReqWebResponse.Content
    Write-Host 'Response code: '$PutReqWebResponse.StatusCode ':'$JSONResponse.contentPackResponses."$ContentPackName.jar".responses.message
}

<br></pre><!--<source-->
