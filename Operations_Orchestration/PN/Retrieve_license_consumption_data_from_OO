&lt;p class="MsoNormal"&gt;Micro Focus Operations Orchestration (OO) licenses are sold
in packs of 10 units. A unit of licensing provides entitlement to orchestrate
various nodes in a pre-defined ratio. This pre-defined ratio defines how many
virtual machine nodes, server, storage or network nodes are entitled in a 10
unit license. For example, as of July 2019, a 10 unit license entitles 10
server nodes or 10 storage nodes or 20 virtual machine nodes, etc. This
pre-defined ratio of unit to nodes is subject to change.&amp;nbsp; Work with your sales representative and
account management team to obtain latest unit to nodes ratio. &amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;Enterprises using OO product would like to
proactively monitor their license consumption. Based on current license usage,
enterprises may acquire more licenses to be in compliant with license
agreements. Enterprises have to perform the following steps to determine
current license usage:&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;

&lt;p class="MsoNormal" style="margin-left:.25in"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;

&lt;p class="MsoNormal" style="margin-left:.25in"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;

&lt;p class="MsoNormal" style="margin-left:.25in"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Obtain a list of orchestrated nodes in OO.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Based on node IP address or hostname, categorize node into node types such as server node, storage node, virtual machine node, etc.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;For each node type, determine node count.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Based on pre-defined unit to node type ratio, determine current license usage.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font face="Calibri, sans-serif"&gt;&lt;span style="font-size: 14.6667px;"&gt;This article shows a sample power shell script that can be used to retrieve a list of orchestrated nodes in OO. This script assists in performing step 1 of determining current license usage. Steps 2, 3 and 4 of license determination have to be performed manually. This script can be further enhanced to perform additional checks required for your environment, to improve performance, to use as a reference to develop it in your preferred programming language, to use as a reference to make other OO REST API calls, etc. At a high level, this script performs the following:&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Validates the following input values: OO Central Application URL, OO Central username, OO Central user password, CSV file path&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Retrieves a list of orchestrated nodes from OO.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Displays total number of orchestrated nodes.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Writes list of orchestrated nodes to a csv file.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font face="Calibri, sans-serif"&gt;&lt;span style="font-size: 14.6667px;"&gt;To run this script, follow the steps below:&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Log on to a system running windows operating system.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Open a text editor.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Copy contents of this script to the text editor. Save the file as “OOGetNodesForLicenseCount.ps1”.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14.6667px; font-family: Calibri, sans-serif; letter-spacing: 0.2px; background-color: transparent;"&gt;Open windows power shell. Navigate to the directory containing this power shell script.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Calibri, sans-serif" style="font-size: inherit; letter-spacing: 0.2px; background-color: transparent;"&gt;&lt;span style="font-size: 14.6667px;"&gt;Run the “OOGetNodesForLicenseCount.ps1” powershell script as follows:&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;span style="font-size: inherit; letter-spacing: 0.2px; background-color: transparent;"&gt;.\OOGetNodesForLicenseCount.ps1 -OOCentralURL https://&amp;lt;OOCentralHostName&amp;gt;:&amp;lt;Port&amp;gt;/oo -UserName&amp;nbsp; admin -Passwd 123 -outCSVFile C:\temp\orchestratedNodeList.csv&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;pre&gt;# File name: OOGetNodesForLicenseCount.ps1
#
# Purpose: 1. Gets a list of orchestrated nodes from OO Central Application. 
#          2. Displays number of orchestrated nodes.
#          3. Writes each of the orchestrated node and number of times 
#             it was orchestrated by OO to a supplied CSV file.
#          4. The CSV file can be used to determine number of orchestrated 
#             nodes for each node type and OO license compliance status.
#          5. Use as-is. Not officially supported through Micro Focus.
#
# Limitations: 1. Does not use proxy. If your environment requires proxy to 
#                 connect to the OO Central Application, enhance this script
#                 to accomodate web requests through proxy. 
#
# Usage: 1. Runs on Windows OS and it requires Windows Powershell on the
#           operating system. Copy this script to a directory on the windows
#           server/workstation/laptop.
#        2. Open powershell window 
#        3. Run Get-Help .\OOGetNodesForLicenseCount.ps1 to get a list of 
#           parameters that needs to be passed.
#        4. Sample usage: .\OOGetNodesForLicenseCount.ps1 -OOCentralURL 
#                         https://&amp;lt;OOCentralHostName&amp;gt;:&amp;lt;Port&amp;gt;/oo -UserName 
#                         admin -Passwd 123 -outCSVFile 
#                         C:\temp\OONodesForLicenseCount
#                          
#        5. Parameter explanation:
#           OOCentralURL: URL to access OO Central UI. This URL can be either
#                         http or https depending on how OO is setup in your 
#                         environment.
#           UserName: OO central username with administrator privileges
#           Password: Password for the user to login to OO Central 
#                     Application.
#           outCSVFile: Absolute path to the CSV file to which orchestrated 
#                       node list has to be written 


# Validate input parameters for NULL, empty and mandatory conditions.
param (
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Passwd,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$outCSVFile    
)


# Returns true if supplied object and/or string is NULL or empty
function IsNull($object) {
    if ($object -eq $null) {
        return $true
    }

    if ($object -is [String] -and $object -eq [String]::Empty) {
        return $true
    }
    return $false
}

# Validate format of supplied OO Central URL
$uri = $OOCentralURL -as [System.URI]
if (-Not (($uri.AbsoluteURI -ne $null) -and ($uri.Scheme -eq 'http' -or $uri.Scheme -eq 'https') -and ($uri.AbsoluteURI.Substring($uri.AbsoluteURI.Length - 3) -eq '/oo') ) ){
    throw 'The supplied OO central URL: ' + '"' + $OOCentralURL + '"' + ' is invalid. Format of OO Central URLs are https://&amp;lt;OOCentralFQDNorIP&amp;gt;:&amp;lt;Port&amp;gt;/oo or http://&amp;lt;OOCentralFQDNorIP&amp;gt;:&amp;lt;Port&amp;gt;/oo'
}

# Trusts all certificates including self-signed root certificates
# generated by OO
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12

# Validate supplied path to CSV file
if ( -not [System.IO.Path]::IsPathRooted($outCSVFile)) {
	throw 'Supply absolute path to the csv file'
}
$parentPath = Split-Path -Path $outCSVFile
if (-not (Test-Path "$parentPath" -PathType Container)){
    throw 'Path to ' + $outCSVFile + ' does not exist'
}
elseif (($outCSVFile.Substring($outCSVFile.Length - 4)) -ne '.csv'){
    throw $outCSVFile + ' does not have .csv extension'
}

# Create authorization header value using supplied OO Central user name 
# and password. This authorization header value is used in REST API 
# calls to OO Central Application.

$AuthPlainText = $UserName + ':' + $Passwd
$AuthPlainTextBytes = [System.Text.Encoding]::UTF8.GetBytes($AuthPlainText)
$AuthEncodedText =[System.Convert]::ToBase64String($AuthPlainTextBytes)
$AuthHeaderValue = "Basic $AuthEncodedText"

# Set page size to a large number so that all nodes are retrieved in one GET call.
$pageSize = 100000000

$headers = @{
    'accept' = 'application/json'
    'Authorization' = $AuthHeaderValue
    'pageSize' = $pageSize
}


# Make a REST API call to OO to retrieve orchestrated node information

$GetRequestURL = $OOCentralURL + '/rest/v2/targets/all'
try{
    $GetReqWebResponse = Invoke-WebRequest -Method Get -Uri $GetRequestURL -Headers $headers -SessionVariable 'WebSession'
}
catch{
    If (IsNull($GetReqWebResponse)) {
        throw $($PSItem.ToString()) 
    }
    else {
        throw 'Response code is ' + $GetReqWebResponse.StatusCode + $($PSItem.ToString())
    }
}

If (IsNull($WebSession)) {
    throw 'Cannot open web session to the OO Central Application'
}

# Display number of orchestrated nodes and write node information to CSV file
If (-Not (IsNull($GetReqWebResponse))){
    $OrchestratedNodes = ConvertFrom-Json -InputObject $GetReqWebResponse.Content
    Write-Host 'Total number of nodes orchestrated by OO: '$OrchestratedNodes.length
	$OrchestratedNodes | Select-Object -Property target, count | Export-CSV $outCSVFile -NoTypeInformation
	Write-Host 'Information about nodes orchestrated by OO has been made available at the following file' $outCSVFile
}
else
{
	Write-Host 'OO Central Application returned a NULL response '
}
&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;