<html><p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Micro Focus Operations Orchestration (OO) uses business intelligence available in a content pack to automate certain IT processes. Business intelligence inside a content pack is defined in the form of flows. A flow is the composition of steps and transitions forming a set of actions that are linked by decision-making logic to automate tasks. When a flow is launched in OO, an instance of that flow definition is executed. An OO flow execution may reach one of the following statuses depending on run time circumstances: PAUSED, PENDING, CANCELED, COMPLETED, RUNNING and SYSTEM_FAILURE. An OO flow might pause if that flow requires certain user inputs or if there are no workers in worker group, etc. A long running OO flow might be canceled by the administrator. An OO flow under normal conditions is in “running” status and reaches “completion” status after flow execution is complete. </span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Some of the use cases that can be achieved by retrieving a list of OO flow executions that are in each status are as follows:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">An OO administrator can quickly identify a list of paused and pending OO flows, investigate any underlying issues and resume those paused and pending OO flows.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Identify and cancel OO flow executions that have been running for a long period of time. OO flow executions may run for a longer period due to various reasons such as environmental issues, coding issues, waiting on dependencies, etc. </span></span></span></li>
</ol>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The following options are available in OO to retrieve a list of flow executions by its status:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">OO Central User Interface (UI)</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Database query</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">REST APIs</span></span></span></li>
</ol>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><b>OO Central UI</b></span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Follow the steps below to retrieve a list of OO flow executions by its status:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Login to OO Central UI</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Navigate to Run Management -&gt; Run Explorer</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">A list of OO flows is displayed.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Use the “status” filter to display OO flow executions in each status</span></span></span></li>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Use the “Start Time” filter to adjust time periods to retrieve additional OO flow executions in each status. By default, OO does not display all OO flow executions.</span></span></span></li>
</ol>

<p style="margin-bottom:11px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/8/88/OO-RetrieveFlowExecutionsByItsStatus.PNG" height="407" hspace="0" src="/mediawiki/images/pn_images/pn_image_5fa586958a4ff5.01529552.png" style="width: 800px; height: 407px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><b>Database query</b></span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">OO flow execution status is stored in the "OO_EXECUTION_SUMMARY" table.</span></span></span></p>

<ol>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Run the following SQL Query to retrieve flow executions in each status:</span></span></span></li>
</ol>

<pre><code>select execution_id, execution_name, status from oo_execution_summary where status = 'Replace with one of the valid status values' and start_time_long &gt;= &lt;Replace with UNIX GMT epoch time in milliseconds&gt;;</code></pre>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The “execution_id” column contains OO flow execution ID. The “execution_name” column contains OO flow execution name. The valid status values are CANCELED, COMPLETED, PAUSED, PENDING, RUNNING and SYSTEM_FAILURE. The "start_time_long" column contains date and time at which flow was started in UNIX GMT epoch time format. The Unix epoch time is the number of seconds that have elapsed since January 1, 1970 midnight UTC. There are websites and tools that allow you to convert human readable date to epoch and vice versa. Use appropriate "start_time_long" values. Try to limit the number of rows returned to a minimum by using UNIX GMT epoch time not older than 30 days. Otherwise, there may be a potential impact to database and OO performance.</span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The following screenshot shows query results from a sample query. In this sample query, a list of flow executions that are in “PAUSED” status and that were started after Friday, November 6, 2020 3:01:15 AM GMT was retrieved.&nbsp; </span></span></span></p>

<p style="margin-bottom:11px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/5/54/OO-RetrieveFlowExecutionsByItsStatus-SQLQuery.PNG" height="200" hspace="0" src="/mediawiki/images/pn_images/pn_image_5fa58695e3ea84.48139424.png" style="width: 800px; height: 200px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><b>REST APIs</b></span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">This article shows a Microsoft PowerShell script that uses REST APIs to </span></span></span></p>

<ul>
	<li><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Retrieve a list of OO flow executions that are in each status.</span></span></span></li>
	<li style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Writes retrieved list of OO flow execution data to the supplied CSV file.&nbsp; </span></span></span></li>
</ul>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Following is the sample CSV output generated by the script:</span></span></span></p>

<p style="margin-bottom:11px"><img alt="" border="0" file="https://docs.microfocus.com/mediawiki/images/2/2d/OO-RetrieveFlowExecutionsByItsStatus-CSV.PNG" height="126" hspace="0" src="/mediawiki/images/pn_images/pn_image_5fa589a46d0c89.36398011.png" style="width: 800px; height: 126px; margin: 0px; border: 0px solid black;" vspace="0" width="800"></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">The generated CSV file contains the following columns:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Flow execution ID: A unique ID assigned by OO for each run of a routine task/OO flow. </span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Flow execution status: Status of OO flow execution.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Flow execution result type: Result type further classifies OO flow execution status. For example, RESOLVED and ERROR are the result types for a flow execution that is in “COMPLETED” status. The “flow execution result type” column may contain no values for certain flow execution statuses such as “PENDING”, “PAUSED”, etc.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Flow execution start time: Date and time in UTC at which flow execution was started.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Flow execution end time: Date and time in UTC at which flow execution was ended. </span></span></span></li>
</ol>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Script caveats:</span></span></span></p>

<ul>
	<li style="margin-bottom:11px; margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">By default, the script retrieves a list of flow executions that are in a given status and that were started in the last 7 days. Do NOT adjust DAYS_TO_RETRIEVE constant to a very large number, as this might cause performance issues in OO.</span></span></span></li>
</ul>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">This script can be further enhanced to meet your coding style, implement organization specific requirements, perform additional checks required for your environment, to improve performance, to use as a reference to develop it in your preferred programming language, to use as a reference to make other OO REST API calls, etc. </span></span></span></p>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">To run this script, follow the steps below:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Log on to a system running a MS Windows operating system featuring MS PowerShell</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Open a text editor. </span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Navigate to the section "Powershell script -&nbsp;OOGetFlowExecutionsByItsStatus.ps1" at the bottom of this page. </span></span></span><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Copy contents of this script to the text editor. Save the file as "OOGetFlowExecutionsByItsStatus.ps1".</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Open MS Windows PowerShell. Navigate to the directory containing this PowerShell script.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Run the "OOGetFlowExecutionsByItsStatus.ps1" PowerShell script as follows: </span></span></span></li>
</ol>

<pre><code>.\OOGetFlowExecutionsByItsStatus.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Password &lt;AdminPassword&gt; -FlowExecStatus &lt;OOFlowExecutionStatus&gt; -OutCSVFile &lt;FullPathToCSVFile&gt; -AfterDateUTC "MM-DD-YYYY HH:MI:SS" -BeforeDateUTC "MM-DD-YYYY HH:MI:SS"</code></pre>

<ol start="6">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">Use the "OOCentralURL", "UserName" and "Password" parameters to connect to the OO Central Application. The "OOCentralURL", "UserName" and "Passwd" parameters are mandatory.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Use the "FlowExecStatus" parameter to retrieve flow executions that are in a particular execution status. The "FlowExecStatus" parameter is mandatory. The “FlowExecStatus” parameter must contain one of the following values: CANCELED, COMPLETED, PAUSED, PENDING, RUNNING and SYSTEM_FAILURE. The supplied values in this parameter are case insensitive.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Use the "OutCSVFile" parameter to write retrieved data to a CSV file. Supply absolute path to the CSV file. The "OutCSVFile" parameter is mandatory.</span></span></span></li>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:normal"><span style="font-family:Calibri,sans-serif">Use the "BeforeDateUTC" and "AfterDateUTC" parameter values to retrieve flow execution instances for a given date range. The "BeforeDateUTC" and "AfterDateUTC" parameters are optional. The "BeforeDateUTC" and "AfterDateUTC" parameters must contain date in the following format: "MM-DD-YYYY HH:MI:SS". If "BeforeDateUTC" and "AfterDateUTC" values are not supplied, the script retrieves a list of flow executions for the past 7 days. You can change "DAYS_TO_RETRIEVE" constant value in the script to change number of days of retrieved flow executions. Do not set "DAYS_TO_RETRIEVE" constant to a large number.</span></span></span></li>
</ol>

<p style="margin-bottom:11px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif"><b>Examples</b>:</span></span></span></p>

<ol>
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">To retrieve flow executions that were started 7 days ago and that are in “COMPLETED” status and to store retrieved data in the "C:\temp\OOFlowExecCompleted.csv" file, run the script as follows:</span></span></span></li>
</ol>

<pre><code>.\OOGetFlowExecutionsByItsStatus.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Password &lt;AdminPassword&gt; -FlowExecStatus COMPLETED -OutCSVFile C:\temp\OOFlowExecCompleted.csv</code></pre>

<ol start="2">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">To retrieve flow executions that are in “CANCELED” status and for those executions that were started after "01-01-2020 00:00:00 UTC" and before "01-06-2020 00:00:00 UTC" and to store retrieved data in the “C:\temp\OOFlowExecCanceled.csv” file, run the script as follows:</span></span></span></li>
</ol>

<pre><code>.\OOGetFlowExecutionsByItsStatus.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Password &lt;AdminPassword&gt; -FlowExecStatus CANCELED -OutCSVFile C:\temp\OOFlowExecCanceled.csv –AfterDateUTC "01-01-2020 00:00:00" –BeforeDateUTC "01-06-2020 00:00:00"</code></pre>

<ol start="3">
	<li style="margin-left:8px"><span style="font-size:11pt"><span style="line-height:107%"><span style="font-family:Calibri,sans-serif">To retrieve flow executions that are in “RUNNING” status and for those executions that were started 7 days before "01-06-2020 00:00:00 UTC" and to store retrieved data in the “C:\temp\OOFlowExecRunningLong.csv” file, run the script as follows:</span></span></span></li>
</ol>

<pre><code>.\OOGetFlowExecutionsByItsStatus.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Password &lt;AdminPassword&gt; -FlowExecStatus RUNNING -OutCSVFile C:\temp\ OOFlowExecRunningLong.csv –BeforeDateUTC "01-06-2020 00:00:00"</code></pre>

<p></p>

<p><strong>Powershell Script - OOGetFlowExecutionsByItsStatus.ps1</strong></p>

<pre><code># File name: OOGetFlowExecutionsByItsStatus.ps1
#
# Purpose: 1. Retrieves a list of flow executions based on supplied status.             
#          2. Writes retrieved data to supplied CSV file.        
#          3. Use as-is. Not officially supported through Micro Focus.
#
# Limitations: 1. Does not use proxy. If your environment requires proxy to 
#                 connect to the OO Central Application, enhance this script
#                 to accommodate web requests through proxy. 
#
# Usage: 1. Runs on Windows OS and it requires Windows Powershell on the
#           operating system. Copy this script to a directory on the windows
#           server/workstation/laptop.
#        2. Open powershell window 
#        3. Run Get-Help .\OOGetFlowExecutionsByItsStatus.ps1 to get a list of parameters that
#           needs to be passed.
#        4. Sample usage: .\OOGetFlowExecutionsByItsStatus.ps1 -OOCentralURL 
#                         https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Password &lt;AdminPassword&gt;
#                         -FlowExecStatus COMPLETED -OutCSVFile C:\temp\OOFlowExecsByItsStatus.csv 
#                         -AfterDateUTC "01-01-2020 00:00:00" -BeforeDateUTC "01-08-2020 00:00:00" 
#        5. Parameter explanation:
#           OOCentralURL:   URL to access OO Central UI. This URL can be either http or https depending 
#                           on how OO is setup in your environment. OOCentralURL parameter is mandatory.
#           UserName:       OO central username with administrator privileges.
#                           UserName parameter is mandatory.
#           Password:       Password for the user to login to OO Central 
#                           Application. Password parameter is mandatory.
#           FlowExecStatus: Flow execution status. Valid values are CANCELED,COMPLETED,PAUSED,PENDING,RUNNING and SYSTEM_FAILURE.
#                           Flow execution status parameter is mandatory. 
#           OutCSVFile:     Supply absolute path to the CSV file to which retrieved data has to be written.
#                           OutCSVFile parameter is mandatory.  
#           AfterDateUTC:   Retrieves flow execution data for the flows that were started after supplied date.
#                           Date and time in UTC in the following format: MM-DD-YYYY HH24:MI:SS. 
#                           Example 08-20-2019 02:01:09. AfterDateUTC parameter is optional.
#                           If no value is specified, defaults to "DAYS_TO_RETRIEVE" days before the BeforeDateUTC.
#                           By default, DAYS_TO_RETRIEVE is set to 7 days.                           
#           BeforeDateUTC:  Retrieves flow execution data for the flows that were started before supplied date. 
#                           Date and time in UTC in the following format: MM-DD-YYYY HH24:MI:SS. 
#                           Example 08-20-2019 02:01:09. BeforeDateUTC parameter is optional.
#                           If no value is specified, defaults to current date and time.
                           

# Validate input parameters for NULL, empty and mandatory conditions.
param (
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Password,
	[Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$FlowExecStatus,
	[Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OutCSVFile, 	
	[Parameter(Mandatory=$false)][ValidateNotNullOrEmpty()][string]$AfterDateUTC,
    [Parameter(Mandatory=$false)][ValidateNotNullOrEmpty()][string]$BeforeDateUTC               
)

# Default number of days to retrieve flow execution inputs, outputs and their values
Set-Variable DAYS_TO_RETRIEVE -option Constant -value 7

# Do NOT change the following values. Used in REST API calls to OO.
Set-Variable PAGE_NUM -option Constant -value 1
Set-Variable PAGE_SIZE -option Constant -value 1000000

# Returns true if supplied object and/or string is NULL or empty
function IsNull($object) {
    if ($object -eq $null) {
        return $true
    }

    if ($object -is [String] -and $object -eq [String]::Empty) {
        return $true
    }
    return $false
}

# Validate format of supplied OO Central URL
$uri = $OOCentralURL -as [System.URI]
if (-Not (($uri.AbsoluteURI -ne $null) -and ($uri.Scheme -eq 'http' -or $uri.Scheme -eq 'https') -and ($uri.AbsoluteURI.Substring($uri.AbsoluteURI.Length - 3) -eq '/oo') ) ){
    throw 'The supplied OO central URL: ' + '"' + $OOCentralURL + '"' + ' is invalid. Format of OO Central URLs are https://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo or http://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo'
}

# Validate flow execution status value
if ($PSBoundParameters.ContainsKey('FlowExecStatus')) {
    if ($FlowExecStatus -eq  "CANCELED"){
        $FlowExecStatus = "CANCELED"
    }
	elseif ($FlowExecStatus -eq  "COMPLETED"){
        $FlowExecStatus = "COMPLETED,COMPLETED_RESOLVED,COMPLETED_DIAGNOSED,COMPLETED_ERROR,COMPLETED_NO_ACTION_TAKEN,COMPLETED_CUSTOM"
    }
	elseif ($FlowExecStatus -eq  "PAUSED"){
        $FlowExecStatus = "PAUSED,PAUSED_USER_PAUSED,PAUSED_INPUT_REQUIRED,PAUSED_INPUT_REQUIRED_MANUAL_OP,PAUSED_DISPLAY,PAUSED_GATED_TRANSITION,PAUSED_HAND_OFF,PAUSED_INTERRUPT,PAUSED_NO_WORKERS_IN_GROUP,PAUSED_BRANCH_PAUSED"
    }
	elseif ($FlowExecStatus -eq  "PENDING"){
        $FlowExecStatus = "PENDING_PAUSE,PENDING_CANCEL"
    }
	elseif ($FlowExecStatus -eq  "RUNNING"){
        $FlowExecStatus = "RUNNING"
    }
	elseif ($FlowExecStatus -eq  "SYSTEM_FAILURE"){
        $FlowExecStatus = "SYSTEM_FAILURE"
    }
	else {
		throw "FlowExecStatus value must contain one of the following values: CANCELED, COMPLETED, PAUSED, PENDING, RUNNING AND SYSTEM_FAILURE"
	}
}

# Validate supplied path to CSV file
if ( -not [System.IO.Path]::IsPathRooted($OutCSVFile)) {
	throw 'Supply absolute path to the csv file'
}
$parentPath = Split-Path -Path $OutCSVFile
if (-not (Test-Path "$parentPath" -PathType Container)){
    throw 'Path to ' + $OutCSVFile + ' does not exist'
}
elseif (($OutCSVFile.Substring($OutCSVFile.Length - 4)) -ne '.csv'){
    throw $OutCSVFile + ' does not have .csv extension'
}

# Validate and initialize BeforeDateUTC and AfterDateUTC values
$inputDatePattern = 'MM\-dd\-yyyy HH:mm:ss'
$currTime = Get-Date (Get-Date).ToUniversalTime()

if ($PSBoundParameters.ContainsKey('BeforeDateUTC')) {
	try{
		$beforeDateObj = [DateTime]::ParseExact($BeforeDateUTC, $inputDatePattern, $null)
		$beforeDateUTCStr = "$BeforeDateUTC" + 'z'
        $beforeDateObj = Get-Date -Date $beforeDateUTCStr
        $beforeEpoch = [int64] (Get-Date $beforeDateObj.ToUniversalTime() -UFormat %s) * 1000
        if ($currTime -le $beforeDateObj){
            throw 'Before date must be earlier or the same as current date'
        }
	}
	catch {
		throw 'BeforeDate argument has either a future date or date format is incorrect. Expected date format is MM-DD-YYYY HH24:MI:SS. For example, 01-20-2018 01:00:00'
	}	
}

if ($PSBoundParameters.ContainsKey('AfterDateUTC')) {
	try{
		$afterDateObj = [DateTime]::ParseExact($AfterDateUTC, $inputDatePattern, $null)
		$afterDateUTCStr = "$AfterDateUTC" + 'z'
        $afterDateObj = Get-Date -Date $afterDateUTCStr
        $afterEpoch = [int64] (Get-Date $afterDateObj.ToUniversalTime() -UFormat %s) * 1000
        if ($currTime -le ($afterDateObj.ToUniversalTime())){
            throw 'After date must be earlier or the same as current date'
        }
	}
	catch {
		throw 'AfterDate argument has either a future date or date format is incorrect. Expected date format is MM-DD-YYYY HH24:MI:SS. For example, 01-20-2018 01:00:00'
	}	
}


if (-Not ($PSBoundParameters.ContainsKey('BeforeDateUTC')) -and (-Not ($PSBoundParameters.ContainsKey('AfterDateUTC'))) ) {
    $beforeEpoch = [int64] (Get-Date (Get-Date).ToUniversalTime() -UFormat %s) * 1000
    $afterEpoch = [int64] (Get-Date ((Get-Date).AddDays(-$DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000        
}
elseif (($PSBoundParameters.ContainsKey('BeforeDateUTC')) -and ($PSBoundParameters.ContainsKey('AfterDateUTC')) ) {
    if ($afterDateObj -ge $beforeDateObj) {
        throw 'After date must be earlier than before date'
    }
    else {
        if ($afterDateObj -lt ($beforeDateObj.AddDays(-$DAYS_TO_RETRIEVE))){
            throw "After date must be within $DAYS_TO_RETRIEVE days of before date"
        }
    }
}
elseif (($PSBoundParameters.ContainsKey('BeforeDateUTC')) -and (-Not ($PSBoundParameters.ContainsKey('AfterDateUTC'))) ) {
    $afterEpoch = [int64] (Get-Date ($beforeDateObj.AddDays(-$DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000
}
elseif ((-Not ($PSBoundParameters.ContainsKey('BeforeDateUTC'))) -and ($PSBoundParameters.ContainsKey('AfterDateUTC')) ) {
    if ($currTime -lt ($afterDateObj.AddDays($DAYS_TO_RETRIEVE).ToUniversalTime())){
        $beforeEpoch = [int64] (Get-Date (Get-Date).ToUniversalTime() -UFormat %s) * 1000            
    }
    else
    {
        $beforeEpoch = [int64] (Get-Date ($afterDateObj.AddDays($DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000
    }
}

# Trusts all certificates including self-signed root certificates
# generated by OO
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12

# Create authorization header value using supplied OO Central user name 
# and password. This authorization header value would be used in REST API 
# calls to OO Central Application.
$authPlainText = $UserName + ':' + $Password
$authPlainTextBytes = [System.Text.Encoding]::UTF8.GetBytes($authPlainText)
$authEncodedText =[System.Convert]::ToBase64String($authPlainTextBytes)
$authHeaderValue = "Basic $authEncodedText"

# Construct OO retrieve flow execution instances URI
$getFlowExecInstanceURL = $OOCentralURL + '/rest/v2/executions' + "?pageNum=$PAGE_NUM&amp;pageSize=$PAGE_SIZE&amp;startedBefore=$beforeEpoch&amp;startedAfter=$afterEpoch&amp;status=$FlowExecStatus"
try{
    $getFlowExecInstanceResponse = Invoke-WebRequest -Method Get -Uri $getFlowExecInstanceURL -Headers @{ 'Authorization' = $authHeaderValue  } -SessionVariable 'webSession'
}
catch{
    # Something went wrong
    Write-Host 'OO Central Application returned the following exception while retrieving execution instances'
    throw $($PSItem.Exception.Message)     
}
If (IsNull($webSession)) {
    throw 'Cannot open web session to the OO Central Application'
}

# Loop through flow execution instances and write flow execution data to the supplied CSV file.

$utcDate = (Get-Date -Date "1970-01-01 00:00:00Z").ToUniversalTime()
If (-Not (IsNull($getFlowExecInstanceResponse))){
    $flowExecInstances = ConvertFrom-Json -InputObject $getFlowExecInstanceResponse.Content    
    if ($flowExecInstances.length -gt 0) {
    	$instCount = 0
		foreach ($execInstance in $flowExecInstances)
		{
			$instCount = $instCount + 1
			
			$flowExecID = @{label="Flow execution ID";expression={$execInstance.executionId}}
			$flowExStatus = @{label="Flow execution status";expression={$execInstance.status}}
			$flowExecResultStatusType = @{label="Flow execution result type";expression={$execInstance.resultStatusType}}			
			$flowExecStartTime = @{label="Flow execution start time (MM-DD-YYYY HH:MM:SS UTC)";expression={if (IsNull($execInstance.startTime)){"Start time is not available"}else {if (($execInstance.startTime).ToString() -match "^[\d\.]+$"){if ((($execInstance.startTime).ToString()).length -gt 10) { Get-Date $utcDate.AddMilliseconds($execInstance.startTime) -UFormat "%m-%d-%Y %T" } else {Get-Date $utcDate.AddSeconds($execInstance.startTime) -UFormat "%m-%d-%Y %T"	}}else{	"Start time not available"}}}}
			$flowExecEndTime = @{label="Flow execution end time (MM-DD-YYYY HH:MM:SS UTC)";expression={if (IsNull($execInstance.endTime)){"End time is not available"}else {if (($execInstance.endTime).ToString() -match "^[\d\.]+$"){if ((($execInstance.endTime).ToString()).length -gt 10) { Get-Date $utcDate.AddMilliseconds($execInstance.endTime) -UFormat "%m-%d-%Y %T" } else {Get-Date $utcDate.AddSeconds($execInstance.endTime) -UFormat "%m-%d-%Y %T"	}}else{	"End time not available"}}}}
			
			try{
				If ( $instCount -eq 1) {
					$execInstance | Select-Object -Property $flowExecID, $flowExStatus, $flowExecResultStatusType, $flowExecStartTime, $flowExecEndTime | Export-CSV $OutCSVFile -NoTypeInformation
				}
				else {
					$execInstance | Select-Object -Property $flowExecID, $flowExStatus, $flowExecResultStatusType, $flowExecStartTime, $flowExecEndTime | Export-CSV $OutCSVFile -Append -NoTypeInformation
				}
			}
			catch{
				# Something went wrong
				Write-Host "Exception occured while writing to the file $OutCSVFile"
				throw $($PSItem.Exception.Message)    
			}
						
		}
		if ($instCount -gt 0 -and [System.IO.File]::Exists($OutCSVFile) -and (Get-Item $OutCSVFile).length -gt 0) {
			Write-Host "Flow execution inputs, outputs and their values have been successfully written to the following file: $OutCSVFile"
		}
    }    
}
else
{
	Write-Host 'OO Central Application returned a NULL response'
}</code></pre>

<p></p>
</html>