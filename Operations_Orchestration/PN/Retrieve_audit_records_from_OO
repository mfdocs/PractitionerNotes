Micro Focus Operations Orchestration (OO) provides functionality to enable auditing of application events.&nbsp; By default, auditing is not enabled in OO. Auditing can be enabled in the security settings of OO Central Application user interface. Once auditing is enabled, OO tracks and records the following actions in the database:<div><br><div><div><ul><li>OO Central Application Server stop/start events</li><li>Audit configuration changes</li><li>Authentication and authorization related events such as logins, logouts, authentication failures, authorization failures, role changes, internal user changes, etc</li><li>Flow runs and schedule related changes</li><li>Content configuration and content deployment related events</li><li>System configuration related changes</li><li>Topology management changes such as RAS upgrades, worker related changes, etc.</li></ul><div><br></div><div>Auditing in OO help enterprises with the following:<br></div></div></div><div><div><ol><li>To comply with IT application security audit policies</li><li>To identify security breaches</li><li>To analyze chain of events that happened prior to failure</li><li>Troubleshooting problems</li></ol><div>This article shows a power shell script that can be used to retrieve a list of audit records from OO. This script can be further enhanced to meet your coding style, perform additional checks required for your environment, to improve performance, to use as a reference to develop it in your preferred programming language, to use as a reference to make other OO REST API calls, etc. At a high level, this script performs the following:<br></div></div></div><div><br></div><div><div><ul><li>Validates input values&nbsp;</li><li>Retrieves a list of audit records for a given date range from OO. If no date range is supplied, retrieves audit data for the past 7 days.&nbsp;</li><li>Writes audit records to a csv file.&nbsp;</li></ul></div></div><div><br></div><div>To run this script, follow the steps below:<br></div><div><br></div><div><div><ol><li><span style="background-color: transparent;">Log on to a system running windows operating system.</span></li><li>Open a text editor.&nbsp;</li><li>Copy contents of this script to the text editor. Save the file as “OOGetAuditRecords.ps1”.</li><li>Open windows power shell. Navigate to the directory containing this power shell script.</li><li>Run the “OOGetAuditRecords.ps1” powershell script as follows: .\OOGetAuditRecords.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Passwd &lt;AdminUserPassword&gt; -OutCSVFile C:\temp\hello.csv -BeforeDate 08-25-2019 -AfterDate 08-17-2019 -SortPref asc</li><li>Use “OOCentralURL”, “UserName” and “Passwd” parameters to connect to the OO Central Application. The “OOCentralURL”, “UserName” and “Passwd” parameters are mandatory.</li><li>Use “OutCSVFile” parameter to supply path to the csv file to which audit data has to be written. The “OutCSVFile” parameter is mandatory.</li><li>Use “BeforeDate” and “AfterDate” parameter values to retrieve audit data for a given date range. The “BeforeDate” and “AfterDate” parameters are optional. The “BeforeDate” and “AfterDate” parameters must contain date in the following format: MM-DD-YYYY. If “BeforeDate” and “AfterDate” values are not supplied, the script retrieves audit data for the past 7 days. You can change “DAYS_TO_RETRIEVE” constant value in the script to change number of days of retrieved audit data. Do not set “DAYS_TO_RETRIEVE” constant to a large number.</li><li>Use “SortPref” parameter to sort audit data either in ascending or descending order of audit time.&nbsp; By default, the script sorts audit data in descending audit time. The “SortPref” parameter can contain one of the following values: asc OR desc. The “SortPref” parameter is optional.</li></ol><div><br></div></div></div><pre># File name: OOGetAuditRecords.ps1
#
# Purpose: 1. Retrieves audit records from OO Central Application.
#          2. By default, retrieves 7 days of audit data. You can change DAYS_TO_RETRIEVE
#             constant value to change number of days of retrieved audit data. Do not set
#             this to a large number. 
#          3. Writes audit records to a supplied CSV file.
#          4. The CSV file can be used to analyze audit history.
#          5. Use as-is. Not officially supported through Micro Focus.
#
# Limitations: 1. Does not use proxy. If your environment requires proxy to 
#                 connect to the OO Central Application, enhance this script
#                 to accomodate web requests through proxy. 
#
# Usage: 1. Runs on Windows OS and it requires Windows Powershell on the
#           operating system. Copy this script to a directory on the windows
#           server/workstation/laptop.
#        2. Open powershell window 
#        3. Run Get-Help .\OOGetAuditRecords.ps1 to get a list of parameters that
#           needs to be passed.
#        4. Sample usage: .\OOGetAuditRecords.ps1 -OOCentralURL 
#                         https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Passwd 123
#                         -OutCSVFile C:\temp\OOAuditRecords.csv -BeforeDate 08-25-2019 
#                         -AfterDate 08-20-2019 -SortPref asc
#                          
#        5. Parameter explanation:
#           OOCentralURL: URL to access OO Central UI. This URL can be either http or https depending 
#                         on how OO is setup in your environment. OOCentralURL parameter is mandatory.
#           UserName:     OO central username with administrator privileges.
#                         UserName parameter is mandatory.
#           Password:     Password for the user to login to OO Central 
#                         Application. Password parameter is mandatory.
#           OutCSVFile:   Absolute path to the CSV file to which audit records have to be written. 
#                         OutCSVFile parameter is mandatory.
#           BeforeDate:   Audit records to retrieve before the supplied date in MM-DD-YYYY format.
#                         BeforeDate parameter is optional.
#           AfterDate:    Audit records to retrieve after the supplied date in MM-DD-YYYY format.
#                         AfterDate parameter is optional.
#           SortPref :    Sorts audit records either in ascending or descending order of audit time.  
#                         By default, sorts in descending audit time. 
#                         Can contain one of the following values: asc OR desc.
#                         SortPref parameter is optional. 
  


# Validate input parameters for NULL, empty and mandatory conditions.
param (
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Passwd,	
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OutCSVFile,
    [Parameter(Mandatory=$false)][ValidateNotNullOrEmpty()][string]$BeforeDate,
	[Parameter(Mandatory=$false)][ValidateNotNullOrEmpty()][string]$AfterDate,
    [Parameter(Mandatory=$false)][ValidateNotNullOrEmpty()][string]$SortPref    
)

# Default number of days to retrieve audit data
Set-Variable DAYS_TO_RETRIEVE -option Constant -value 7

# Returns true if supplied object and/or string is NULL or empty
function IsNull($object) {
    if ($object -eq $null) {
        return $true
    }

    if ($object -is [String] -and $object -eq [String]::Empty) {
        return $true
    }
    return $false
}

# Validate format of supplied OO Central URL
$uri = $OOCentralURL -as [System.URI]
if (-Not (($uri.AbsoluteURI -ne $null) -and ($uri.Scheme -eq 'http' -or $uri.Scheme -eq 'https') -and ($uri.AbsoluteURI.Substring($uri.AbsoluteURI.Length - 3) -eq '/oo') ) ){
    throw 'The OO central URL: ' + '"' + $OOCentralURL + '"' + ' is invalid. Format of OO Central URLs are https://&lt;OOCentralFQDNorIP&gt;:&lt;Port&gt;/oo or http://&lt;OOCentralFQDNorIP&gt;:&lt;Port&gt;/oo'
}

# Set sort preference
if ($PSBoundParameters.ContainsKey('SortPref')) {
    if ($SortPref -eq "asc") {
         $sortPrefBool = $false
    }
    elseif ($SortPref -eq "desc") {
        $sortPrefBool = $true
    }
    else{
        throw 'The SortPref attribute value must be either asc or desc'
    } 
}
else{
    $sortPrefBool = $true
}

# Validate and initialize BeforeDate and AfterDate values
$inputDatePattern = 'MM\-dd\-yyyy'
$currTime = Get-Date (Get-Date).ToUniversalTime()

if ($PSBoundParameters.ContainsKey('BeforeDate')) {
	try{
		$beforeDateObj = [DateTime]::ParseExact($BeforeDate, $inputDatePattern, $null)
        $beforeDateObj = Get-Date -Date "$BeforeDate 00:00:00Z"
        $beforeEpoch = [int64] (Get-Date $beforeDateObj.ToUniversalTime() -UFormat %s) * 1000
        if ($currTime -lt $beforeDateObj){
            throw 'Before date must be earlier or the same as current date'
        }
	}
	catch {
		throw 'BeforeDate argument has either a future date or date format is incorrect. Expected date format is MM-DD-YYYY. For example, 01-20-2018'
	}	
}


if ($PSBoundParameters.ContainsKey('AfterDate')) {
	try{
		$afterDateObj = [DateTime]::ParseExact($AfterDate, $inputDatePattern, $null)
        $afterDateObj = Get-Date -Date "$AfterDate 00:00:00Z"
        $afterEpoch = [int64] (Get-Date $afterDateObj.ToUniversalTime() -UFormat %s) * 1000
        if ($currTime -lt ($afterDateObj.ToUniversalTime())){
            throw 'After date must be earlier or the same as current date'
        }
	}
	catch {
		throw 'AfterDate argument has either a future date or date format is incorrect. Expected date format is MM-DD-YYYY. For example, 01-20-2018'
	}	
}


if (-Not ($PSBoundParameters.ContainsKey('BeforeDate')) -and (-Not ($PSBoundParameters.ContainsKey('AfterDate'))) ) {
    $beforeEpoch = [int64] (Get-Date (Get-Date).ToUniversalTime() -UFormat %s) * 1000
    $afterEpoch = [int64] (Get-Date ((Get-Date).AddDays(-$DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000        
}
elseif (($PSBoundParameters.ContainsKey('BeforeDate')) -and ($PSBoundParameters.ContainsKey('AfterDate')) ) {
    if ($afterDateObj -ge $beforeDateObj) {
        throw 'After date must be earlier than before date'
    }
    else {
        if ($afterDateObj -lt ($beforeDateObj.AddDays(-$DAYS_TO_RETRIEVE))){
            throw "After date must be within $DAYS_TO_RETRIEVE days of before date"
        }
    }
}
elseif (($PSBoundParameters.ContainsKey('BeforeDate')) -and (-Not ($PSBoundParameters.ContainsKey('AfterDate'))) ) {
    $afterEpoch = [int64] (Get-Date ($beforeDateObj.AddDays(-$DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000
}
elseif ((-Not ($PSBoundParameters.ContainsKey('BeforeDate'))) -and ($PSBoundParameters.ContainsKey('AfterDate')) ) {
    if ($currTime -lt ($afterDateObj.AddDays($DAYS_TO_RETRIEVE).ToUniversalTime())){
        $beforeEpoch = [int64] (Get-Date (Get-Date).ToUniversalTime() -UFormat %s) * 1000            
    }
    else
    {
        $beforeEpoch = [int64] (Get-Date ($afterDateObj.AddDays($DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000
    }
}


# Trusts all certificates including self-signed root certificates
# generated by OO
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12

# Validate supplied path to CSV file
if ( -not [System.IO.Path]::IsPathRooted($OutCSVFile)) {
	throw 'Supply absolute path to the csv file'
}
$parentPath = Split-Path -Path $OutCSVFile
if (-not (Test-Path "$parentPath" -PathType Container)){
    throw 'Path to ' + $OutCSVFile + ' does not exist'
}
elseif (($OutCSVFile.Substring($OutCSVFile.Length - 4)) -ne '.csv'){
    throw $OutCSVFile + ' does not have .csv extension'
}

# Create authorization header value using supplied OO Central user name 
# and password. This authorization header value is used in REST API 
# calls to OO Central Application.

$authPlainText = $UserName + ':' + $Passwd
$authPlainTextBytes = [System.Text.Encoding]::UTF8.GetBytes($authPlainText)
$authEncodedText =[System.Convert]::ToBase64String($authPlainTextBytes)
$authHeaderValue = "Basic $authEncodedText"

# Set page size to a large number so that all audit records are retrieved in one GET call.
$pageSize = 100000000


# Set request headers
$headers = @{
    'accept' = 'application/json'
    'Authorization' = $authHeaderValue    
}


# Make a REST API call to OO to retrieve audit records
$getRequestURL = $OOCentralURL + "/rest/v2/audit/records?sortDescending=$sortPrefBool&amp;pageSize=$pageSize&amp;before=$beforeEpoch&amp;after=$afterEpoch"
try{
    $getReqWebResponse = Invoke-WebRequest -Method Get -Uri $getRequestURL -Headers $headers
}
catch{
    # Something went wrong
    Write-Host 'OO Central Application returned the following exception while making a REST API call to retrieve audit records'
	throw $($PSItem.Exception.Message)     
}


# Write audit records to CSV file
$utcDate = (Get-Date -Date "1970-01-01 00:00:00Z").ToUniversalTime()
If (-Not (IsNull($getReqWebResponse))){
    $auditRecords = ConvertFrom-Json -InputObject $getReqWebResponse.Content
    if ($auditRecords.length -gt 0)
    {
     	$auditTime = @{label="Date and time (MM-DD-YYYY HH:MM:SS UTC)";expression={if (IsNull($_.time)){"Audit time not available"}else {if (($_.time).ToString() -match "^[\d\.]+$"){if ((($_.time).ToString()).length -gt 10) { Get-Date $utcDate.AddMilliseconds($_.time) -UFormat "%m-%d-%Y %T" } else {Get-Date $utcDate.AddSeconds($_.time) -UFormat "%m-%d-%Y %T"	}}else{	"Audit time not available"}}}}
        $auditRecords | Select-Object -Property $auditTime, type, group, subject, outcome, data |Export-CSV $OutCSVFile -NoTypeInformation
	    Write-Host 'Audit records have been exported to the following CSV file: ' $OutCSVFile
    }
    else
    {
        Write-Host 'No audit records found. Verify that auditing is enabled in OO. Try changing AfterDate and BeforeDate parameter values to retrieve audit data '
    }    
}
else
{
	Write-Host 'OO Central Application returned a NULL response'
}<br></pre><div><br></div></div>