Micro Focus Operations Orchestration (OO) uses business intelligence available in a content pack to automate certain IT processes. Business intelligence inside a content pack is defined in the form of flows. A flow is the composition of steps and transitions forming a set of actions that are linked by decision-making logic in order to automate tasks. For example, rebooting servers, applying patches on servers, health checks, troubleshooting, or any other repetitive IT support tasks. An OO flow has inputs and outputs. An OO flow is usually written as generically as possible and performs tasks on different objects based on its inputs and generates output.<div><br><div>An organization automating their routine tasks is interested in the following details:<br></div></div><div><div><ul><li>A list of objects that were orchestrated by routine tasks such as rebooting servers, password resets, etc in OO.&nbsp; Some of the example objects are a list of servers that were rebooted in the last week, a list of user ids for which passwords were reset in the last month, etc.&nbsp;</li><li>Outcome of routine tasks on those objects.</li></ul><div><br></div><div>A routine task such as "reboot server" correlates to a single flow definition in OO. For each invocation of the “reboot server” routine task, corresponding OO flow is launched with a different hostname as input for that OO flow. With each launch of OO flow, the flow is executed and its flow execution data is stored in the database. This flow execution data consists of flow inputs, flow outputs, step inputs and step outputs. Object data such as server hostname, user ids, etc is usually supplied as one of the flow inputs and routine task outcome is available as flow output or flow status. Organizations can retrieve a list of “objects acted upon” by routine tasks and their outcome by retrieving OO flow execution inputs, outputs and their values. The following options are available in OO to retrieve flow execution inputs, outputs and their values:<br></div></div></div><div><br></div><div><ol><li>Database query</li><li>REST APIs</li></ol><div><b>Database query</b></div></div><div><br></div><div>OO flow input data is stored in the "OO_EXECUTION_BOUND_INPUTS" table. OO flow output data is stored in the "OO_EXECUTION_BOUND_OUTPUTS" table. OO flow execution status is stored in the "OO_EXECUTION_SUMMARY" table.<br></div><div><br></div><div>Use the following steps to retrieve OO flow execution inputs, outputs and their values:<br></div><div><br></div><div><ol><li>Get flow UUID of routine task/flow from OO Central UI</li><ul><li>Login to OO Central UI</li><li>Navigate to Run Management -&gt; Flow Launcher. Click the desired routine task/OO flow:</li><li><span style="background-color: transparent;">Copy "ID" displayed on the right side of the pane.</span><span style="background-color: transparent;"><img src="./mediawiki/images/PN/OO-RetrieveFlowInputsAndOutputs-FlowUUID.png"><br></span></li></ul><li>Use the following SQL Query to retrieve flow execution inputs and their values:<br><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div><pre>select input_name, value, execution_id from oo_execution_bound_inputs <br>where execution_id IN (select execution_id from oo_execution_summary <br>where flow_uuid = 'Replace with flow UUID noted in step 1' and <br>start_time_long &gt;= &lt;Replace with UNIX GMT epoch time in milliseconds&gt; <br>and status = 'COMPLETED')<br></pre></div></blockquote><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div><div>The "start_time_long" column contains date and time at which flow was started in UNIX GMT epoch time format. The Unix epoch time is the number of seconds that have elapsed since January 1, 1970 midnight UTC. There are websites and tools that allow you to convert human readable date to epoch and vice versa. Use appropriate "start_time_long" values. Try to limit the number of rows returned to a minimum by using UNIX GMT epoch time not older than 30 days. Otherwise, there may be a potential impact to database and OO performance.</div></div><div><br></div></blockquote><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div><div>The following screenshot shows query results from a sample query. In this sample query, flow execution inputs and its values were retrieved for the "Reboot Server" flow executions that were started after 01/01/2020 00:00:00 GMT. The "Reboot Server" flow was run twice after 01/01/2020 00:00:00 GMT. During first invocation of reboot server flow, server1.xxx.net was rebooted and during second invocation of the reboot server flow, server2.xxx.net was rebooted.</div></div><div><br></div><div><img src="./mediawiki/images/PN/OO-RetrieveFlowInputsAndOutputs-InputQueryOutput.png"><br></div><div><br></div></blockquote></li><li>Use the following SQL Query to retrieve flow execution outputs and their values:<br><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div><pre>select output_name, value, execution_id from oo_execution_bound_outputs<br>where execution_id IN (select execution_id from oo_execution_summary <br>where flow_uuid = 'Replace with flow UUID noted in step 1' and <br>start_time_long &gt;= &lt;Replace with UNIX GMT epoch time in milliseconds&gt;<br>and status = 'COMPLETED')<br></pre></div></blockquote><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div><br></div></blockquote><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div><div>The following screenshot shows query results from a sample query. In this sample query, flow execution outputs and its values were retrieved for the "Reboot Server" flow executions that were started after 01/01/2020 00:00:00 GMT.&nbsp; The "Reboot Server" flow was run twice after 01/01/2020 00:00:00 GMT. On both invocations, reboot server flow was successful. In this sample "Reboot Server" flow, there were two outputs: returnCode and Result and both have a value of zero. Note that a flow may or may not have values assigned to outputs such as "returnCode" and "Result".&nbsp;&nbsp;</div></div><div><br></div><img src="./mediawiki/images/PN/OO-RetrieveFlowInputsAndOutputs-OutputQueryOutput.png"><div><br></div></blockquote></li></ol><div><b>REST APIs</b></div></div><div><br></div><div>This article shows a Microsoft PowerShell script that uses REST APIs to&nbsp;<br></div><div><br></div><div><div style=""><ul><li>Retrieve flow execution inputs, outputs and their values for the specified flow and for those flow executions that are in "completed" status.</li><li>Writes retrieved data to the supplied CSV file.&nbsp;</li></ul></div></div><div style=""><br></div><div style="">Following is the sample CSV output generated by the script:<br></div><div style=""><br></div><div style=""><img src="./mediawiki/images/PN/OO-RetrieveFlowInputsAndOutputs-CSVFileOutput.png"><br></div><div style=""><br></div><div style=""><br></div><div>The generated CSV file contains the following columns:</div><div><ol><li>Flow execution ID: A unique ID assigned by OO for each run of a routine task/OO flow. In this example, the OO flow (routine task) to reboot servers was run twice.</li><li>Flow execution start time: Date and time in UTC at which flow execution was started.</li><li>Flow execution end time: Date and time in UTC at which flow execution was ended.</li><li>Flow inputs and its values: A JSON string containing list of flow execution input names and values supplied to those inputs. This script can be further modified to retrieve specific inputs and their values depending on the specific routine task for which a report has to be generated.</li><li>Flow outputs and its values: A JSON string containing flow execution output names and its values. This script can be further modified to retrieve specific output and their values depending on the specific routine task for which a report has to be generated.<br></li></ol></div><div><br>Script
caveats:<br></div><div><ul><li>By default, the script retrieves flow execution inputs, outputs and its values for the flows that were run and completed in the last 7 days. Do NOT adjust DAYS_TO_RETRIEVE constant to a very large number, as this might cause performance issues in OO.</li></ul></div><div><br></div><div>This script can be further enhanced to meet your coding style, implement organization specific requirements, perform additional checks required for your environment, to improve performance, to use as a reference to develop it in your preferred programming language, to use as a reference to make other OO REST API calls, etc.</div><div><br></div><div>To run this script, follow the steps below:</div><div><div><ol><li>Log on to a system running a MS Windows operating system featuring MS PowerShell</li><li>Open a text editor.&nbsp;</li><li>Copy contents of this script to the text editor. Save the file as "OOGetFlowExecInputOutputValues.ps1".</li><li>Open MS Windows PowerShell. Navigate to the directory containing this PowerShell script.</li><li>Run the "OOGetFlowExecInputOutputValues.ps1" PowerShell script as follows: <br><br> .\OOGetFlowExecInputOutputValues.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Passwd &lt;AdminPassword&gt; -FlowUUID &lt;OOFlowUUID&gt; -OutCSVFile &lt;FullPathToCSVFile&gt; -AfterDateUTC "MM-DD-YYYY HH:MI:SS" -BeforeDateUTC "MM-DD-YYYY HH:MI:SS"&nbsp;<br><br></li><li>Use "OOCentralURL", "UserName" and "Passwd" parameters to connect to the OO Central Application. The "OOCentralURL", "UserName" and "Passwd" parameters are mandatory.</li><li>Use "FlowUUID" parameter to retrieve flow execution inputs, outputs and their values for a specific routine task (OO flow). The "FlowUUID" parameter is mandatory.</li><li>Use "OutCSVFile" parameter to write retrieved data to a CSV file. Supply absolute path to the CSV file. The "OutCSVFile" parameter is mandatory.</li><li>Use "BeforeDateUTC" and "AfterDateUTC" parameter values to retrieve flow execution inputs, outputs and their values for a given date range. The "BeforeDateUTC" and "AfterDateUTC" parameters are optional. The "BeforeDateUTC" and "AfterDateUTC" parameters must contain date in the following format: "MM-DD-YYYY HH:MI:SS". If "BeforeDateUTC" and "AfterDateUTC" values are not supplied, the script retrieves flow execution inputs, outputs and their values for the past 7 days. You can change "DAYS_TO_RETRIEVE" constant value in the script to change number of days of retrieved flow execution inputs, outputs and their values. Do not set "DAYS_TO_RETRIEVE" constant to a large number.</li></ol></div></div><div><br></div><div>Examples:</div><div><ol><li>To retrieve flow execution inputs, outputs and their values for the flow with UUID "7103caea-6b59-4f45-aa5d-e14838515ff1" and for those executions that were completed within last 7 days from current date and time and to store retrieved data in the "C:\temp\flowExecIO.csv" file, run the script as follows:&nbsp;<br><br>
.\OOGetFlowExecInputOutputValues.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Passwd &lt;AdminPassword&gt; -OutCSVFile C:\temp\flowExecIO.csv –FlowUUID 7103caea-6b59-4f45-aa5d-e14838515ff1<br><br></li><li>To retrieve flow execution inputs, outputs and their values for the flow with UUID "7103caea-6b59-4f45-aa5d-e14838515ff1" and for those executions that were completed after "01-01-2020 00:00:00 UTC" and before "01-06-2020 00:00:00 UTC" and to store retrieved data in the “C:\temp\flowExecIO.csv” file, run the script as follows:&nbsp;<br><br>.\OOGetFlowExecInputOutputValues.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Passwd &lt;AdminPassword&gt; -OutCSVFile C:\temp\flowExecIO.csv –FlowUUID 7103caea-6b59-4f45-aa5d-e14838515ff1 –AfterDateUTC "01-01-2020 00:00:00" –BeforeDateUTC "01-06-2020 00:00:00"<br></li></ol></div><div><br></div><pre># File name: OOGetFlowExecInputOutputValues.ps1
#
# Purpose: 1. Retrieve flow execution inputs, outputs and their values for supplied OO flow UUID.
#             and for those executions that are in completed state.
#          2. Writes retrieved data to supplied CSV file.        
#          3. Use as-is. Not officially supported through Micro Focus.
#
# Limitations: 1. Does not use proxy. If your environment requires proxy to 
#                 connect to the OO Central Application, enhance this script
#                 to accommodate web requests through proxy. 
#
# Usage: 1. Runs on Windows OS and it requires Windows Powershell on the
#           operating system. Copy this script to a directory on the windows
#           server/workstation/laptop.
#        2. Open powershell window 
#        3. Run Get-Help .\OOGetFlowExecInputOutputValues.ps1 to get a list of parameters that
#           needs to be passed.
#        4. Sample usage: .\OOGetFlowExecInputOutputValues.ps1 -OOCentralURL 
#                         https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName admin -Passwd &lt;AdminPassword&gt;
#                         -FlowUUID 434e6fa2-26bc-4e84-9e1f-0aa6946cf920 -OutCSVFile C:\temp\OOFlowIO.csv 
#                         -AfterDateUTC "01-01-2020 00:00:00" -BeforeDateUTC "01-08-2020 00:00:00" 
#        5. Parameter explanation:
#           OOCentralURL:   URL to access OO Central UI. This URL can be either http or https depending 
#                           on how OO is setup in your environment. OOCentralURL parameter is mandatory.
#           UserName:       OO central username with administrator privileges.
#                           UserName parameter is mandatory.
#           Password:       Password for the user to login to OO Central 
#                           Application. Password parameter is mandatory.
#           FlowUUID:       Routine task/OO flow UUID for which flow execution inputs, outputs, their values have to be retrieved.
#                           FlowUUID parameter is mandatory.
#           OutCSVFile:     Supply absolute path to the CSV file to which retrieved data has to be written.
#                           OutCSVFile parameter is mandatory.  
#           AfterDateUTC:   Retrieves flow execution data for the flows that were started after supplied date.
#                           Date and time in UTC in the following format: MM-DD-YYYY HH24:MI:SS. 
#                           Example 08-20-2019 02:01:09. AfterDateUTC parameter is optional.
#                           If no value is specified, defaults to "DAYS_TO_RETRIEVE" days before the BeforeDateUTC.
#                           By default, DAYS_TO_RETRIEVE is set to 7 days.                           
#           BeforeDateUTC:  Retrieves flow execution data for the flows that were started before supplied date. 
#                           Date and time in UTC in the following format: MM-DD-YYYY HH24:MI:SS. 
#                           Example 08-20-2019 02:01:09. BeforeDateUTC parameter is optional.
#                           If no value is specified, defaults to current date and time.
                           

# Validate input parameters for NULL, empty and mandatory conditions.
param (
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Passwd,
	[Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$FlowUUID,
	[Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OutCSVFile, 	
	[Parameter(Mandatory=$false)][ValidateNotNullOrEmpty()][string]$AfterDateUTC,
    [Parameter(Mandatory=$false)][ValidateNotNullOrEmpty()][string]$BeforeDateUTC               
)

# Default number of days to retrieve flow execution inputs, outputs and their values
Set-Variable DAYS_TO_RETRIEVE -option Constant -value 7

# Do NOT change the following values. Used in REST API calls to OO.
Set-Variable PAGE_NUM -option Constant -value 1
Set-Variable PAGE_SIZE -option Constant -value 1000000
Set-Variable FLOW_EXEC_STATUS -option Constant -value "COMPLETED,COMPLETED_RESOLVED"

# Returns true if supplied object and/or string is NULL or empty
function IsNull($object) {
    if ($object -eq $null) {
        return $true
    }

    if ($object -is [String] -and $object -eq [String]::Empty) {
        return $true
    }
    return $false
}

# Validate format of supplied OO Central URL
$uri = $OOCentralURL -as [System.URI]
if (-Not (($uri.AbsoluteURI -ne $null) -and ($uri.Scheme -eq 'http' -or $uri.Scheme -eq 'https') -and ($uri.AbsoluteURI.Substring($uri.AbsoluteURI.Length - 3) -eq '/oo') ) ){
    throw 'The supplied OO central URL: ' + '"' + $OOCentralURL + '"' + ' is invalid. Format of OO Central URLs are https://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo or http://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo'
}

# Validate FlowUUID
if ($PSBoundParameters.ContainsKey('FlowUUID')) {    
    $flowUUIDPattern = "^[a-zA-Z0-9\-]+$"
    if (-Not ($FlowUUID -match  $flowUUIDPattern)){
        throw "FlowUUID argument cannot contain characters other than a-z, A-Z, 0-9, and a hyphen"
    }    
}

# Validate supplied path to CSV file
if ( -not [System.IO.Path]::IsPathRooted($OutCSVFile)) {
	throw 'Supply absolute path to the csv file'
}
$parentPath = Split-Path -Path $OutCSVFile
if (-not (Test-Path "$parentPath" -PathType Container)){
    throw 'Path to ' + $OutCSVFile + ' does not exist'
}
elseif (($OutCSVFile.Substring($OutCSVFile.Length - 4)) -ne '.csv'){
    throw $OutCSVFile + ' does not have .csv extension'
}


# Validate and initialize BeforeDateUTC and AfterDateUTC values
$inputDatePattern = 'MM\-dd\-yyyy HH:mm:ss'
$currTime = Get-Date (Get-Date).ToUniversalTime()

if ($PSBoundParameters.ContainsKey('BeforeDateUTC')) {
	try{
		$beforeDateObj = [DateTime]::ParseExact($BeforeDateUTC, $inputDatePattern, $null)
		$beforeDateUTCStr = "$BeforeDateUTC" + 'z'
        $beforeDateObj = Get-Date -Date $beforeDateUTCStr
        $beforeEpoch = [int64] (Get-Date $beforeDateObj.ToUniversalTime() -UFormat %s) * 1000
        if ($currTime -le $beforeDateObj){
            throw 'Before date must be earlier or the same as current date'
        }
	}
	catch {
		throw 'BeforeDate argument has either a future date or date format is incorrect. Expected date format is MM-DD-YYYY HH24:MI:SS. For example, 01-20-2018 01:00:00'
	}	
}

if ($PSBoundParameters.ContainsKey('AfterDateUTC')) {
	try{
		$afterDateObj = [DateTime]::ParseExact($AfterDateUTC, $inputDatePattern, $null)
		$afterDateUTCStr = "$AfterDateUTC" + 'z'
        $afterDateObj = Get-Date -Date $afterDateUTCStr
        $afterEpoch = [int64] (Get-Date $afterDateObj.ToUniversalTime() -UFormat %s) * 1000
        if ($currTime -le ($afterDateObj.ToUniversalTime())){
            throw 'After date must be earlier or the same as current date'
        }
	}
	catch {
		throw 'AfterDate argument has either a future date or date format is incorrect. Expected date format is MM-DD-YYYY HH24:MI:SS. For example, 01-20-2018 01:00:00'
	}	
}


if (-Not ($PSBoundParameters.ContainsKey('BeforeDateUTC')) -and (-Not ($PSBoundParameters.ContainsKey('AfterDateUTC'))) ) {
    $beforeEpoch = [int64] (Get-Date (Get-Date).ToUniversalTime() -UFormat %s) * 1000
    $afterEpoch = [int64] (Get-Date ((Get-Date).AddDays(-$DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000        
}
elseif (($PSBoundParameters.ContainsKey('BeforeDateUTC')) -and ($PSBoundParameters.ContainsKey('AfterDateUTC')) ) {
    if ($afterDateObj -ge $beforeDateObj) {
        throw 'After date must be earlier than before date'
    }
    else {
        if ($afterDateObj -lt ($beforeDateObj.AddDays(-$DAYS_TO_RETRIEVE))){
            throw "After date must be within $DAYS_TO_RETRIEVE days of before date"
        }
    }
}
elseif (($PSBoundParameters.ContainsKey('BeforeDateUTC')) -and (-Not ($PSBoundParameters.ContainsKey('AfterDateUTC'))) ) {
    $afterEpoch = [int64] (Get-Date ($beforeDateObj.AddDays(-$DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000
}
elseif ((-Not ($PSBoundParameters.ContainsKey('BeforeDateUTC'))) -and ($PSBoundParameters.ContainsKey('AfterDateUTC')) ) {
    if ($currTime -lt ($afterDateObj.AddDays($DAYS_TO_RETRIEVE).ToUniversalTime())){
        $beforeEpoch = [int64] (Get-Date (Get-Date).ToUniversalTime() -UFormat %s) * 1000            
    }
    else
    {
        $beforeEpoch = [int64] (Get-Date ($afterDateObj.AddDays($DAYS_TO_RETRIEVE)).ToUniversalTime() -UFormat %s) * 1000
    }
}

# Trusts all certificates including self-signed root certificates
# generated by OO
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12

# Create authorization header value using supplied OO Central user name 
# and password. This authorization header value would be used in REST API 
# calls to OO Central Application.
$authPlainText = $UserName + ':' + $Passwd
$authPlainTextBytes = [System.Text.Encoding]::UTF8.GetBytes($authPlainText)
$authEncodedText =[System.Convert]::ToBase64String($authPlainTextBytes)
$authHeaderValue = "Basic $authEncodedText"

# Construct OO retrieve flow execution instances URI
$getFlowExecInstanceURL = $OOCentralURL + '/rest/v2/executions' + "?pageNum=$PAGE_NUM&amp;pageSize=$PAGE_SIZE&amp;flowUuid=$FlowUUID&amp;startedBefore=$beforeEpoch&amp;startedAfter=$afterEpoch&amp;status=$FLOW_EXEC_STATUS"
try{
    $getFlowExecInstanceResponse = Invoke-WebRequest -Method Get -Uri $getFlowExecInstanceURL -Headers @{ 'Authorization' = $authHeaderValue  } -SessionVariable 'webSession'
}
catch{
    # Something went wrong
    Write-Host 'OO Central Application returned the following exception while retrieving execution instances'
    throw $($PSItem.ToString())     
}
If (IsNull($webSession)) {
    throw 'Cannot open web session to the OO Central Application'
}

# Loop through flow execution instances and write their inputs, outputs and values to the supplied CSV file.

$utcDate = (Get-Date -Date "1970-01-01 00:00:00Z").ToUniversalTime()
If (-Not (IsNull($getFlowExecInstanceResponse))){
    $flowExecInstances = ConvertFrom-Json -InputObject $getFlowExecInstanceResponse.Content    
    if ($flowExecInstances.length -gt 0) {
    	$instCount = 0
		foreach ($execInstance in $flowExecInstances)
		{
			# Construct OO retrieve flow execution instances URI
			$getFlowExecIOURL = $OOCentralURL + '/rest/v2/executions/' + $execInstance.executionId + '/execution-log'

			try{
				$getFlowExecIOResponse = Invoke-WebRequest -Method Get -Uri $getFlowExecIOURL -Headers @{ 'Authorization' = $authHeaderValue  } -WebSession $webSession
			}
			catch{
				# Something went wrong
				Write-Host 'OO Central Application returned the following exception while retrieving execution instances'
				throw $($PSItem.ToString())     
			}
			If (IsNull($webSession)) {
				throw 'Cannot open web session to the OO Central Application'
			}
			If (-Not (IsNull($getFlowExecIOResponse))){
				$instCount = $instCount + 1
				$flowExecIO = ConvertFrom-Json -InputObject $getFlowExecIOResponse.Content
				$flowVars = $flowExecIO.flowVars | ConvertTo-Json
				$flowVars = @{label="Flow inputs and its values";expression={$flowExecIO.flowVars | ConvertTo-Json}}
				$flowExecID = @{label="Flow execution ID";expression={$flowExecIO.executionSummary.executionId}}
				$flowExecStartTime = @{label="Flow execution start time (MM-DD-YYYY HH:MM:SS UTC)";expression={if (("$flowExecIO.executionSummary.startTime").length -gt 10) {Get-Date $utcDate.AddMilliseconds($flowExecIO.executionSummary.startTime) -UFormat "%m-%d-%Y %T"} else {Get-Date $utcDate.AddSeconds($flowExecIO.executionSummary.startTime) -UFormat "%m-%d-%Y %T"}}}
				$flowExecEndTime = @{label="Flow execution end time (MM-DD-YYYY HH:MM:SS UTC)";expression={if (("$flowExecIO.executionSummary.endTime").length -gt 10) {Get-Date $utcDate.AddMilliseconds($flowExecIO.executionSummary.endTime) -UFormat "%m-%d-%Y %T"} else {Get-Date $utcDate.AddSeconds($flowExecIO.executionSummary.endTime) -UFormat "%m-%d-%Y %T"}}}
				$flowOutput = @{label="Flow outputs and its values";expression={$flowExecIO.flowOutput | ConvertTo-Json}}	
				
				try{
					If ( $instCount -eq 1) {
						$flowExecIO | Select-Object -Property $flowExecID, $flowExecStartTime, $flowExecEndTime, $flowVars, $flowOutput | Export-CSV $OutCSVFile -NoTypeInformation
					}
					else {
						$flowExecIO | Select-Object -Property $flowExecID, $flowExecStartTime, $flowExecEndTime, $flowVars, $flowOutput | Export-CSV $OutCSVFile -Append -NoTypeInformation
					}
				}
				catch{
					# Something went wrong
					Write-Host "Exception occured while writing to the file $OutCSVFile"
					throw $($PSItem.ToString())     
				}
			}			
		}
		if ($instCount -gt 0 -and [System.IO.File]::Exists($OutCSVFile) -and (Get-Item $OutCSVFile).length -gt 0) {
			Write-Host "Flow execution inputs, outputs and their values have been successfully written to the following file: $OutCSVFile"
		}
    }    
}
else
{
	Write-Host 'OO Central Application returned a NULL response'
}
</pre>
