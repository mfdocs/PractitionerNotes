Micro Focus Operations Orchestration (OO) uses business intelligence available in a content pack to automate certain IT processes. Following are the various categories of content packs that can be deployed onto an OO Central Application Server:<div><div><ol><li>Content packs supported by Micro Focus.&nbsp; Base content pack, database content pack, virtualization content pack are some of the examples of Micro Focus supported content packs.</li><li>Content packs contributed by Micro Focus community.</li><li>Custom content packs developed by enterprises. These custom content packs are typically built using content in Micro Focus supplied content packs.&nbsp;</li></ol><div>A content pack is uniquely identified by its name and its deployed version. Enterprises running OO often have separate environments for development, staging and production. Enterprises would like to keep deployed content packs identical across staging and production environments for the following reasons:<br></div></div></div><div><br></div><div><ul><li>Ensure that unauthorized content packs are not in production OO environment.</li><li>Ensure that only the tested content packs from staging environment are in production OO environment.</li><li>Confidently reproduce a production environment issue in staging environment. Eliminate issues due to content pack and version differences between environments.&nbsp;</li></ul><div><br></div><div><div>This article shows a power shell script that can be used to compare deployed content packs and their versions across two separate OO Central Application Server environments. This script can be further enhanced to meet your coding style, perform additional checks required for your environment, to improve performance, to use as a reference to develop it in your preferred programming language, to use as a reference to make other OO REST API calls, etc. At a high level, this script performs the following:</div><div><br></div><div><ul><li>Validates input values.&nbsp;</li><li>Compares content packs and their versions deployed on two separate OO Central Application server environments.</li><li>Writes a report that displays content packs that are identical in both environments and content packs that are in one environment but not in the other environment.</li></ul><div><div><br></div><div>Following is the sample report generated by the script:</div><div><br></div><pre>********** Sample report *********

Content packs deployed on OO Central AppServer1 but not on AppServer2
"Base","1.12.0"
"F5 BIG-IP","2.3.2"
"F5 BIG-IP LTM Load Balancer","17.9.0"

Content packs deployed on OO Central AppServer2 but not on AppServer1
"Base","1.15.0"
"Virtualization","1.16.3"
"VMware vCenter (CloudSlang)","1.2.5"
"VMWare vCenter Compute","16.07"
"VMWare vCenter Compute Seq","16.12"

Content packs deployed on both OO Central AppServer1 and AppServer2
"Amazon AWS (CloudSlang)","1.2.1"
"ARA OO [1.0.1]","1.0.4"
"AutoGenerate","1.0.0-SNAPSHOT"
"Base (CloudSlang)","1.2.3"
"Base Utility","17.9.9"

********** Sample report *********<br></pre><div><br></div></div></div></div></div><div><br></div><div><div>The generated report contains the following sections:&nbsp;</div><div><ol><li>Content packs deployed on OO Central AppServer1 but not on AppServer2</li><li>Content packs deployed on OO Central AppServer2 but not on AppServer1</li><li>Content packs deployed on both OO Central AppServer1 and AppServer2</li></ol><div>Within each section, content pack name and its version number delimited by a comma character is listed on a separate line. By using this report, OO administrators can take appropriate actions to ensure that their staging and production environments have identical content packs.<br></div></div></div><div><br></div><div><div>To run this script, follow the steps below:</div><div><ol><li>Log on to a system running windows operating system.</li><li>Open a text editor.&nbsp;</li><li>Copy contents of this script to the text editor. Save the file as “OOEnvCompareCP.ps1”.</li><li>Open windows power shell. Navigate to the directory containing this power shell script.</li><li>Run the “OOEnvCompareCP.ps1” powershell script as follows:&nbsp; <br> .\OOEnvCompareCP.ps1 –OOCentralURL1 https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName1 admin -Passwd1 &lt;AdminUserPassword&gt; OOCentralURL2 https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo –UserName2 admin –Passwd2 &lt;AdminUserPassword&gt; -OutDir C:\temp</li><li><span style="background-color: transparent;">Use “OOCentralURL1”, “UserName1” and “Passwd1” parameters to connect to the 1st OO Central Application. The “OOCentralURL1”, “UserName1” and “Passwd1” parameters are mandatory.</span></li><li><span style="background-color: transparent;">Use “OOCentralURL2”, “UserName2” and “Passwd2” parameters to connect to the 2nd OO Central Application. The “OOCentralURL2”, “UserName2” and “Passwd2” parameters are mandatory.</span></li><li><span style="background-color: transparent;">Use “OutDir” parameter to supply absolute path to the output directory. The “OutDir” parameter is mandatory. The script writes content pack comparison results to the “OOCPCompareResults.txt” file in the supplied output directory. The script also writes a list of content packs deployed in each OO environments to separate files in the supplied output directory.</span></li></ol><div><br></div></div></div><pre># File name: OOEnvCompareCP.ps1
#
# Purpose: 1. Compares installed content packs and their version numbers from two OO Central Application environments. 
#          2. Writes a list of installed content packs for each OO central application environments to separate CSV files.
#          3. Creates a report with similarities and difference in installed content packs of two OO Central Application environments.           
#          4. Use as-is. Not officially supported through Micro Focus.
#
# Limitations: 1. Does not use proxy. If your environment requires proxy to 
#                 connect to the OO Central Application, enhance this script
#                 to accomodate web requests through proxy. 
#
# Usage: 1. Runs on Windows OS and it requires Windows Powershell on the
#           operating system. Copy this script to a directory on the windows
#           server/workstation/laptop.
#        2. Open powershell window 
#        3. Run Get-Help .\OOEnvCompareCP.ps1 to get a list of parameters that
#           needs to be passed.
#        4. Sample usage: .\OOEnvCompareCP.ps1 -OOCentralURL1 
#                         https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName1 
#                         admin -Passwd1 &lt;AdminUserPassword&gt; -OOCentralURL2 https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName2 admin
#                         -Passwd2 &lt;AdminUserPassword&gt; -OutDir C:\temp
#                          
#        5. Parameter explanation:
#           OOCentralURL1: URL to access 1st OO Central Application. This URL can be either
#                          http or https depending on how OO is setup in your environment.
#           UserName1    : OO central username with administrator privileges to access 1st OO Central Application
#           Password1    : Password for the user to login to 1st OO Central Application.
#           OOCentralURL2: URL to access 2nd OO Central Application. This URL can be either
#                          http or https depending on how OO is setup in your environment.
#           UserName2    : OO central username with administrator privileges to access 2nd OO Central Application
#           Password2    : Password for the user to login to 2nd OO Central Application.
#           OutDir       : Absolute path to the directory in which content pack comparison report has to be generated.


# Validate input parameters for NULL, empty and mandatory conditions.
param (
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL1,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName1,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Passwd1,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL2,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName2,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Passwd2,
    [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OutDir    
)


# Returns true if supplied object and/or string is NULL or empty
function IsNull($object) {
    if ($object -eq $null) {
        return $true
    }

    if ($object -is [String] -and $object -eq [String]::Empty) {
        return $true
    }
    return $false
}

# Validate format of supplied OO Central URL
function IsURLNotValid($OOCentralURL) {
    $uri = $OOCentralURL -as [System.URI]
    if (-Not (($uri.AbsoluteURI -ne $null) -and ($uri.Scheme -eq 'http' -or $uri.Scheme -eq 'https') -and ($uri.AbsoluteURI.Substring($uri.AbsoluteURI.Length - 3) -eq '/oo') ) ){
        return $true
    }
    return $false
}

# Get hostname or IP address of OO Central Application Server
function GetHost($OOCentralURL) {
    $uri = $OOCentralURL -as [System.URI]
    return $uri.Host
}

# Create authorization header value using supplied OO Central user name 
# and password. This authorization header value is used in REST API 
# calls to OO Central Application.
function CreateAuthHeader($userName, $passwd) {    
    $authPlainText = $UserName + ':' + $Passwd
    $authPlainTextBytes = [System.Text.Encoding]::UTF8.GetBytes($authPlainText)
    $authEncodedText =[System.Convert]::ToBase64String($authPlainTextBytes)
    $authHeaderValue = "Basic $authEncodedText"
    return $authHeaderValue
}

# Make a REST API call to OO to retrieve deployed content packs
# Write retrieved content pack list to CSV file
function GetContentPacks($OOCentralURL, $ooCentralHost, $headers, $outCSVFile) {
    
    $getRequestURL = $OOCentralURL + "/rest/v2/content-packs"
    try{
        $getReqWebResponse = Invoke-WebRequest -Method Get -Uri $getRequestURL -Headers $headers -WebSession $webSession
    }
    catch{
        If (IsNull $getReqWebResponse) {
            Write-Host "Exception while connecting to OO Central Server: $ooCentralHost"
            throw $($PSItem.ToString()) 
        }
        else {
            throw "Response code from $ooCentralHost is " + $getReqWebResponse.StatusCode + $($PSItem.ToString())
        }
    }    
    If (-Not (IsNull $getReqWebResponse)){
        $contentPacks = ConvertFrom-Json -InputObject $getReqWebResponse.Content    
        Write-Host "Total number of content packs deployed on $ooCentralHost is:" $contentPacks.length
        if ($contentPacks.length -gt 0)
        {
    	    ($contentPacks | Sort-Object name | Select name, version | ConvertTo-Csv -NoTypeInformation).split("`n") | select -skip 1 | set-content $outCSVFile
	        Write-Host "List of content packs deployed on OO Central Application Server $ooCentralHost is available in the following file: $outCSVFile"
        }    
    }
    else
    {
	    Write-Host "OO Central Application $ooCentralHost returned a NULL response"
    }
}


If (IsURLNotValid $OOCentralURL1)
{
    throw 'The supplied OO central URL: ' + '"' + $OOCentralURL1 + '"' + ' is invalid. Format of OO Central URLs are https://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo or http://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo'
}

If (IsURLNotValid $OOCentralURL2)
{
    throw 'The supplied OO central URL: ' + '"' + $OOCentralURL2 + '"' + ' is invalid. Format of OO Central URLs are https://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo or http://&lt;OOCentralFQDNorIP&gt;&lt;:OptionalPort&gt;/oo'
}



# Validate supplied path to output directory
if ( -not [System.IO.Path]::IsPathRooted($OutDir)) {
	throw 'Supply absolute path to the output directory'
}
if (-not (Test-Path "$OutDir" -PathType Container)){
    throw 'Path to ' + $OutDir + ' does not exist'
}


# Create authorization header values for connecting to OO Central Application Servers.
$authHeaderValue1 = CreateAuthHeader $UserName1 $Passwd1
$authHeaderValue2 = CreateAuthHeader $UserName2 $Passwd2
$headers1 = @{
    'accept' = 'application/json'
    'Authorization' = $authHeaderValue1        
}
$headers2 = @{
    'accept' = 'application/json'
    'Authorization' = $authHeaderValue2    
}

$ooCentralHost1 = GetHost $OOCentralURL1 
$ooCentralHost2 = GetHost $OOCentralURL2

# Define output file names
$outCSVFile1 = $OutDir + "\$ooCentralHost1.csv"
$outCSVFile2 = $OutDir + "\$ooCentralHost2.csv"
$cpCompareResultsFile = $OutDir + "\OOCPCompareResults.txt"

# Trusts all certificates including self-signed root certificates generated by OO
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12

GetContentPacks $OOCentralURL1 $ooCentralHost1 $headers1 $outCSVFile1 
GetContentPacks $OOCentralURL2 $ooCentralHost2 $headers2 $outCSVFile2

# Compare content packs installed on two OO Central Application servers.
# Create a report with similarities and difference in installed content packs of two OO Central Application environments.
$results = Compare-Object -ReferenceObject $(Get-Content $outCSVFile1) -DifferenceObject $(Get-Content $outCSVFile2) -IncludeEqual
"Content packs deployed on OO Central $ooCentralHost1 but not on $ooCentralHost2" | Out-File $cpCompareResultsFile
"" | Out-File $cpCompareResultsFile -Append
$results | where { $_.SideIndicator -eq '&lt;='} | % { $_.InputObject } | Out-File $cpCompareResultsFile -Append
"" | Out-File $cpCompareResultsFile -Append
"Content packs deployed on OO Central $ooCentralHost2 but not on $ooCentralHost1" | Out-File $cpCompareResultsFile -Append
"" | Out-File $cpCompareResultsFile -Append
$results | where { $_.SideIndicator -eq '=&gt;'} | % { $_.InputObject } | Out-File $cpCompareResultsFile -Append
"" | Out-File $cpCompareResultsFile -Append
"Content packs deployed on both OO Central $ooCentralHost1 and $ooCentralHost2" | Out-File $cpCompareResultsFile -Append
"" | Out-File $cpCompareResultsFile -Append
$results | where { $_.SideIndicator -eq '=='} | % { $_.InputObject } | Out-File $cpCompareResultsFile -Append
Write-Host "Content pack comparison report is available at the following file: $cpCompareResultsFile"<br></pre>