<div>Micro Focus Operations Orchestration (OO) runs IT process automation on various nodes in an IT infrastructure. An orchestrated node is a node on which some type of operation was run by OO. Examples of operation includes, but not limited to, starting a service on a node, restarting a node, retrieving process list from a node, running a remote command on a node, submitting REST API call to an application running on a node, etc. Retrieving a list of orchestrated nodes from OO benefits enterprises in the following ways:</div><div>• Understand most frequently orchestrated physical nodes, virtual machine nodes, storage nodes, network nodes, applications, etc. Most frequently orchestrated nodes may be further classified as follows:</div><div>• Nodes having frequent issues that need correction.</div><div>• Nodes that are used as a jump server which hosts an application to run automation on other nodes.</div><div>• Nodes that host frequently used applications such as an LDAP or a corporate database to retrieve certain information.</div><div>• Nodes that are essential nodes. Usually, essential nodes are orchestrated a larger number of times compared to rest of the nodes.&nbsp;</div><div>• By classifying orchestrated nodes into physical, virtual, storage, network nodes, etc, OO license consumption data may be derived.This article shows a power shell script that can be used to retrieve a list of orchestrated nodes in OO. Orchestrated node list contains node name or node IP address and its corresponding number of times orchestrated by OO. This script can be further enhanced to meet your coding style, perform additional checks required for your environment, to improve performance, to use as a reference to develop it in your preferred programming language, to use as a reference to make other OO REST API calls, etc. At a high level, this script performs the following:</div><div>• Validates input values.</div><div>• Retrieves a list of orchestrated nodes from OO.</div><div>• Displays total number of orchestrated nodes.</div><div>• Writes list of orchestrated nodes to a csv file.To run this script, follow the steps below:</div><div>• Log on to a system running windows operating system.</div><div>• Open a text editor.&nbsp;</div><div>• Copy contents of this script to the text editor. Save the file as “OOGetOrchNodes.ps1”</div><div>• Open windows power shell. Navigate to the directory containing this power shell script.</div><div>• Run the “OOGetOrchNodes.ps1” powershell script as follows: .\OOGetOrchNodes.ps1 -OOCentralURL https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName&nbsp; admin -Passwd &lt;AdminUserPassword&gt; -outCSVFile C:\temp\orchestratedNodeList.csv</div><div>• Use “OOCentralURL”, “UserName” and “Passwd” parameters to connect to the OO Central Application. The “OOCentralURL”, “UserName” and “Passwd” parameters are mandatory.</div><div>• Use “OutCSVFile” parameter to supply path to the csv file to which orchestrated node data has to be written. The “OutCSVFile” parameter is mandatory.# File name: OOGetOrchNodes.ps1</div><div>#</div><div># Purpose: 1. Gets a list of orchestrated nodes from OO Central Application.&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2. Displays number of orchestrated nodes.</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. Writes each of the orchestrated node and number of times it was orchestrated by OO to a supplied CSV file.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4. Use as-is. Not officially supported through Micro Focus.</div><div>#</div><div># Limitations: 1. Does not use proxy. If your environment requires proxy to&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;connect to the OO Central Application, enhance this script</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;to accomodate web requests through proxy.&nbsp;</div><div>#</div><div># Usage: 1. Runs on Windows OS and it requires Windows Powershell on the</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;operating system. Copy this script to a directory on the windows</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;server/workstation/laptop.</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; 2. Open powershell window&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; 3. Run Get-Help .\OOGetOrchNodes.ps1 to get a list of parameters that</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;needs to be passed.</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; 4. Sample usage: .\OOGetOrchNodes.ps1 -OOCentralURL&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;https://&lt;OOCentralHostName&gt;:&lt;Port&gt;/oo -UserName&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;admin -Passwd &lt;AdminUserPassword&gt; -OutCSVFile C:\temp\orchestratedNodeList.csv</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; 5. Parameter explanation:</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OOCentralURL: URL to access OO Central UI. This URL can be either</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;http or https depending on how OO is setup in your&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;environment.</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;UserName: OO central username with administrator privileges</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Password: Password for the user to login to OO Central&nbsp;</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Application.</div><div>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OutCSVFile: Absolute path to the CSV file to which orchestrated node list has to be written&nbsp;</div><div><br></div><div># Validate input parameters for NULL, empty and mandatory conditions.</div><div>param (</div><div>&nbsp; &nbsp; [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OOCentralURL,</div><div>&nbsp; &nbsp; [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$UserName,</div><div>&nbsp; &nbsp; [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$Passwd,</div><div>&nbsp; &nbsp; [Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$OutCSVFile&nbsp; &nbsp;&nbsp;</div><div>)</div><div><br></div><div># Returns true if supplied object and/or string is NULL or empty</div><div>function IsNull($object) {</div><div>&nbsp; &nbsp; if ($object -eq $null) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return $true</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; if ($object -is [String] -and $object -eq [String]::Empty) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return $true</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; return $false</div><div>}</div><div><br></div><div># Validate format of supplied OO Central URL</div><div>$uri = $OOCentralURL -as [System.URI]</div><div>if (-Not (($uri.AbsoluteURI -ne $null) -and ($uri.Scheme -eq 'http' -or $uri.Scheme -eq 'https') -and ($uri.AbsoluteURI.Substring($uri.AbsoluteURI.Length - 3) -eq '/oo') ) ){</div><div>&nbsp; &nbsp; throw 'The supplied OO central URL: ' + '"' + $OOCentralURL + '"' + ' is invalid. Format of OO Central URLs are https://&lt;OOCentralFQDNorIP&gt;:&lt;Port&gt;/oo or http://&lt;OOCentralFQDNorIP&gt;:&lt;Port&gt;/oo'</div><div>}</div><div><br></div><div># Trusts all certificates including self-signed root certificates</div><div># generated by OO</div><div>add-type @"</div><div>&nbsp; &nbsp; using System.Net;</div><div>&nbsp; &nbsp; using System.Security.Cryptography.X509Certificates;</div><div>&nbsp; &nbsp; public class TrustAllCertsPolicy : ICertificatePolicy {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; public bool CheckValidationResult(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServicePoint srvPoint, X509Certificate certificate,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WebRequest request, int certificateProblem) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>"@</div><div>[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy</div><div>[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12</div><div><br></div><div># Validate supplied path to CSV file</div><div>if ( -not [System.IO.Path]::IsPathRooted($OutCSVFile)) {</div><div><span style="white-space:pre">	</span>throw 'Supply absolute path to the csv file'</div><div>}</div><div>$parentPath = Split-Path -Path $OutCSVFile</div><div>if (-not (Test-Path "$parentPath" -PathType Container)){</div><div>&nbsp; &nbsp; throw 'Path to ' + $OutCSVFile + ' does not exist'</div><div>}</div><div>elseif (($OutCSVFile.Substring($OutCSVFile.Length - 4)) -ne '.csv'){</div><div>&nbsp; &nbsp; throw $OutCSVFile + ' does not have .csv extension'</div><div>}</div><div><br></div><div># Create authorization header value using supplied OO Central user name&nbsp;</div><div># and password. This authorization header value is used in REST API&nbsp;</div><div># calls to OO Central Application.</div><div>$authPlainText = $UserName + ':' + $Passwd</div><div>$authPlainTextBytes = [System.Text.Encoding]::UTF8.GetBytes($authPlainText)</div><div>$authEncodedText =[System.Convert]::ToBase64String($authPlainTextBytes)</div><div>$authHeaderValue = "Basic $authEncodedText"</div><div><br></div><div># Set page size to a large number so that all nodes are retrieved in one GET call.</div><div>$pageSize = 100000000</div><div><br></div><div>$headers = @{</div><div>&nbsp; &nbsp; 'accept' = 'application/json'</div><div>&nbsp; &nbsp; 'Authorization' = $authHeaderValue&nbsp; &nbsp;&nbsp;</div><div>}</div><div><br></div><div># Make a REST API call to OO to retrieve orchestrated node information</div><div>$getRequestURL = $OOCentralURL + "/rest/v2/targets/all?pageSize=$pageSize"</div><div>try{</div><div>&nbsp; &nbsp; $getReqWebResponse = Invoke-WebRequest -Method Get -Uri $getRequestURL -Headers $headers</div><div>}</div><div>catch{</div><div>&nbsp; &nbsp; If (IsNull($getReqWebResponse)) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; throw $($PSItem.ToString())&nbsp;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; else {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; throw 'Response code is ' + $getReqWebResponse.StatusCode + $($PSItem.ToString())</div><div>&nbsp; &nbsp; }</div><div>}</div><div><br></div><div># Display number of orchestrated nodes and write node information to CSV file</div><div>If (-Not (IsNull($getReqWebResponse))){</div><div>&nbsp; &nbsp; $orchestratedNodes = ConvertFrom-Json -InputObject $getReqWebResponse.Content&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; Write-Host 'Total number of nodes orchestrated by OO: '$orchestratedNodes.length</div><div>&nbsp; &nbsp; if ($orchestratedNodes.length -gt 0)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; <span style="white-space:pre">	</span>$orchestratedNodes | Select-Object -Property target, count | Export-CSV $OutCSVFile -NoTypeInformation</div><div><span style="white-space:pre">	</span>&nbsp; &nbsp; Write-Host 'Information about nodes orchestrated by OO has been made available in the following file: ' $OutCSVFile</div><div>&nbsp; &nbsp; }&nbsp; &nbsp;&nbsp;</div><div>}</div><div>else</div><div>{</div><div><span style="white-space:pre">	</span>Write-Host 'OO Central Application returned a NULL response'</div><div>}</div>